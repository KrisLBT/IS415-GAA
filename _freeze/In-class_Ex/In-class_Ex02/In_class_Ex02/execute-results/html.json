{
  "hash": "7e54521147e6b8b0a0aeecf058ed1bfb",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 2\"\nformat:\n  html:\n    code-fold: True\n    code-summary: \"Show the code\"\n    toc: True\n    toc-depth: 4\nexecute:\n  eval: True\n  echo: True\n  warning: False\n  freeze: True\ndate: \"2024-02-19\"\n---\n\n\n# Overview\n\nIn this exercise, we will be using the GrabPosisi data downloaded the previous week.\n\n# Getting started\n\n## Folder creation\n\nUsing the file navigation in RStudio, create a new subdirectory for the second in-class exercise.\n\n## Package installation\n\nThe following packages will be used and loaded in the R environment for this exercise:\n\n-   **arrow:** handles databases and data conversions. Allows us to work with Parquet files, which are rare\n-   **lubridate:** helps lubricate data file\n-   tmap\n-   tidyverse\n\nCode chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(arrow, lubridate, tmap, tidyverse, sf)\n```\n:::\n\n\n::: {.callout-note appearance=\"minimal\"}\nNote: saw callout notes on prof's code, thought it looked cool. I can access it from the Visual tab but being able to write it in the source code seemed useful so I don't have to constantly toggle between the two modes\n:::\n\n## Importing the Grab-Posisi Dataset\n\n::: callout-caution\n**Warning:** Data is very, very large and will cause RStudio to crash if you upload it to Github. Remember to ensure .gitignore will ignore data/ subdirectories!\n:::\n\n# Handling the data\n\n## Reading the GrabPosisi data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_parquet(file=\"../../data/data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n```\n:::\n\n\n## Converting the pingtimestamp to date_time\n\nThere was supposed to be a datetime stamp but it wasn't in that format. As such, the data type needs to be changed\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$pingtimestamp <- as_datetime(df$pingtimestamp)\n```\n:::\n\n\n# Extracting trip starting locations\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_df <- df %>%\n  group_by(trj_id) %>%\n  arrange(pingtimestamp) %>%\n  filter(row_number()==1) %>%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         start_hr= factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\nHow this code works: - group by the trip (treat trj_id as trip_id) - arrange it according to the timestamp - get the first row - get dates via wday, factor and mday\n\n# Extract the destinations\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndestination_df <- df %>%\n  group_by(trj_id) %>%\n  arrange(desc(pingtimestamp)) %>%\n  filter(row_number()== 1) %>%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         end_hr= factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\n# RDS\n\n## Writing\n\nNow, we will write it to a separate rds file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(origin_df, \"data/rds/origin_df.rds\")\nwrite_rds(destination_df, \"data/rds/destination_df.rds\")\n```\n:::\n\n\n## Reading\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_df <- read_rds(\"data/rds/origin_df.rds\")\ndestination_df <- read_rds(\"data/rds/destination_df.rds\")\n```\n:::\n\n\n# Visualising as Point Symbol Map (TBD)\n\nNext, we will be visualising the origin and destinations in GrabPosisi. \\## Converting from RDS to simple feature\n\nWe convert the RDS to simple feature.\n\nAlso, note the projected crs in the data. It is in wgs84, which needs to be converted to crs 3414.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_sf <- st_as_sf(origin_df, coords = c(\"rawlng\", \"rawlat\"),\n                       crs=4326) %>%\n  st_transform(crs=3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndestination_sf <- st_as_sf(destination_df, \n                           coords = c(\"rawlng\", \"rawlat\"), \n                           crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n## Visualising the Frequency Distribution\n\nNext, I will be showing the distribution of origin trips by the day of the week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=origin_df, \n       aes(x=weekday)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](In_class_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nAs can be seen, the number of trips daily seem to be fairly equally distributed throughout the week.\n\n## Visualising as Point Symbol Map\n\nWe also want to visualise the geospatial distribution of origin points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(origin_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](In_class_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWhile the above does show the distribution of the origin points, they are not contextualised according to the landscape of Singapore.\n\n# Importing Master Plan 2019 Planning Subzone Boundary\n\nFirst, we will import the polygon feature data in kml format\n\n## DIY\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz2019 <- st_read(\"data/geospatial/MPSZ2019.kml\") %>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex02\\data\\geospatial\\MPSZ2019.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nNext, I will be trying to merge the dots with the base layer.\n\n## DIY 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz2019) +\n  tm_polygons() +\ntm_shape(origin_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](In_class_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In_class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}