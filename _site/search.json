[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#st_geometry",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#st_geometry",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "st_geometry()",
    "text": "st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#glimpse",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#glimpse",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "glimpse()",
    "text": "glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#head",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#head",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "head()",
    "text": "head()\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#basic-plotting",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#basic-plotting",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Basic Plotting",
    "text": "Basic Plotting\n\nplot(mpsz)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-st_geometry",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-st_geometry",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Plotting st_geometry()",
    "text": "Plotting st_geometry()\n\nplot(st_geometry(mpsz))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-specific-attribute",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-specific-attribute",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Plotting specific attribute",
    "text": "Plotting specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-dataframe",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-dataframe",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Assigning EPSG code to a simple feature dataframe",
    "text": "Assigning EPSG code to a simple feature dataframe\n###Seeing the CRS\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nSetting the CRS to 3414\n\nmpsz3414 <- st_set_crs(mpsz, 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#check-the-crs-again",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#check-the-crs-again",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Check the CRS again",
    "text": "Check the CRS again\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#check-the-geometry",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#check-the-geometry",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Check the geometry",
    "text": "Check the geometry\nFirstly, I will check the projection for preschool\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#transform",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#transform",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Transform",
    "text": "Transform\nThen, I will transform the CRS\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#display-the-new-crs",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#display-the-new-crs",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Display the new CRS",
    "text": "Display the new CRS\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reading-the-csv-file",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reading-the-csv-file",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Reading the csv file",
    "text": "Reading the csv file\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reading-the-listings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reading-the-listings",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Reading the listings",
    "text": "Reading the listings\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,457 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    <dbl> <chr>       <dbl> <chr>     <chr>               <chr>            <dbl>\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,447 more rows\n# ℹ 11 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#convert-the-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#convert-the-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Convert the simple feature data frame from an aspatial data frame",
    "text": "Convert the simple feature data frame from an aspatial data frame\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#examine-contents",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#examine-contents",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Examine contents",
    "text": "Examine contents\n\nglimpse(listings_sf)\n\nRows: 3,457\nColumns: 17\n$ id                             <dbl> 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           <chr> \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      <chr> \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            <chr> \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  <chr> \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 150, 80, 80, 64, 78, 220, 85, 75, 69, 7…\n$ minimum_nights                 <dbl> 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 12, 131, 17, 5, 81,…\n$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              <dbl> 0.13, 0.16, 0.30, 0.15, 0.11, 0.09, 0.9…\n$ calculated_host_listings_count <dbl> 5, 5, 5, 51, 51, 5, 7, 51, 51, 7, 7, 1,…\n$ availability_365               <dbl> 55, 91, 91, 183, 183, 54, 365, 183, 183…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 3, 0, 0, 1, 2, 0, 0, 0, 0, …\n$ license                        <chr> NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Buffering",
    "text": "Buffering\n\nComputing the 5-metres buffers around cycling paths\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\n\nCalculating area\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\n\nDerive total land involved\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#calculate-number-of-preschools-that-fall-insde-each-planning-subzone",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#calculate-number-of-preschools-that-fall-insde-each-planning-subzone",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Calculate number of preschools that fall insde each planning subzone",
    "text": "Calculate number of preschools that fall insde each planning subzone\n\nmpsz3414$'PreSch Count'<- lengths(st_intersects(mpsz3414, preschool3414))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#summary-of-the-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#summary-of-the-count",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Summary of the Count",
    "text": "Summary of the Count\n\nsummary(mpsz3414$'PreSch Count')\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#subzone-with-the-highest-number-of-pre-schools-ak-prof-about-wt-problem",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#subzone-with-the-highest-number-of-pre-schools-ak-prof-about-wt-problem",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Subzone with the highest number of pre-schools (ak prof about wt problem)",
    "text": "Subzone with the highest number of pre-schools (ak prof about wt problem)\n\ntop_n(mpsz3414, 1)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#derive-area-of-each-planning-subzone",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#derive-area-of-each-planning-subzone",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Derive area of each planning subzone",
    "text": "Derive area of each planning subzone\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#compute-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#compute-density",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Compute density",
    "text": "Compute density\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histogram-of-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histogram-of-density",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Histogram of Density",
    "text": "Histogram of Density\n\nhist(mpsz3414$`PreSch Density`)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#are-pre-schools-even-distributed-in-singapore",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#are-pre-schools-even-distributed-in-singapore",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Are pre-schools even distributed in Singapore?",
    "text": "Are pre-schools even distributed in Singapore?\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#relationship-between-pre-school-density-and-pre-school-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#relationship-between-pre-school-density-and-pre-school-count",
    "title": "Hands-on Exercise 01: Geospatial Data Wrangling with R",
    "section": "Relationship between Pre-School Density and Pre-school Count",
    "text": "Relationship between Pre-School Density and Pre-school Count\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "In this hands-on exercise, I will be creating chloropleth maps using an R package called tmap."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#loading-the-packages-in-rstudio",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#loading-the-packages-in-rstudio",
    "title": "Hands-on Exercise 02: Thematic Mapping and GeoVisualisation with R",
    "section": "Loading the packages in RStudio",
    "text": "Loading the packages in RStudio\n\npacman::p_load(sf,tmap,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-data-used",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-data-used",
    "title": "Hands-on Exercise 02: Thematic Mapping and GeoVisualisation with R",
    "section": "The Data Used",
    "text": "The Data Used\nThe following datasets will be used:\n\nMaster Plan 2014 Subzone Boundary (Web) from https://data.gov.sg\nSingapore Residents by Planning Area / Subzon, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format from Department of Statistics, Singapore https://www.singstat.gov.sg/"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-into-r",
    "title": "Hands-on Exercise 02: Thematic Mapping and GeoVisualisation with R",
    "section": "Importing Geospatial Data into R",
    "text": "Importing Geospatial Data into R\nUse the st_read() function of the sf package to import the subzone shapefile into R as a simple feature dataframe called mpsz\n\nmpsz <- st_read(dsn=\"data/geospatial\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nI can examine the content of mpsz wiith the following code chunk\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-attribute-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-attribute-data-into-r",
    "title": "Hands-on Exercise 02: Thematic Mapping and GeoVisualisation with R",
    "section": "Importing Attribute Data into R",
    "text": "Importing Attribute Data into R\nNext, I will import attribute data and save the file into an R dataframe called popdata\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "title": "Hands-on Exercise 02: Thematic Mapping and GeoVisualisation with R",
    "section": "Data Preparation",
    "text": "Data Preparation\nBefore a thematic map can be prepared, I will have to prepare a data table with 2020 values. It will include the following variables:\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\nData Wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\nJoining the Attribute Data\nBefore we can perform the georelational join, 1 extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ are made up of lower- and uppercase while SUBZONE_N and PLN_AREA_N are in uppercase\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nNext, the left_join_ of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020, \n                          by = c(\"SUBZONE_N\"= \"SZ\"))\n\nNext, I will write an rds:\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-chloropleth-map-quickly-by-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-chloropleth-map-quickly-by-using-qtm",
    "title": "Hands-on Exercise 02: Thematic Mapping and GeoVisualisation with R",
    "section": "Plotting a Chloropleth Map Quickly by Using qtm()",
    "text": "Plotting a Chloropleth Map Quickly by Using qtm()\nThe code chunk will draw a cartographic standard chloropleth map as shown below:\n\ntmap_mode(\"plot\")\n\nqtm(mpsz_pop2020,\n    fill=\"DEPENDENCY\")\n\n\n\n\nLearning points:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, the “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "Hands-on Exercise 02: Thematic Mapping and GeoVisualisation with R",
    "section": "Creating a Choropleth Map by Using tmap’s Elements",
    "text": "Creating a Choropleth Map by Using tmap’s Elements\nWhle gtm() is very fast and easy, the disadvatage is that the aesthetics of individual layers are difficult to control. To draw a high quality cartographic chloropleth map, tmap’s drawing elements should be used\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nThe following sections will break down the code and explain what each individual element does.\n\nDrawing the Base Layer\nThe basic building block of tmap is tm_shape() followed by one or more elements such as tm_fill() and tm_polygons()\nIn the code chunk below, tm_shape() is used to define the input data and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a Map with tm_polygons()\nTo draw a chloropleth map showing a the geographical distribution of a selected variable by planning subzone, I assign the target variable such as DEPENDENCY to tm_polygons()\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the chloropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\nDrawing a Map Using tm_fill() and tm_border()\ntm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the chloropleth map.\nThe following code chunk draws a chloropleth map using tm_fill() alone\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nTo add the boundaries of the planning subzones, tm_borders() will be used:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\nData Classificiation Methods of tmap\nMost chloropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nUsing Built-in Classification Methods\nThe code chunk below shows a quantile data classficiation that uses 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nDIY\n\nDifferent Classfication Methods\nIn the code chunk below, kmeans data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, hclust data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, bclust data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\nDifferent Number of Classes\nWith n = 5\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWith n = 10\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWith n = 15\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 15,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWith n = 20\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nPlotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nit is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, I will plot the chLoropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nColour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package\n\nUsing ColorBrewer palette\nTo change the colour, I assign the preferred colour to the palette argument of tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nTo reverse the colour scheme, add an “-” behind the palette value as shown below:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Layout\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\nMap Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\nCartographic funiture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines respectively onto the chloropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset to the default style, refer to the code chunk below:\n\ntmap_style(\"white\")\n\n\n\nDrawinig Facet Chloropleth Maps\nFacet maps are composed of many maps arranged side-by-side and occassionally, vertically. They enable the visualisation of how spatial relationships shift with respect to another variable.\nIn tmap, this can be done in 3 ways:\n\nby assigning multiple values to at least one of the aesthetic arguments,\nby defining a group-by variable in tm_facets() and,\nby creating multiple stand-alone maps with tmap_arrange()\n\n\nBy Assigning Multiple Values to At Least One of the Aesthetic Arguments\nIn the code chunk below, small chloropleth maps are created by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nBy Defining a Group-by Variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nBy Creating Multiple Stand-alone Maps with tmaps_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\nInstead of creating facets maps, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3 and 4",
    "section": "",
    "text": "In this exercse, we will be learning about 1st order Spatial Point Patterns Analysis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#the-data",
    "title": "Hands-on Exercise 3 and 4",
    "section": "The Data",
    "text": "The Data\nThe following datasets will be used\n\nCHILDCARE which was downloaded from data.gov.sg\n2014 Master Plan Subzone Boundary (No Sea) which was downloaded from data.gov.sg\nCoastalOutline, which was derived from 2019 Master Plan Subzone Boundary (No Sea). It was downloaded from data.gov.sg"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#downloading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#downloading-packages",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Downloading Packages",
    "text": "Downloading Packages\nThe following packages will be used:\n\nmaptools\nsf\nraster\nspatstat\ntmap\n\n\n\nShow the code\npacman::p_load(maptools, sf, raster, spatstat, tmap)\n\n\nAs there may be issues with installing maptools, you may use the following:\n\n\nShow the code\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-spatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-spatial-data",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Importing the Spatial Data",
    "text": "Importing the Spatial Data\nImport the spatial data using st_read().\n\n\nShow the code\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\n\nReading layer `child-care-services-geojson' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\nShow the code\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nShow the code\nsg_sf <-\n  st_read(dsn=\"data\",\n          layer= \"CostalOutline\")\n\n\nReading layer `CostalOutline' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class-idk",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class-idk",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Converting sf data frames to sp’s Spatial* class –> idk",
    "text": "Converting sf data frames to sp’s Spatial* class –> idk\n\n\nShow the code\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\n\n\nShow the code\nprint(mpsz)\n\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\n\nShow the code\nprint(childcare)\n\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\n\nShow the code\nprint(sg)\n\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Converting the Spatial* class into generic sp format",
    "text": "Converting the Spatial* class into generic sp format\n\n\nShow the code\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\n\n\nShow the code\nprint(childcare_sp)\n\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\nShow the code\nprint(sg_sp)\n\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-into-generic-sp-format-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-into-generic-sp-format-1",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Converting the Spatial* class into generic sp format",
    "text": "Converting the Spatial* class into generic sp format\nThe code chunk below converts the Spatial* classes into generic sp objects:\n\n\nShow the code\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sg <- as(sg, \"SpatialPolygons\")\n\n\nNext, I will display the sp objects as shown below:\n\n\nShow the code\nchildcare_sp\n\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\nShow the code\nsg_sp\n\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\nAnswer to challenge: > The class Spatial only holds metadata common to all derived classes (bounding box,coordinate reference system),and is convenient for defining methods that are common to all derived classes.\n– From here"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Converting the generic sp format into spatstat’s ppp format",
    "text": "Converting the generic sp format into spatstat’s ppp format\nAbout ppp format\nConversion:\n\n\nShow the code\nchildcare_ppp<- as(childcare_sp,\"ppp\")\nchildcare_ppp\n\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\nNow, I will plot childcare_ppp and examine the difference:\n\n\nShow the code\nplot(childcare_ppp)\n\n\n\n\n\nSummary statistics:\n\n\nShow the code\nsummary(childcare_ppp)\n\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Handling duplicated points",
    "text": "Handling duplicated points\nWe can check for duplication in a ppp object by using the code chunk below:\n\n\nShow the code\nany(duplicated(childcare_ppp))\n\n\n[1] TRUE\n\n\nTo count the number of co-incidence point, we will use the multiplicity() function as shown below (as there are too many entries, I have set eval to FALSE):\n\n\nShow the code\nmultiplicity(childcare_ppp)\n\n\nTo find out how many locations have more than 1 point,event, we can use the code chunk below:\n\n\nShow the code\nsum(multiplicity(childcare_ppp)>1)\n\n\n[1] 128\n\n\nThis shwos that there are 1128duplicated point events\nTo view the locations of these duplicate point events, we will plot childcare data by using the following code chunk:\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(childcare) +\n  tm_dots(alpha=0.4,\n          size = 0.05)\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\nAnswer to challenge > The ones with multiplicity are the ones that are darker compared to others\nThere are three ways to solve the problem: - Delete the duplicates (however, you may lose some useful events) - jittering, which will add a small perturbation to the duplicate points so they do not occupy the exact same space. - Make each point “unique” and the attach the duplicates of the points to the patterns as marks, as attributes of the points.\nThe code chunk below shows the jittering approach (method 3)\n\n\nShow the code\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nNow, I will check if there remains any duplicated data\n\n\nShow the code\nany(duplicated(childcare_ppp_jit))\n\n\n[1] FALSE\n\n\nAlternatively,\n\n\nShow the code\nsum(multiplicity(childcare_ppp_jit)>1)\n\n\n[1] 0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-own-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-own-owin-object",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Creating own owin object",
    "text": "Creating own owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\n\n\nShow the code\nsg_owin <- as(sg_sp, \"owin\")\n\n\nthe output object can be displayed using the plot() functions:\n\n\nShow the code\nplot(sg_owin)\n\n\n\n\n\nAnd here is the summary:\n\n\nShow the code\nsummary(sg_owin)\n\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-events-object-and-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-events-object-and-owin-object",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Combining point events object and owin object",
    "text": "Combining point events object and owin object\nIn the last step of geospatial wrangling, we will extract childcare events that are located within Singapore\n\n\nShow the code\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nDIY\n\n\nShow the code\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-density-estimation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-density-estimation",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Kernel Density Estimation",
    "text": "Kernel Density Estimation\n\nComputing kernel density estimation using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\n\nShow the code\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nThe below code chunk will display the derived kernel display.\n\n\nShow the code\nplot(kde_childcareSG_bw)\n\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.\n\n\nShow the code\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n\n   sigma \n298.4095 \n\n\n\n\nRescaling KDE values\nIn the code chunk below, rescale() is used to covert the unit of measurement from meter to kilometer.\n\n\nShow the code\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\n\nWe can re-run density() using the rescaled dataset and plot the output kde map.\n\n\nShow the code\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\nNotice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-automatic-badwidth-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-automatic-badwidth-methods",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Working with different automatic badwidth methods",
    "text": "Working with different automatic badwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\n\nShow the code\nbw.CvL(childcareSG_ppp.km)\n\n\n   sigma \n4.543278 \n\n\n\n\nShow the code\nbw.scott(childcareSG_ppp.km)\n\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\n\nShow the code\nbw.ppl(childcareSG_ppp.km)\n\n\n    sigma \n0.3897114 \n\n\n\n\nShow the code\nbw.diggle(childcareSG_ppp.km)\n\n\n    sigma \n0.2984095 \n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\nThe code chunk beow will be used to compare the output of using bw.diggle and bw.ppl methods.\n\n\nShow the code\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-kernel-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-different-kernel-methods",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Working with different kernel methods",
    "text": "Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-using-fixed-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-using-fixed-bandwidth",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Computing KDE by using fixed bandwidth",
    "text": "Computing KDE by using fixed bandwidth\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\n\nShow the code\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-using-adaptive-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-using-adaptive-bandwidth",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Computing KDE by using adaptive bandwidth",
    "text": "Computing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, you will learn how to derive adaptive kernel density estimation by using density.adaptive() of spatstat.\n\n\nShow the code\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\n\nShow the code\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-kde-output-into-grid-object.",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-kde-output-into-grid-object.",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Converting KDE output into grid object.",
    "text": "Converting KDE output into grid object.\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\n\nShow the code\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\nConverting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\n\nShow the code\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\n\n\nLet us take a look at the properties:\n\n\nShow the code\nkde_childcareSG_bw_raster\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nNotice that the crs property is NA.\n\n\nAssigning projections system\nThe code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster Raster Layer.\n\n\nShow the code\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#visualising-the-output-in-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#visualising-the-output-in-tmap",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Visualising the output in tmap",
    "text": "Visualising the output in tmap\nFinally, we will display the raster in cartographic quality map using tmap package.\n\n\nShow the code\ntm_shape(kde_childcareSG_bw_raster) +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\", frame = FALSE))\n\n\n\n\n\nNotice that the raster values are encoded explicitly onto the raster pixel using the values in “v”” field."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#comparing-spatial-point-patterns-using-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#comparing-spatial-point-patterns-using-kde",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Comparing Spatial Point Patterns using KDE",
    "text": "Comparing Spatial Point Patterns using KDE\nIn this section, you will learn how to compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\nExtracting study area\nThe code chunk below will be used to extract the target planning areas.\n\n\nShow the code\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\nPlotting target planning areas\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\nConverting the spatial point data frame into generic sp format\nNext, we will convert these SpatialPolygonsDataFrame layers into generic spatialpolygons layers.\n\n\nShow the code\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\n\nCreating owin object\nNow, we will convert these SpatialPolygons objects into owin objects that is required by spatstat.\n\n\nShow the code\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n\nCombining childcare points and the study area\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\n\nShow the code\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\n\nShow the code\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\nComputing KDE\nThe code chunk below will be used to compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\n\nComputing fixed bandwidth KDE\nFor comparison purposes, we will use 250m as the bandwidth.\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Testing spatial point patterns using Clark and Evans Test",
    "text": "Testing spatial point patterns using Clark and Evans Test\n\n\nShow the code\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n\nConclusion: “We reject the null hypothesis”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-choa-chu-kang-planning-area",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-choa-chu-kang-planning-area",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Clark and Evans Test: Choa Chu Kang planning area",
    "text": "Clark and Evans Test: Choa Chu Kang planning area\nIn the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.\n\n\nShow the code\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.92098, p-value = 0.2377\nalternative hypothesis: two-sided\n\n\nConclusion: we do not reject null hypothesis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-tampines-planning-area",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-tampines-planning-area",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Clark and Evans Test: Tampines planning area",
    "text": "Clark and Evans Test: Tampines planning area\n\n\nShow the code\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.80477, p-value = 0.000426\nalternative hypothesis: two-sided\n\n\nConclusion: We reject the null hypothesis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Choa Chu Kang planning area",
    "text": "Choa Chu Kang planning area\n\nComputing G-function estimation\nThe code chunk below is used to compute G-function using Gest() of spatat package.\n\n\nShow the code\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\n\nShow the code\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\n\nShow the code\nplot(G_CK.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Tampines planning area",
    "text": "Tampines planning area\n\nComputing G-function estimation\n\n\nShow the code\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\n\nShow the code\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\n\nShow the code\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-1",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Choa Chu Kang planning area",
    "text": "Choa Chu Kang planning area\n\nComputing F-function estimation\nThe code chunk below is used to compute F-function using Fest() of spatat package.\n\n\nShow the code\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\n\nShow the code\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\n\nShow the code\nplot(F_CK.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-1",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Tampines planning area",
    "text": "Tampines planning area\n\nComputing F-function estimation\nMonte Carlo test with F-function\n\n\nShow the code\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\n\nShow the code\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\n\nShow the code\nplot(F_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-2",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-2",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Choa Chu Kang planning area",
    "text": "Choa Chu Kang planning area\n\nComputing K-function estimate\n\n\nShow the code\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\n\nShow the code\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\nShow the code\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-2",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-2",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Tampines planning area",
    "text": "Tampines planning area\n\nComputing K-function estimation\n\n\nShow the code\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\n\nShow the code\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\nShow the code\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-3",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#choa-chu-kang-planning-area-3",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Choa Chu Kang planning area",
    "text": "Choa Chu Kang planning area\n\n\nShow the code\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\n\nShow the code\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\nShow the code\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-3",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tampines-planning-area-3",
    "title": "Hands-on Exercise 3 and 4",
    "section": "Tampines planning area",
    "text": "Tampines planning area\n\nComputing L-function estimate\n\n\nShow the code\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below will be used to perform the hypothesis testing.\n\n\nShow the code\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\n\nShow the code\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In_class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In_class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Hello"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "In this exercise, we will be using the GrabPosisi data downloaded the previous week."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#folder-creation",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#folder-creation",
    "title": "In-class Exercise 2",
    "section": "Folder creation",
    "text": "Folder creation\nUsing the file navigation in RStudio, create a new subdirectory for the second in-class exercise."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#package-installation",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#package-installation",
    "title": "In-class Exercise 2",
    "section": "Package installation",
    "text": "Package installation\nThe following packages will be used and loaded in the R environment for this exercise:\n\narrow: handles databases and data conversions. Allows us to work with Parquet files, which are rare\nlubridate: helps lubricate data file\ntmap\ntidyverse\n\nCode chunk:\n\n\nShow the code\npacman::p_load(arrow, lubridate, tmap, tidyverse, sf)\n\n\n\n\n\n\n\n\nNote: saw callout notes on prof’s code, thought it looked cool. I can access it from the Visual tab but being able to write it in the source code seemed useful so I don’t have to constantly toggle between the two modes"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#importing-the-grab-posisi-dataset",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#importing-the-grab-posisi-dataset",
    "title": "In-class Exercise 2",
    "section": "Importing the Grab-Posisi Dataset",
    "text": "Importing the Grab-Posisi Dataset\n\n\n\n\n\n\nDanger\n\n\n\nWarning: Data is very, very large and will cause RStudio to crash if you upload it to Github. Remember to ensure .gitignore will ignore data/ subdirectories!"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#reading-the-grabposisi-data",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#reading-the-grabposisi-data",
    "title": "In-class Exercise 2",
    "section": "Reading the GrabPosisi data",
    "text": "Reading the GrabPosisi data\n\n\nShow the code\ndf <- read_parquet(file=\"../../data/data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#converting-the-pingtimestamp-to-date_time",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#converting-the-pingtimestamp-to-date_time",
    "title": "In-class Exercise 2",
    "section": "Converting the pingtimestamp to date_time",
    "text": "Converting the pingtimestamp to date_time\nThere was supposed to be a datetime stamp but it wasn’t in that format. As such, the data type needs to be changed\n\n\nShow the code\ndf$pingtimestamp <- as_datetime(df$pingtimestamp)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#writing",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#writing",
    "title": "In-class Exercise 2",
    "section": "Writing",
    "text": "Writing\nNow, we will write it to a separate rds file:\n\n\nShow the code\nwrite_rds(origin_df, \"data/rds/origin_df.rds\")\nwrite_rds(destination_df, \"data/rds/destination_df.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#reading",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#reading",
    "title": "In-class Exercise 2",
    "section": "Reading",
    "text": "Reading\n\n\nShow the code\norigin_df <- read_rds(\"data/rds/origin_df.rds\")\ndestination_df <- read_rds(\"data/rds/destination_df.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#visualising-the-frequency-distribution",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#visualising-the-frequency-distribution",
    "title": "In-class Exercise 2",
    "section": "Visualising the Frequency Distribution",
    "text": "Visualising the Frequency Distribution\nNext, I will be showing the distribution of origin trips by the day of the week.\n\n\nShow the code\nggplot(data=origin_df, \n       aes(x=weekday)) + \n  geom_bar()\n\n\n\n\n\nAs can be seen, the number of trips daily seem to be fairly equally distributed throughout the week."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#visualising-as-point-symbol-map",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#visualising-as-point-symbol-map",
    "title": "In-class Exercise 2",
    "section": "Visualising as Point Symbol Map",
    "text": "Visualising as Point Symbol Map\nWe also want to visualise the geospatial distribution of origin points.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(origin_sf) +\n  tm_dots()\n\n\n\n\n\nWhile the above does show the distribution of the origin points, they are not contextualised according to the landscape of Singapore."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#diy",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#diy",
    "title": "In-class Exercise 2",
    "section": "DIY",
    "text": "DIY\n\n\nShow the code\nmpsz2019 <- st_read(\"data/geospatial/MPSZ2019.kml\") %>%\n  st_transform(crs=3414)\n\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex02\\data\\geospatial\\MPSZ2019.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nNext, I will be trying to merge the dots with the base layer."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#diy-2",
    "href": "In-class_Ex/In-class_Ex02/In_class_Ex02.html#diy-2",
    "title": "In-class Exercise 2",
    "section": "DIY 2",
    "text": "DIY 2\n\n\nShow the code\ntm_shape(mpsz2019) +\n  tm_polygons() +\ntm_shape(origin_sf) +\n  tm_dots()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In_class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In_class_Ex03.html",
    "title": "In-class exercise 3",
    "section": "",
    "text": "In this in-class exercise, we will be using the following packages:\n\nmaptools\nsf\nspatstat\ntmap\ntidyverse\n\n\n\nShow the code\npacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse)\n\n\nAs there may be issues with installing maptools, you may use the following:\n\n\nShow the code\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\n\nAfter that, you can rerun the first code block."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In_class_Ex03.html#deriving-coastaloutline",
    "href": "In-class_Ex/In-class_Ex03/In_class_Ex03.html#deriving-coastaloutline",
    "title": "In-class exercise 3",
    "section": "Deriving CoastalOutline",
    "text": "Deriving CoastalOutline\nFirst, we can plot the Master Plan Subzone Boundary 2014\n\n\nShow the code\nplot(mpsz_sf)\n\n\n\n\n\nThen we can blend away the boundaries.\n\n\nShow the code\nsg_sf <- mpsz_sf %>%\n  st_union()\n\n\n\n\nShow the code\nplot(sg_sf)\n\n\n\n\n\nWe use st_union() over st_combine() as st_union() will treat the output as a singular polygon while st_combine() will treat the individual subzones as their own polygon.\nWith that, we have made the CoastalOutline"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In_class_Ex03.html#creating-ppp-objects-sf-method",
    "href": "In-class_Ex/In-class_Ex03/In_class_Ex03.html#creating-ppp-objects-sf-method",
    "title": "In-class exercise 3",
    "section": "Creating ppp objects: sf method",
    "text": "Creating ppp objects: sf method\nWe can use the more efficient as.ppp() method to convert to ppp.\n\n\nShow the code\nchildcare_ppp <- as.ppp(childcare_sf)\n\n\n\n\nShow the code\nsummary(childcare_ppp)\n\n\nMarked planar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "This is the course website for IS415 in AY2022/2023 Semester 2 and is where you can find my course work done for this module."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html",
    "title": "Take Home Exercise 01: Part 1",
    "section": "",
    "text": "It is important for local and government urban planners to know and understand how, where and when people move. For Singapore, data regarding human mobility has largely been collected and disseminated by the Land Transport Authority (LTA). However, they have only collected and publicised data regarding passenger volume from trains stations and bus stops. While immensely helpful, it still leaves out crucial information about human mobility through other means of transport, making it incomphrensive.\nIn 2020, Grab released Grab Posisi, a data set regarding the origin and destinations of Grab taxi users in Singapore.\nIn this take-home exercise, I will be finding the geographical and spatio-temporal distribution of Grab hailing service locations in Singapore.\nThe distribution will be analysed using the following, which will be displayed on the openstreetmap of Singapore:\n\nTraditional Kernel Density Estimation (KDE) layers: to analyse the where origin points tend to cluster\nNetwork Kernel Density Estimation (NKDE): to analyse the clusters of origin points, as constrained by the road."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In_class_Ex03.html#network-constrained-kde-netkde-analysis",
    "href": "In-class_Ex/In-class_Ex03/In_class_Ex03.html#network-constrained-kde-netkde-analysis",
    "title": "In-class exercise 3",
    "section": "Network Constrained KDE (NetKDE) Analysis",
    "text": "Network Constrained KDE (NetKDE) Analysis\n\nPreparing the lixels objects\n\n\nShow the code\nlixels <- lixelize_lines(network, \n                         750, \n                         mindist = 375)\n                         #mindist should be half of the first value"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In_class_Ex03.html#generating-line-points",
    "href": "In-class_Ex/In-class_Ex03/In_class_Ex03.html#generating-line-points",
    "title": "In-class exercise 3",
    "section": "Generating line points",
    "text": "Generating line points\n\n\nShow the code\nsamples <- lines_center(lixels)\n\n\n\nPerforming NetKDE\nCompute the NetKDE.\n\n\nShow the code\ndensities <- nkde(network, \n                  events = childcare,\n                  w = rep(1,nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 5, #we aggregate events within a 5m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n# care about bw (bandwith) and kernel_name \n\n\nWhat can we learn from the code chunk above?\n\nkernel_name argument indicates that quartic kernel is used. Are possible kernel methods supported by spNetwork are: triangle, gaussian, scaled gaussian, tricube, cosine ,triweight, epanechnikov or uniform. method argument indicates that simple method is used to calculate the NKDE. Currently, spNetwork support three popular methods, they are:\n\nmethod=“simple”. This first method was presented by Xie et al. (2008) and proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an areal unit.\nmethod=“discontinuous”. The method is proposed by Okabe et al (2008), which equally “divides” the mass density of an event at intersections of lixels.\nmethod=“continuous”. If the discontinuous method is unbiased, it leads to a discontinuous kernel function which is a bit counter-intuitive. Okabe et al (2008) proposed another version of the kernel, that divide the mass of the density at intersection but adjusts the density before the intersection to make the function continuous.\n\n\nThe user guide of spNetwork package provide a comprehensive discussion of nkde(). You should read them at least once to have a basic understanding of the various parameters that can be used to calibrate the NetKDE model.\n\n\nCreate density\n\n\nShow the code\nsamples$density <- densities\nlixels$density <- densities\n\n\nSince the values are very small, rescale them:\n\n\nShow the code\n# rescaling to help the mapping\nsamples$density <- samples$density*1000\nlixels$density <- lixels$density*1000\n\n\nGenerate the map\n\n\nShow the code\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(childcare)+\n  tm_dots()\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\n\n\nNetwork Constrained G- and K-Function Analysis\nIn this section, we are going to perform complete spatial randomness (CSR) test by using kfunctions() of spNetwork package. The null hypothesis is defined as:\nHo: The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.\nThe CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.\nIf this hypothesis is rejected, we may infer that the distribution of childcare centres are spatially interacting and dependent on each other; as a result, they may form nonrandom patterns.\n\n\nShow the code\nkfun_childcare <- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, \n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)\n\n\nWhat can we learn from the code chunk above?\nThere are ten arguments used in the code chunk above they are:\n\nlines: A SpatialLinesDataFrame with the sampling points. The geometries must be a SpatialLinesDataFrame (may crash if some geometries are invalid).\npoints: A SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network. start: A double, the start value for evaluating the k and g functions.\nend: A double, the last value for evaluating the k and g functions.\nstep: A double, the jump between two evaluations of the k and g function.\nwidth: The width of each donut for the g-function.\nnsim: An integer indicating the number of Monte Carlo simulations required. In the above example, 50 simulation was performed. Note: most of the time, more simulations are required for inference\nresolution: When simulating random points on the network, selecting a resolution will reduce greatly the calculation time. When resolution is null the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points are selected vertices on the new network.\nconf_int: A double indicating the width confidence interval (default = 0.05).\n\nFor the usage of other arguments, you should refer to the user guide of spNetwork package.\nThe output of kfunctions() is a list with the following values:\n\nplotkA, a ggplot2 object representing the values of the k-function\nplotgA, a ggplot2 object representing the values of the g-function\nvaluesA, a DataFrame with the values used to build the plots\n\nFor example, we can visualise the ggplot2 object of k-function by using the code chunk below.\n\n\nShow the code\nkfun_childcare$plotk\n\n\n\n\n\nThe blue line is the empirical network K-function of the childcare centres in Punggol planning area. The gray envelop represents the results of the 50 simulations in the interval 2.5% - 97.5%. Because the blue line between the distance of 250m-400m are below the gray area, we can infer that the childcare centres in Punggol planning area resemble regular pattern at the distance of 250m-400m."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#extraction-of-the-coastal-outline-of-mainland-singapore",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#extraction-of-the-coastal-outline-of-mainland-singapore",
    "title": "Take Home Exercise 01: Part 1",
    "section": "Extraction of the Coastal Outline of Mainland Singapore",
    "text": "Extraction of the Coastal Outline of Mainland Singapore\nFor the purposes of this analysis, we will also need to extract the Coastal Outline of Singapore. This is to create a boundary for all the points to fall under.\nFirst, we need to read Singapore Master Plan Subzone 2014 to get Singapore’s shape overall.\n\n\nShow the code\nmpsz_sf <- st_read(dsn = \"../../data/data\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\data\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe have to check the CRS to ensure that it is in the correct coordinates system.\n\n\nShow the code\nst_crs(mpsz_sf)\n\n\nSince it is in the wrong CRS (WGS84), we have to correct it to SVY21.\n\n\nShow the code\nmpsz_sf <- st_transform(mpsz_sf, 3414)\n\n\nNow, we can plot the island.\n\n\nShow the code\nplot(mpsz_sf)\n\n\nWe notice that the planning subzone includes areas where Grab does not serve due to lack of bridges. Hence, any roads in unavailable areas would either not be useful or actually distort the network analysis.\nMost of the areas unserved by Grab are the outer islands. For this, we can identify which of the outer islands to exclude from our analysis.\n\n\nShow the code\nouter_islands<-  filter(mpsz_sf, grepl('ISLAND', PLN_AREA_N))\nplot(outer_islands[\"SUBZONE_N\"])\n\n\nHowever, we realise that not all the islands are unavailable to Grab drivers. Grab drivers are able to pick up and drop off at Sentosa.\nSince 2019, Grab drivers have been allowed entry to Jurong Island, provided they have a security pass. However, given that very few drivers are allowed entry and the fact that this region is generally inaccessible to the public, we will be excluding them.\nHence, the islands we need to exclude are:\n\nSemakau\nSouthern Group\nSudong\nNorth-eastern Islands\nJurong Island and Bukom\n\n\n\nShow the code\nserviced_area <- mpsz_sf %>%\n  filter(!grepl(\"SEMAKAU|SOUTHERN GROUP|SUDONG|NORTH-EASTERN ISLANDS|JURONG ISLAND AND BUKOM\", SUBZONE_N)) \nplot(serviced_area)\n\n\nNow, we can blend away the boundaries.\n\n\nShow the code\nsg_sf <- serviced_area %>%\n  st_union()\n\n\nPlot the sg_sf and we now see we have the CoastalOutline of Singapore that is served by Grab.\n\n\nShow the code\nplot(sg_sf)\n\n\nWe can save it as the CoastalOutline as a shapefile and read it again\n\n\nShow the code\n# writing the CoastalOutline\nst_write(sg_sf, 'data/CoastalOutline.shp')\n\n\n\n\nShow the code\n# reading the CoastalOutline\nsg_sf <- st_read(dsn='data/',\n                 layer = \"CoastalOutline\")\n\n\nReading layer `CoastalOutline' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_1\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21494.3 xmax: 55941.94 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#handling-of-the-grab-posisi-data",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#handling-of-the-grab-posisi-data",
    "title": "Take Home Exercise 01: Part 1",
    "section": "Handling of the Grab Posisi data",
    "text": "Handling of the Grab Posisi data\nWe will also have to handle the Grab Posisi data.\nThe data is quite large. As such, Grab has divided into 10 parquet files for easier distribution.\n\nReading the Grab Posisi Data\nI will now be loading the Grab Posisi data\n\n\nShow the code\ndf <- read_parquet(file=\"../../data/data/GrabPosisi/part-00000.snappy.parquet\")\ndf1 <- read_parquet(file=\"../../data/data/GrabPosisi/part-00001.snappy.parquet\")\ndf2 <- read_parquet(file=\"../../data/data/GrabPosisi/part-00002.snappy.parquet\")\ndf3 <- read_parquet(file=\"../../data/data/GrabPosisi/part-00003.snappy.parquet\")\ndf4 <- read_parquet(file=\"../../data/data/GrabPosisi/part-00004.snappy.parquet\")\ndf5 <- read_parquet(file=\"../../data/data/GrabPosisi/part-00005.snappy.parquet\")\ndf6 <- read_parquet(file=\"../../data/data/GrabPosisi/part-00006.snappy.parquet\")\ndf7 <- read_parquet(file=\"../../data/data/GrabPosisi/part-00007.snappy.parquet\")\ndf8 <- read_parquet(file=\"../../data/data/GrabPosisi/part-00008.snappy.parquet\")\ndf9 <- read_parquet(file=\"../../data/data/GrabPosisi/part-00009.snappy.parquet\")\n\n\n\n\nHandling the Grab Posisi data\n\nTime stamp\nUpon investigating the file, I noticed that there was supposed to be a datetime stamp but it wasn’t in that format. As such, the data type needs to be changed.\n\n\nShow the code\ndf$pingtimestamp <- as_datetime(df$pingtimestamp)\ndf1$pingtimestamp <- as_datetime(df1$pingtimestamp)\ndf2$pingtimestamp <- as_datetime(df2$pingtimestamp)\ndf3$pingtimestamp <- as_datetime(df3$pingtimestamp)\ndf4$pingtimestamp <- as_datetime(df4$pingtimestamp)\ndf5$pingtimestamp <- as_datetime(df5$pingtimestamp)\ndf6$pingtimestamp <- as_datetime(df6$pingtimestamp)\ndf7$pingtimestamp <- as_datetime(df7$pingtimestamp)\ndf8$pingtimestamp <- as_datetime(df8$pingtimestamp)\ndf9$pingtimestamp <- as_datetime(df9$pingtimestamp)\n\n\n\n\nMerging them into 1 data frame\nI also noticed that the the same ride might actually have origin and destination points through multiple data frames. As such, we need to merge them before we can extract the origin points.\n\n\nShow the code\norigin_df_all <- df %>%\n  rbind(df1) %>%\n  rbind(df2) %>%\n  rbind(df3) %>%\n  rbind(df4) %>%\n  rbind(df5) %>%\n  rbind(df6) %>%\n  rbind(df7) %>%\n  rbind(df8) %>%\n  rbind(df9)\n\n\n\n\nExtraction of Origin\nNow, I will be extracting the origin.\nThe way I did it below is by performing the following steps\n\narrange it according to the trj_id (unique id determining where the person wants to at that point)\narranging it according to the time stamp (beginning and end)\ngetting the first row - mutating the data to weekday, start hour and the day\n\n\n\nShow the code\norigin_df <- origin_df_all %>%\n  group_by(trj_id) %>%\n  arrange(pingtimestamp) %>%\n  filter(row_number()==1) %>%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         start_hr= factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\n\nWriting of Origin Data to RDS\nNow, I will write the origin data to rds for easier future handling.\n\n\nShow the code\nwrite_rds(origin_df, \"data/rds/origin_dfs.rds\")\n\n\n\n\nReading of RDS data\nNow, we can clear the data in our environment and just read the rds data we saved.\n\n\nShow the code\norigin_df <- read_rds(\"data/rds/origin_dfs.rds\")"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#analysis-of-origins",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#analysis-of-origins",
    "title": "Take Home Exercise 01",
    "section": "Analysis of Origins",
    "text": "Analysis of Origins\n\nVisualising the Frequency Distribution\n\n\nShow the code\nggplot(data=origin_df,\n       aes(x=weekday)) +\n  geom_bar()\n\n\n\n\n\nAs can be seen, the number of trips daily seem to be fairly equally distributed throughout the week.\n\n\nVisualising the Origins as a Point Map Symbol\nWe can visualise the geospatial distribution of the origin points.\n\n\nShow the code\norigins_sf <- st_as_sf(origin_df, coords = c(\"rawlng\", \"rawlat\"),\n                       crs=4326) %>%\n  st_transform(crs=3414)\n\n\nNow, we can visualise it using the code chunk below:\n\n\nShow the code\ntm_shape(mpsz_sf)+\n  tm_polygons()+\ntm_shape(origins_sf) +\n  tm_dots()\n\n\n\n\nConvert sf data frames to sp’s Spatial class\nWe can convert these data to sp’s Spatial* class and then convert into a generic sp format.\n\n\nShow the code\nsg <- as_Spatial(sg_sf)\nmpsz <- as_Spatial(mpsz_sf)\norigins <- as_Spatial(origins_sf) \n\n\nAnd into SpatialPolygon format\n\n\nShow the code\nsg_sp <- as(sg, \"SpatialPolygons\")\norigins_sp <- as(origins, \"SpatialPoints\")\n\n\nWe then convert it to ppp format.\n\n\nShow the code\norigins_ppp <- as(origins_sp, \"ppp\")\norigins_ppp\n\n\nPlanar point pattern: 28000 points\nwindow: rectangle = [3628.24, 49845.23] x [25198.14, 49689.64] units\n\n\nNow, I will plot origins_ppp.\n\n\nShow the code\nplot(origins_ppp)\n\n\nWe must check for duplicates in the data using the code chunk below:\n\n\nShow the code\nany(duplicated(origins_ppp))\n\n\n[1] FALSE\n\n\nAs there are no duplicates within the data, we do not have to apply any more transformation to the data.\n\n\nCreate owin data\nNow, we can convert the Coastal Outline to owin data and plot it out.\n\n\nShow the code\nsg_owin <- as(sg_sp, \"owin\")\nplot(sg_owin)\n\n\n\n\n\n\n\nCombining events\nWe will now extract Grab origins within the Singapore CoastalOutline\n\n\nShow the code\norigins_SG_ppp = origins_ppp[sg_owin]\n\n\n\n\nShow the code\nplot(origins_SG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, I have learned how to compute spatial weights using R, which entail the following:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package.\n\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer: This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\nFirstly, I will ensure that spdep, sf, tmap and tidyverse are installed in R and load it into my environment.\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\n\n\nNow, I will be loading the data into my R environment.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple feature Object of sf.\n\n\nShow the code\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nWe will be using the read_csv() function of the readr package. The output will be an R data.frame class\n\n\nShow the code\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\nThe code chunk below will be used to join the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nShow the code\n#combines both the hunan and hunan2012 data.frames together\n#subsequently selects certain (2-5, 8 and 16th) columns only\nhunan <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)\n\n\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nShow the code\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThis section will deal with the usage of poly2nb()of the spdep package. It is used to compute contiguity weight matrices for a given study area. It does this by building a neighbours list based on regions with contiguous boundaries.\nThe documentation shows a “queen” argument, which takes in a boolean value (TRUE or FALSE) and has been set to TRUE as default.\n\n\nThe code chunk below is used to compute the Queen contiguity weight matrix .\n\n\nShow the code\n#this code will compute the Queen contiguity weight matrix\nwm_q <- poly2nb(hunan, queen=TRUE)\n#this one provides the summary report of the Queen contiguity weight matrix\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows the following\n\nThere are 88 area regions in Hunan\nThe most connected area unit has 11 neighbours\nThere are two area units with only one link\n\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\n\nShow the code\nwm_q[[1]]\n\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbours. The numbers afterwards show the area region numbers of the neighbours.\nWe can retrieve the county name of area region (Anxiang) using the following code chunk:\n\n\nShow the code\nhunan$County[1]\n\n\n[1] \"Anxiang\"\n\n\nTo reveal the names of its neighbours, type the following:\n\n\nShow the code\nhunan$NAME_3[c(2,3,4,57,85)]\n\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these counties using the following:\n\n\nShow the code\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\n\nShow the code\nstr(wm_q)\n\n\n\n\n\n\n\n\nWarning: This might span a few pages. Don’t print this one out\n\n\n\n\n\n\n\n\n\nThe code chunk below is used to compute the Rook contiguity weight matrix.\n\n\nShow the code\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows the same results as the above summary report except that the maximum number of links is 10, instead of 11.\n\n\n\nA connectivity graph displays a line connecting points to each neighbouring point. However, we are working with polygon data, not point data. The most common way to resolve this is by using polygon centroids. We will calculate them using the sf package before creating the graphs.\n\n\nWe will need to generate points corresponding to each polygon before we can make our connectivity graph. However, running st_centroid() won’t work in this specific context; we need the coordinates in separate dataframes for this to work. To do this, we need to use a mapping function. This will allow us to apply a given function to to each element of a vector and return a vector of the same length. Our input geometry will be the geometry column of hunan. We will be using the map_dbl() mapping function from the purrr package.\nTo get the longitude and latitude of each centroid, map the st_centroid() function over each row in hunan and access the different coordinates using double bracket notation and the appropriate number. After getting the aforementioned values, we can merge the data.frames together\n\n\nShow the code\n# get the longitude (value = 1)\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n#get the latitude (value = 2)\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n#merge the two data.frames\ncoords <- cbind(longitude, latitude)\n\n#check the the first few values to ensure that they are correctly formatted\nhead(coords)\n\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\n\n\n\n\nShow the code\n#plotting the Queen contiguity based neighbour map\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\nShow the code\n#plotting the Rook contiguity based neighbour map\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nShow the code\n#Map BOTH the Queen and Rook based Contiguity based maps\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\nI will be computing the distance-based neighbours using the dnearneigh()of the spdep package.\nThe dnearneigh() function identifies neighbours of region points by Euclidean distance with a distance band of lower d1= and upper d2= bounds, using the bounds= argument. If unpojected coordinates are used and either specified in the coordinates object x or with object x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated using WGS84 reference ellipsoid.\n\n\nFirst, we need to determine the upper limit for the distance band\n\nUse the knearneigh() function of spdep to return a matrix with the indices of the points belowing to the set of the k nearest neighbours\nConvert the knn object returned by the previous function into a neighbour’s list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb()\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns the units of the coordinates if the coordinates are projected, in km otherwise\nRemove the list structure of the returned object by using unlist()\n\n\n\nShow the code\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\n#generate the summary report\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79km, which can be used as the upper bound to provide certainty that all units have at least 1 neighbour.\n\n\n\nNow, we will compute the disstance weight matrix by using dnearneigh() as shown below:\n\n\nShow the code\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, we can use str() to display the content of wm_d62 weight matrix.\n\n\nShow the code\nstr(wm_d62)\n\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nShow the code\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n\n[1] 1\n\n\n\n\nShow the code\ntable(n_comp$comp.id)\n\n\n\n 1 \n88 \n\n\n\n\nNext, we will plot the distance weight matrix:\n\n\nShow the code\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\nThe red lines show the 1st nearest neighbours and the black lines shows the links of the neighbours within a cut-off distance of 62km.\nAlternatively, we can plot these two side by side:\n\n\nShow the code\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\nOne of the characteristics of fixed weight distance weight matrix is that denser areas have more neighbours while less dense areas have fewer neighbours. Having many neighbours smoothens the neighbour relationships across more neighbours.\nIt is possible to control this directly using k-nearest neighbours, either accepting assymetric neighbours or imposing symemetry as shown in the code chunk below:\n\n\nShow the code\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nDisplay the content:\n\n\nShow the code\nstr(knn6)\n\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNow, each county has exactly 6 neighbours.\n\n\n\n\nIn this section, I will be deriving a spatial weight matrix based on Inversed Distance method.\nFirst, I will compute the distances between the areas using the nbdists() of spdep.\n\n\nShow the code\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nNext, we need to assign weights to each neighbouring polygon. In our case, each neighbouring polygon will be assigned equal weight (style=“W”). This will be done by assigning the inverse of the number of neighbours (i.e. 1/(# of neighbours). While this is intuitive, it has the major drawback that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n\nShow the code\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\n\nShow the code\nrswm_q$weights[10]\n\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\n\nShow the code\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\n\nShow the code\nrswm_ids$weights[1]\n\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\n\nShow the code\nsummary(unlist(rswm_ids$weights))\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\n\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\n\nShow the code\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nWe will retrieve the GDPPC of the 5 counties by using the code chunk below:\n\n\nShow the code\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\n\nShow the code\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\n\nShow the code\nhead(hunan)\n\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\n\nShow the code\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\n\nShow the code\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\n\nShow the code\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nFirst, let us examine the result by using the code chunk below.\n\n\nShow the code\nlag_sum\n\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\n\nShow the code\nhunan <- left_join(hunan, lag.res)\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\n\nShow the code\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\n\nShow the code\nwm_qs <- include.self(wm_q)\n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\n\nShow the code\nwm_qs[[1]]\n\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw().\n\n\nShow the code\nwm_qs <- nb2listw(wm_qs)\nwm_qs\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\n\nShow the code\nlag_w_avg_gpdpc <- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\nShow the code\nlag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res <- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nShow the code\nhunan <- left_join(hunan, lag_wm_qs.res)\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\n\nShow the code\nhunan %>%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\n\nShow the code\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\n\nShow the code\nwm_qs <- include.self(wm_q)\nwm_qs\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\n\nShow the code\nb_weights <- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\n\nShow the code\nb_weights2 <- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\n\nShow the code\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\nShow the code\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nShow the code\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\n\nShow the code\nhunan %>%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\n\nShow the code\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#data-handling",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#data-handling",
    "title": "Take Home Exercise 01",
    "section": "Data Handling",
    "text": "Data Handling\n\nHandling of Road Data\nNow, we can read the road data as provided by openstreetmap. Note that it provides data for Malaysia, Singapore and Brunei all at once.\n\n\nShow the code\nall_roads <- st_read(dsn='../../data/data/data',\n                     layer = 'gis_osm_roads_free_1')\n\n\nWe realise that it is in WGS 84, not in SVY21 so we have to transform the data.\n\n\nShow the code\nall_roads <- st_transform(all_roads, 3414)\n\n\nWe can check the CRS again for all_roads.\n\n\nShow the code\nst_crs(all_roads)\n\n\nSince we’re only interested in the roads in mainland Singapore, we have to filter the roads.\n\n\nShow the code\n# get all roads in mainland Singapore\nSG_roads <- st_intersection(all_roads, sg_sf)\n\n# write out the roads into a separate .shp file for easier future handling\nst_write(SG_roads, 'data/SG_roads.shp')\n\n\nWe can now read it from here.\n\n\nShow the code\nSG_roads <- st_read(dsn='data', layer= 'SG_roads')\n\n\nReading layer `SG_roads' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_1\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 227969 features and 10 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 2679.373 ymin: 23099.51 xmax: 50957.8 ymax: 50220.06\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\nGetting the Roads within the Subzones\nNow, we can find the streets that exist only inside the subzones.\n\n\nShow the code\n# get roads only in the aforementioned subzones\nCA_roads <- st_intersection(SG_roads, CA)\nWL_roads <- st_intersection(SG_roads, WL)\nJE_roads <- st_intersection(SG_roads, JE)\nMP_roads <- st_intersection(SG_roads, MP)\n\n\n\n\nShow the code\nCA_roads\n\n\nSimple feature collection with 4007 features and 25 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 42577.65 ymin: 32548.05 xmax: 50286.8 ymax: 41649.2\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n       osm_id code      fclass                  name  ref oneway maxspeed layer\n356  22617051 5113     primary         Loyang Avenue <NA>      F       70     0\n360  22617159 5113     primary         Loyang Avenue <NA>      F       70     0\n1348 22981700 5113     primary       Telok Paku Road <NA>      F       50     0\n3201 34403286 5114   secondary            Loyang Way <NA>      F       50     0\n3207 34403387 5122 residential Changi North Street 1 <NA>      B        0     0\n3208 34403405 5122 residential Changi North Crescent <NA>      B       50     0\n3209 34403417 5122 residential     Changi North Rise <NA>      B        0     0\n4001 42063713 5141     service                  <NA> <NA>      F        0     0\n4002 42063715 5141     service                  <NA> <NA>      B        0     0\n4003 42063716 5141     service                  <NA> <NA>      B        0     0\n     bridge tunnel OBJECTID SUBZONE_NO   SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N\n356       F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n360       F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n1348      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n3201      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n3207      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n3208      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n3209      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n4001      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n4002      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n4003      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n     PLN_AREA_C    REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n356          CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n360          CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n1348         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n3201         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n3207         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n3208         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n3209         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n4001         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n4002         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n4003         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n       Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n356  38928.66   14918.11    4848517 LINESTRING (44617.88 41088....\n360  38928.66   14918.11    4848517 LINESTRING (43851.2 39632.9...\n1348 38928.66   14918.11    4848517 LINESTRING (45352.67 41113....\n3201 38928.66   14918.11    4848517 LINESTRING (43761.28 39560....\n3207 38928.66   14918.11    4848517 LINESTRING (43152.23 36906....\n3208 38928.66   14918.11    4848517 LINESTRING (42843.89 36842....\n3209 38928.66   14918.11    4848517 LINESTRING (43130.89 36812....\n4001 38928.66   14918.11    4848517 LINESTRING (43433.23 37663....\n4002 38928.66   14918.11    4848517 LINESTRING (43436.11 37657....\n4003 38928.66   14918.11    4848517 LINESTRING (43511.5 37906.7...\n\n\nShow the code\nWL_roads\n\n\nSimple feature collection with 7165 features and 25 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 20613.4 ymin: 44814.83 xmax: 25593.19 ymax: 49200.77\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n       osm_id code        fclass                name  ref oneway maxspeed layer\n796  22773625 5115      tertiary  Woodlands Avenue 6 <NA>      F       40     0\n819  22774351 5131 motorway_link                <NA> <NA>      F       50     0\n825  22774532 5122   residential  Woodlands Drive 14 <NA>      F       40     0\n826  22774537 5122   residential  Woodlands Drive 53 <NA>      B       50     0\n827  22774541 5122   residential  Woodlands Drive 43 <NA>      F       40     0\n832  22775173 5115      tertiary  Woodlands Avenue 5 <NA>      F       60     0\n834  22775385 5113       primary Woodlands Avenue 12 <NA>      F       70     0\n835  22775386 5114     secondary  Woodlands Avenue 1 <NA>      F       50     0\n836  22775389 5114     secondary  Woodlands Avenue 1 <NA>      F       50     0\n3703 37584630 5111      motorway  Seletar Expressway  SLE      F       90     1\n     bridge tunnel OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND\n796       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n819       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n825       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n826       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n827       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n832       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n834       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n835       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n836       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n3703      T      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n     PLN_AREA_N PLN_AREA_C     REGION_N REGION_C          INC_CRC FMEL_UPD_D\n796   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n819   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n825   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n826   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n827   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n832   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n834   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n835   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n836   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n3703  WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n       X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n796  23609.57 45692.88   5211.384    1576001 LINESTRING (24007.3 45538.1...\n819  23609.57 45692.88   5211.384    1576001 LINESTRING (22821.47 45515....\n825  23609.57 45692.88   5211.384    1576001 LINESTRING (23444.28 46022....\n826  23609.57 45692.88   5211.384    1576001 LINESTRING (23990.45 46088....\n827  23609.57 45692.88   5211.384    1576001 LINESTRING (23447.47 46014....\n832  23609.57 45692.88   5211.384    1576001 LINESTRING (24645.58 46021....\n834  23609.57 45692.88   5211.384    1576001 LINESTRING (23836.85 45038....\n835  23609.57 45692.88   5211.384    1576001 LINESTRING (23124.88 45989....\n836  23609.57 45692.88   5211.384    1576001 LINESTRING (24156.4 45407.0...\n3703 23609.57 45692.88   5211.384    1576001 LINESTRING (23684.88 44959....\n\n\nShow the code\nJE_roads\n\n\nSimple feature collection with 7131 features and 25 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 14254.68 ymin: 30994.22 xmax: 19398.25 ymax: 37289.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n       osm_id code       fclass                     name  ref oneway maxspeed\n1084 22903885 5114    secondary             Penjuru Road <NA>      F       60\n1085 22903886 5121 unclassified             Penjuru Road <NA>      F       60\n1443 23101520 5112        trunk              Jalan Buroh <NA>      F       70\n3791 39959160 5112        trunk              Jalan Buroh <NA>      F       70\n3792 39959161 5112        trunk              Jalan Buroh <NA>      F       70\n5003 70583774 5115     tertiary              Pandan Road <NA>      B       50\n5004 70583780 5121 unclassified             Penjuru Lane <NA>      B       50\n5005 70583783 5114    secondary          Tanjong Penjuru <NA>      B       50\n5006 70583786 5114    secondary          Tanjong Penjuru <NA>      F       50\n5007 70583790 5121 unclassified Tanjong Penjuru Crescent <NA>      B       50\n     layer bridge tunnel OBJECTID SUBZONE_NO        SUBZONE_N SUBZONE_C CA_IND\n1084     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n1085     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n1443     1      T      F       80         10 PENJURU CRESCENT    JESZ10      N\n3791     1      T      F       80         10 PENJURU CRESCENT    JESZ10      N\n3792     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5003     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5004     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5005     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5006     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5007     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n      PLN_AREA_N PLN_AREA_C    REGION_N REGION_C          INC_CRC FMEL_UPD_D\n1084 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n1085 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n1443 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n3791 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n3792 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5003 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5004 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5005 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5006 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5007 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n       X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1084 17651.31 31799.61   9876.049    3049720 LINESTRING (16991.44 32621....\n1085 17651.31 31799.61   9876.049    3049720 LINESTRING (16738.48 31589....\n1443 17651.31 31799.61   9876.049    3049720 LINESTRING (16290.72 32753....\n3791 17651.31 31799.61   9876.049    3049720 LINESTRING (19056.98 32186....\n3792 17651.31 31799.61   9876.049    3049720 LINESTRING (18978.73 32113....\n5003 17651.31 31799.61   9876.049    3049720 LINESTRING (18411.82 31559....\n5004 17651.31 31799.61   9876.049    3049720 LINESTRING (17208.01 32320....\n5005 17651.31 31799.61   9876.049    3049720 LINESTRING (16869.64 32131....\n5006 17651.31 31799.61   9876.049    3049720 LINESTRING (17506.95 32049....\n5007 17651.31 31799.61   9876.049    3049720 LINESTRING (17697.91 31764....\n\n\nShow the code\nMP_roads\n\n\nSimple feature collection with 2864 features and 25 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 32697.12 ymin: 29763 xmax: 37589.95 ymax: 32843.37\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n       osm_id code       fclass                         name  ref oneway\n922  22810641 5114    secondary    Tanjong Katong Road South <NA>      F\n1202 22930502 5113      primary            Marina East Drive <NA>      F\n3760 39477475 5111     motorway           East Coast Parkway  ECP      F\n3761 39477476 5111     motorway           East Coast Parkway  ECP      F\n4078 44122367 5152     cycleway               Park Connector <NA>      B\n4097 44133236 5153      footway      Underpass to Meyer Road <NA>      B\n4140 44488255 5153      footway                  Katong Park <NA>      B\n4141 44488257 5121 unclassified East Coast Park Service Road <NA>      B\n4142 44488265 5114    secondary    Tanjong Katong Road South <NA>      F\n5509 74729034 5111     motorway           East Coast Parkway  ECP      F\n     maxspeed layer bridge tunnel OBJECTID SUBZONE_NO        SUBZONE_N\n922        50     0      F      F       44          5 MARINA EAST (MP)\n1202       60     0      F      F       44          5 MARINA EAST (MP)\n3760       90     1      T      F       44          5 MARINA EAST (MP)\n3761       80     0      F      F       44          5 MARINA EAST (MP)\n4078        0     0      F      F       44          5 MARINA EAST (MP)\n4097        0    -1      F      T       44          5 MARINA EAST (MP)\n4140        0    -1      F      T       44          5 MARINA EAST (MP)\n4141       50     0      F      F       44          5 MARINA EAST (MP)\n4142       50     1      T      F       44          5 MARINA EAST (MP)\n5509       90     0      F      F       44          5 MARINA EAST (MP)\n     SUBZONE_C CA_IND    PLN_AREA_N PLN_AREA_C       REGION_N REGION_C\n922     MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n1202    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n3760    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n3761    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4078    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4097    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4140    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4141    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4142    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n5509    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n              INC_CRC FMEL_UPD_D  X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area\n922  1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n1202 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n3760 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n3761 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4078 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4097 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4140 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4141 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4142 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n5509 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n                           geometry\n922  LINESTRING (35230.6 31057.3...\n1202 LINESTRING (33760.43 30638....\n3760 LINESTRING (33860.36 30899....\n3761 LINESTRING (33706.71 30894....\n4078 LINESTRING (34789.2 30864.6...\n4097 LINESTRING (34772.07 30914....\n4140 LINESTRING (34005.49 30906....\n4141 LINESTRING (35255.73 30985,...\n4142 LINESTRING (35227.24 31091....\n5509 LINESTRING (34854.12 30932....\n\n\nWe notice that all of the above are geometry type geometry and not a linestring. We can convert them with the following code chunk:\n\n\nShow the code\nCA_roads <- CA_roads %>%\n  st_cast(\"LINESTRING\")\n\nWL_roads <- WL_roads %>%\n  st_cast(\"LINESTRING\")\n\nJE_roads <- JE_roads %>%\n  st_cast(\"LINESTRING\")\n\nMP_roads <- MP_roads %>%\n  st_cast(\"LINESTRING\")\n\n\n\n\nExtraction of the Events Within the Subzones\nBefore we can conduct analysis on the network, we will also need to constrict the events to exclusively the ones that occurred within these two subzones.\n\n\nShow the code\n#extraction of origin events that occurred within Changi and Marine Parade\nCA_origins <- st_intersection(origins_sf, CA)\nWL_origins <- st_intersection(origins_sf, WL)\nJE_origins <- st_intersection(origins_sf, JE)\nMP_origins <- st_intersection(origins_sf, MP)\n\n\nWe can now plot this data. In this instance, we can use Changi as an example:\n\n\nShow the code\ntmap_mode('view')\ntm_shape(CA_origins)+\n  tm_dots() +\n  tm_shape(CA_roads) +\n  tm_lines()\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#network-constrained-kde-netkde-analysis",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#network-constrained-kde-netkde-analysis",
    "title": "Take Home Exercise 01",
    "section": "Network Constrained KDE (NetKDE) Analysis",
    "text": "Network Constrained KDE (NetKDE) Analysis\n\nPreparing the lixel objects\nBefore computing NetKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with lixelize_lines() of spNetwork as shown in the code chunk below.\n\n\nShow the code\nCA_lixels <- lixelize_lines(CA_roads, \n                         750, \n                         mindist = 375)\nWL_lixels <- lixelize_lines(WL_roads, \n                         750, \n                         mindist = 375)\nJE_lixels <- lixelize_lines(JE_roads, \n                         750, \n                         mindist = 375)\nMP_lixels <- lixelize_lines(MP_roads, \n                         750, \n                         mindist = 375)\n\n\n\n\nGenerating Line Points\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.\n\n\nShow the code\nCA_samples <- lines_center(CA_lixels)\nWL_samples <- lines_center(WL_lixels)\nJE_samples <- lines_center(JE_lixels)\nMP_samples <- lines_center(MP_lixels)\n\n\n\n\nPerforming NetKDE\nWe can now compute the NetKDE using the code chunk below:\n\n\nShow the code\n# for the purposes of this analysis, the bandwidth will be set to 8.080901, which is the diggle bandwidth for Singapore overall\nCA_densities <- nkde(CA_roads, \n                  events = CA_origins,\n                  w = rep(1,nrow(CA_origins)),\n                  samples = CA_samples,\n                  kernel_name = \"quartic\",\n                  bw = 8.080901, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 10, #we aggregate events within a 10m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n# care about bw (bandwith) and kernel_name \n\nJE_densities <- nkde(JE_roads, \n                  events = JE_origins,\n                  w = rep(1,nrow(JE_origins)),\n                  samples = JE_samples,\n                  kernel_name = \"quartic\",\n                  bw = 8.080901, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 10, #we aggregate events within a 10m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n # care about bw (bandwith) and kernel_name \n\nWL_densities <- nkde(WL_roads, \n                  events = WL_origins,\n                  w = rep(1,nrow(WL_origins)),\n                  samples = WL_samples,\n                  kernel_name = \"quartic\",\n                  bw = 8.080901, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 10, #we aggregate events within a 10m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n# care about bw (bandwith) and kernel_name \n\nMP_densities <- nkde(MP_roads, \n                  events = MP_origins,\n                  w = rep(1,nrow(MP_origins)),\n                  samples = MP_samples,\n                  kernel_name = \"quartic\",\n                  bw = 8.080901, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 10, #we aggregate events within a 10m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n# care about bw (bandwith) and kernel_name \n\n\n\n\nVisualising NetKDE\nBefore we can visualise the NetKDE values, code chunk below will be used to insert the computed density values (i.e. densities) into samples and lixels objects as density field.\n\n\nShow the code\nCA_samples$density <- CA_densities\nCA_lixels$density <- CA_densities\n\nJE_samples$density <- JE_densities\nJE_lixels$density <- JE_densities\n\nMP_samples$density <- MP_densities\nMP_lixels$density <- MP_densities\n\nWL_samples$density <- WL_densities\nWL_lixels$density <- WL_densities\n\n\nWe can also rescale to make the values more understandable. Since the values are in kilometres, multiplying the values by 1000 will convert them to metres.\nWe can use the code chunk below to visualise the network kernel density estimation:\n\nVisualising NetKDE for Changi\n\n\nShow the code\ntmap_mode('view')\ntm_shape(CA_lixels)+\n  tm_lines(col=\"density\")\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\n\n\nVisualising NetKDE for Jurong East\n\n\nShow the code\ntmap_mode('view')\ntm_shape(JE_lixels)+\n  tm_lines(col=\"density\")\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\n\n\nVisualising NetKDE for Marine Parade\n\n\nShow the code\ntmap_mode('view')\ntm_shape(MP_lixels)+\n  tm_lines(col=\"density\")\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\n\n\nVisualising NetKDE for Woodlands\n\n\nShow the code\ntmap_mode('view')\ntm_shape(WL_lixels)+\n  tm_lines(col=\"density\")\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#traditional-kernel-analysis",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#traditional-kernel-analysis",
    "title": "Take Home Exercise 01",
    "section": "Traditional Kernel Analysis",
    "text": "Traditional Kernel Analysis\nNow we can begin the traditional kernel analysis\n\nCountry level analysis\nWe can begin by trying to find all of the best kernel and bandwidths for the purposes of our analysis. To do this, we need to find the one with the tightest clusters.\nIn R, we have 4 possible kernel density bandwidths: diggle, ppl, scott and CvL. All of them will be test below:\n\n\nShow the code\nkde_origins_SG.bw <- density(origins_SG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_origins_SG.ppl <- density(origins_SG_ppp, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\nkde_origins_SG.CvL <- density(origins_SG_ppp, \n                               sigma=bw.CvL, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\nkde_origins_SG.scott <- density(origins_SG_ppp, \n                               sigma=bw.scott, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\n\n\nWe may also plot them out:\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(kde_origins_SG.bw)\nplot(kde_origins_SG.ppl)\nplot(kde_origins_SG.CvL)\nplot(kde_origins_SG.scott)\n\n\nNow, we can check for the tightness of these clusters:\n\n\nShow the code\n# tightness of diggle\nbw.diggle(origins_SG_ppp)\n\n# tightness of ppl\nbw.ppl(origins_SG_ppp)\n\n# tightness of CvL\nbw.CvL(origins_SG_ppp)\n\n# tightness of scott\nbw.scott(origins_SG_ppp)\n\n\nWe can observe that the smallest sigma value is from diggle, suggesting that it has the tightest clusters of all the bandwidth. Hence, we will continue using diggle for this analysis.\nWe can also test for different kernels:\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(density(origins_SG_ppp, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(origins_SG_ppp, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(origins_SG_ppp, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(origins_SG_ppp, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\n\n\n\n\nAs they are identical, there is no need to choose a specific one.\n\n\nRegions of Interest\nWe can tighten our analysis to include only areas of interest. From the figures above, we observe higher densities in the planning areas Changi, Jurong East, Woodlands and Marine Parade, we can filter out mpsz to get them.\n\n\nShow the code\n# extraction of Changi Airport\nCA = mpsz_sf[mpsz_sf$PLN_AREA_N==\"CHANGI\",]\n\n# extraction of Jurong East\nJE = mpsz_sf[mpsz_sf$PLN_AREA_N==\"JURONG EAST\",]\n\n# extraction of Woodlands\nWL = mpsz_sf[mpsz_sf$PLN_AREA_N==\"WOODLANDS\",]\n\n# extraction of Marine Parade\nMP = mpsz_sf[mpsz_sf$PLN_AREA_N=='MARINE PARADE',]\n\n\nWith this, we now have to perform the same functions we did in Create Owin Data.\n\n\nShow the code\n# turn them into spatial\nCA_spatial <- as_Spatial(CA)\nJE_spatial <- as_Spatial(JE)\nWL_spatial <- as_Spatial(WL)\nMP_spatial <- as_Spatial(MP)\n\n# turn them into SpatialPolygons\nCA_sp <- as(CA_spatial, \"SpatialPolygons\")\nJE_sp <- as(JE_spatial, \"SpatialPolygons\")\nWL_sp <- as(WL_spatial, \"SpatialPolygons\")\nMP_sp <- as(MP_spatial, \"SpatialPolygons\")\n\n# convert to owin\n\nCA_owin = as(CA_sp, \"owin\")\nJE_owin = as(JE_sp, \"owin\")\nWL_owin = as(WL_sp, \"owin\")\nMP_owin = as(MP_sp, \"owin\")\n\n\nFrom here, we can extract the events that occurred in these planning areas.\n\n\nShow the code\norigins_CA_ppp = origins_SG_ppp[CA_owin]\norigins_JE_ppp = origins_SG_ppp[JE_owin]\norigins_WL_ppp = origins_SG_ppp[WL_owin]\norigins_MP_ppp = origins_SG_ppp[MP_owin]\n\n\nWe can now perform the same analysis that we did above:\n\n\nShow the code\nkde_origins_CA <- density(origins_CA_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_origins_JE <- density(origins_JE_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_origins_WL <- density(origins_WL_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_origins_MP <- density(origins_MP_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nWe can also plot them out:\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(kde_origins_CA,\n     main=\"Changi\")\nplot(kde_origins_WL,\n     main=\"Woodlands\")\nplot(kde_origins_JE,\n     main=\"Jurong East\")\nplot(kde_origins_MP,\n     main=\"Marine Parade\")"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#clark-and-evans-test",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#clark-and-evans-test",
    "title": "Take Home Exercise 01",
    "section": "Clark and Evans test",
    "text": "Clark and Evans test\nThe Clark and Evans test allows us to understand if the data points are clustered in any places or not.\n\nCountry Level Analysis\nIn the below code chunk, we are conducting this test on the origin points in the whole of Singapore. The hypothesis are as follows\nH0: The Grab origin points are distributed equally throughout the country\nH1: The Grab origin points have clusters.\n\n\nShow the code\nclarkevans.test(origins_SG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_SG_ppp\nR = 0.28039, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n\nFrom this, we can see that there is clustering (R=0.28039) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters.\n\n\nRegions of Interest\n\nChangi\n\n\nShow the code\nclarkevans.test(origins_CA_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_CA_ppp\nR = 0.13547, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\nFrom this, we can see that there is clustering (R= 0.31778) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters.\n\n\nWoodlands\n\n\nShow the code\nclarkevans.test(origins_WL_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_WL_ppp\nR = 0.31778, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\nFrom this, we can see that there is clustering (R= 0.25797) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters.\n\n\nJurong East\n\n\nShow the code\nclarkevans.test(origins_JE_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_JE_ppp\nR = 0.25797, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\nFrom this, we can see that there is clustering (R= 0.25797) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters.\n\n\nMarine Parade\n\n\nShow the code\nclarkevans.test(origins_MP_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_MP_ppp\nR = 0.51201, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\nFrom this, we can see that there is clustering (R= 0.51201) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, I have learned how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package. I have learned how to conduct the following:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\nprovide statistically correct interpretation of GSA statistics.\n\n\n\n\n\n\nOne of the goals of local and government planners is to ensure equal development on a geographic scale. As such, it is important to find out whether or not development is equally distributed, whether there is spatial clustering and finally, where are the clusters located?\nThis hands-on exercise will handle GDP data for the Hunan Province in the Republic of China.\n\n\n\nTwo data sets will be used for this exercise:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is used for importing and handling geospatial data in R,\ntidyverse is mainly used for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\n\n\n\n\n\n\nShow the code\n# use st_read() from sf package to import Hunan shapefile into R\n# the output is a simple features object of sf\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\nShow the code\n## Import csv into r environment using read_Csv() of sf\n## Output is an R data.frame class\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\n\n\nShow the code\n# update hunan's SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe\n# This is performed using left_join() of dplyr package\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nShow the code\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\n\nIn this section, I will compute global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.\n\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\n\nShow the code\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n\nShow the code\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\nIn this section, I will be performing Moran’s I statistics testing by using moran.test() of spdep.\n\n\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\n\nShow the code\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulations will be performed.\n\n\nShow the code\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\n\nShow the code\nmean(bperm$res[1:999])\n\n\n[1] -0.01504572\n\n\n\n\nShow the code\nvar(bperm$res[1:999])\n\n\n[1] 0.004371574\n\n\n\n\nShow the code\nsummary(bperm$res[1:999])\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\n\nShow the code\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n(TBC)\n\n\n\n\n\nIn this section, you will learn how to perform Geary’s C statistics testing by using appropriate functions of spdep package.\n\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\n\nShow the code\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\n\nShow the code\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\n\nShow the code\nmean(bperm$res[1:999])\n\n\n[1] 1.004402\n\n\n\n\nShow the code\nvar(bperm$res[1:999])\n\n\n[1] 0.007436493\n\n\n\n\nShow the code\nsummary(bperm$res[1:999])\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\n\nShow the code\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\n\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\n\nShow the code\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\n\nShow the code\nprint(MI_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\n\nShow the code\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\n\nShow the code\nprint(GC_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 6",
    "section": "**Cluster and Outlier Analysis",
    "text": "**Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, I will be applying appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\nComputing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\n\nShow the code\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\n\nShow the code\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\n\nShow the code\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nMapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\n\nShow the code\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\n\nShow the code\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\n\nShow the code\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 6",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\n\nShow the code\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\n\nShow the code\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that maps neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\n\nShow the code\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\n\nShow the code\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nNext, derive the spatially lagged variable of interest (i.e. GDPPC) and center the spatially lagged variable around its mean.\n\n\nShow the code\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\n\nThis is followed by centering the local Moran’s around the mean.\n\n\nShow the code\nLM_I <- localMI[,1] - mean(localMI[,1])    \n\n\nNext, we will set a statistical significance level for the local Moran.\n\n\nShow the code\nsignif <- 0.05       \n\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\n\nShow the code\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4      \n\n\nLastly, places non-significant Moran in the category 0.\n\n\nShow the code\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n\nShow the code\n# combined\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \nquadrant[localMI[,5]>signif] <- 0\n\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\n\nShow the code\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\n\nShow the code\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 6",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\nGetis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nShow the code\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\n\nShow the code\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\nShow the code\ncoords <- cbind(longitude, latitude)\n\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nShow the code\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\n\nShow the code\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\n\nShow the code\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\nShow the code\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\n\nShow the code\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-gi-statistics",
    "title": "Hands-on Exercise 6",
    "section": "Computing Gi Statistics",
    "text": "Computing Gi Statistics\n\nGi Statistics Using Fixed Distance\n\n\nShow the code\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\n\nShow the code\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n\nShow the code\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\nGi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\n\nShow the code\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\nMapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n\nShow the code\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html",
    "title": "In-class exercise 4",
    "section": "",
    "text": "Remember that the coordinates are in geographic system, not projected\nGood practice to check the data itself\nIRL, GIS analysts will have to clean the data and do the joins\nRead documentation"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#loading-of-packages",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#loading-of-packages",
    "title": "In-class exercise 4",
    "section": "Loading of packages",
    "text": "Loading of packages\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#reading-of-data",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#reading-of-data",
    "title": "In-class exercise 4",
    "section": "Reading of Data",
    "text": "Reading of Data\n\n\nShow the code\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#import-csv-into-r-environment",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#import-csv-into-r-environment",
    "title": "In-class exercise 4",
    "section": "Import csv into R environment",
    "text": "Import csv into R environment\n\n\nShow the code\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#performing-relational-join",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#performing-relational-join",
    "title": "In-class exercise 4",
    "section": "Performing Relational Join",
    "text": "Performing Relational Join\n\n\nShow the code\n#combines both the hunan and hunan2012 data.frames together\n#subsequently selects certain (2-5, 8 and 16th) columns only\nhunan <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#visualising-regional-development-indicator",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#visualising-regional-development-indicator",
    "title": "In-class exercise 4",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nShow the code\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\nOutput is list of polygons\nAverage: if the average is not a whole number –> get the rounded value (usually round down)\nRound up for distance\nLat long should be true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#installation-of-package",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#installation-of-package",
    "title": "In-class exercise 4",
    "section": "Installation of Package",
    "text": "Installation of Package\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#reading-of-data-1",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#reading-of-data-1",
    "title": "In-class exercise 4",
    "section": "Reading of Data",
    "text": "Reading of Data\n\n\nShow the code\nhunan <- st_read(dsn='data/geospatial'\n                 ,layer='Hunan')\n\n\nReading layer `Hunan' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nShow the code\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#modifying-data",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#modifying-data",
    "title": "In-class exercise 4",
    "section": "Modifying Data",
    "text": "Modifying Data\n\n\nShow the code\n#combines both the hunan and hunan2012 data.frames together\n#subsequently selects certain (2-5, 8 and 16th) columns only\n#must do early, otherwise will lose GDP data\nhunan <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#intro-to-gwmodel",
    "href": "In-class_Ex/In-class_Ex04/In_class_Ex04.html#intro-to-gwmodel",
    "title": "In-class exercise 4",
    "section": "Intro to GWModel",
    "text": "Intro to GWModel\nGWModel –> provide a collection of R libraries that let us use distance matrix to conduct summary statistics, multivariate statistics, discriminant analysis, principal components, logistic regression, multiple linear regression, generalised regression, etc.\nIn this in-class exercise, we will be using GWModel to conduct summary statistics.\n\nWorking with GWSS\n\n\n\n\n\n\nThis package cannot accept SF, must be sp object class\n\n\n\n\n\n\n\n\nShow the code\nhunan_sp <- hunan %>%\n  as_Spatial()\n\n\nThe adaptive bandwith has to be number of neighbours (bw).\nCan take in multiple variables., at the same time (vars)\n\n\nShow the code\ngwstat <- gwss(data=hunan_sp,\n               vars=\"GDPPC\",\n               bw=6,\n               kernel='bisquare',\n               adaptive=TRUE,\n               longlat=T)\n\n\nGDPPC_LM is the same as the application of spatial lag (specifically the distance matrix).\nmean, standard deviation, variance, skew, coefficience of variations.\nView(gwstat[[\"SDF\"]]@data) --> to view"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#exploratory-data-analysis-and-handling-of-origins",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#exploratory-data-analysis-and-handling-of-origins",
    "title": "Take Home Exercise 01: Part 1",
    "section": "Exploratory Data Analysis and Handling of Origins",
    "text": "Exploratory Data Analysis and Handling of Origins\nIn this section, I will be exploring the general distribution of the origin points and handling it for the subsequent sections, which will analyse the data in greater detail.\n\nVisualising the Frequency Distribution\nFirst, I will plot out the general distribution of the origin points\n\n\nShow the code\nggplot(data=origin_df,\n       aes(x=weekday)) +\n  geom_bar()\n\n\n\n\n\nAs can be seen, the number of trips daily seem to be fairly equally distributed throughout the week.\n\n\nVisualising the Origins as a Point Map Symbol\nWe can visualise the geospatial distribution of the origin points. First, we need to convert the coordinates to lat-long and transform it to the correct CRS.\n\n\nShow the code\norigins_sf <- st_as_sf(origin_df, coords = c(\"rawlng\", \"rawlat\"),\n                       crs=4326) %>%\n  st_transform(crs=3414)\n\n\nNow, we can visualise it using the code chunk below:\n\n\nShow the code\ntm_shape(mpsz_sf)+\n  tm_polygons()+\ntm_shape(origins_sf) +\n  tm_dots()\n\n\n\n\nHandling\nFor further analysis, we will need to convert the various data into different formats. These will be explained and performed in the code chunk below\n\n\nShow the code\n#conversion of sg_sf, mpsz_sf and origins_sf to a generic spatial class\nsg <- as_Spatial(sg_sf)\nmpsz <- as_Spatial(mpsz_sf)\norigins <- as_Spatial(origins_sf) \n\n# Conversion of sg and origins to SpatialPolygon format\nsg_sp <- as(sg, \"SpatialPolygons\")\norigins_sp <- as(origins, \"SpatialPoints\")\n\n# conversion of origins to ppp format\norigins_ppp <- as(origins_sp, \"ppp\")\norigins_ppp\n\n\nPlanar point pattern: 28000 points\nwindow: rectangle = [3628.24, 49845.23] x [25198.14, 49689.64] units\n\n\nNow, I will plot origins_ppp.\n\n\nShow the code\nplot(origins_ppp)\n\n\nWe must check for duplicates in the data using the code chunk below:\n\n\nShow the code\nany(duplicated(origins_ppp))\n\n\n[1] FALSE\n\n\nAs there are no duplicates within the data, we do not have to apply any more transformation to the data.\n\nCreate Owin Data\nNow, we can convert the Coastal Outline to owin data and plot it out.\n\n\nShow the code\nsg_owin <- as(sg_sp, \"owin\")\nplot(sg_owin)\n\n\n\n\n\n\n\nCombining Events\nWe will now extract Grab origins within the Singapore CoastalOutline\n\n\nShow the code\norigins_SG_ppp = origins_ppp[sg_owin]\n\n# plotting the distribution of the origins\nplot(origins_SG_ppp)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#country-level-analysis",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#country-level-analysis",
    "title": "Take Home Exercise 01",
    "section": "Country Level Analysis",
    "text": "Country Level Analysis\nWe can begin by trying to find all of the best kernel and bandwidths for the purposes of our analysis. To do this, we need to find the one with the tightest clusters.\nIn R, we have 4 possible kernel density bandwidths: diggle, ppl, scott and CvL. All of them will be tested below:\n\n\nShow the code\n# diggle\nkde_origins_SG.bw <- density(origins_SG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n# ppl\nkde_origins_SG.ppl <- density(origins_SG_ppp, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\n# CvL\nkde_origins_SG.CvL <- density(origins_SG_ppp, \n                               sigma=bw.CvL, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\n# scott\nkde_origins_SG.scott <- density(origins_SG_ppp, \n                               sigma=bw.scott, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\n\n\nWe may also plot them out:\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(kde_origins_SG.bw)\nplot(kde_origins_SG.ppl)\nplot(kde_origins_SG.CvL)\nplot(kde_origins_SG.scott)\n\n\nNow, we can check for the tightness of these clusters:\n\n\nShow the code\n# tightness of diggle\nbw.diggle(origins_SG_ppp)\n\n# tightness of ppl\nbw.ppl(origins_SG_ppp)\n\n# tightness of CvL\nbw.CvL(origins_SG_ppp)\n\n# tightness of scott\nbw.scott(origins_SG_ppp)\n\n\nWe can observe that the smallest sigma value is from diggle, suggesting that it has the tightest clusters of all the bandwidth. Hence, we will continue using diggle for this analysis.\nWe can also test for different kernels:\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(density(origins_SG_ppp, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(origins_SG_ppp, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(origins_SG_ppp, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(origins_SG_ppp, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\n\n\n\n\nAs they are identical, there is no need to choose a specific one. Moving forward, I will be using Gaussian kernel."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#regions-of-interest",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01.html#regions-of-interest",
    "title": "Take Home Exercise 01",
    "section": "Regions of Interest",
    "text": "Regions of Interest\nWe can tighten our analysis to include only areas of interest. From the figures above, we observe higher densities in the planning areas Changi, Jurong East, Woodlands and Marine Parade, we can filter out mpsz to get them.\n\n\nShow the code\n# extraction of Changi Airport\nCA = mpsz_sf[mpsz_sf$PLN_AREA_N==\"CHANGI\",]\n\n# extraction of Jurong East\nJE = mpsz_sf[mpsz_sf$PLN_AREA_N==\"JURONG EAST\",]\n\n# extraction of Woodlands\nWL = mpsz_sf[mpsz_sf$PLN_AREA_N==\"WOODLANDS\",]\n\n# extraction of Marine Parade\nMP = mpsz_sf[mpsz_sf$PLN_AREA_N=='MARINE PARADE',]\n\n\nWith this, we now have to perform the same functions we did in Create Owin Data and Conversions.\n\n\nShow the code\n# turn them into spatial\nCA_spatial <- as_Spatial(CA)\nJE_spatial <- as_Spatial(JE)\nWL_spatial <- as_Spatial(WL)\nMP_spatial <- as_Spatial(MP)\n\n# turn them into SpatialPolygons\nCA_sp <- as(CA_spatial, \"SpatialPolygons\")\nJE_sp <- as(JE_spatial, \"SpatialPolygons\")\nWL_sp <- as(WL_spatial, \"SpatialPolygons\")\nMP_sp <- as(MP_spatial, \"SpatialPolygons\")\n\n# convert to owin\n\nCA_owin = as(CA_sp, \"owin\")\nJE_owin = as(JE_sp, \"owin\")\nWL_owin = as(WL_sp, \"owin\")\nMP_owin = as(MP_sp, \"owin\")\n\n\nFrom here, we can extract the events that occurred in these planning areas.\n\n\nShow the code\norigins_CA_ppp = origins_SG_ppp[CA_owin]\norigins_JE_ppp = origins_SG_ppp[JE_owin]\norigins_WL_ppp = origins_SG_ppp[WL_owin]\norigins_MP_ppp = origins_SG_ppp[MP_owin]\n\n\nWe can now perform the same analysis that we did in Country Level Analysis:\n\n\nShow the code\nkde_origins_CA <- density(origins_CA_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_origins_JE <- density(origins_JE_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_origins_WL <- density(origins_WL_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_origins_MP <- density(origins_MP_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nWe can also plot them out:\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(kde_origins_CA,\n     main=\"Changi\")\nplot(kde_origins_WL,\n     main=\"Woodlands\")\nplot(kde_origins_JE,\n     main=\"Jurong East\")\nplot(kde_origins_MP,\n     main=\"Marine Parade\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In_class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In_class_Ex05.html",
    "title": "In-class Exercise 05 - Global and Local Measures of Spatial Association: sfdep method",
    "section": "",
    "text": "For this in-class exercise, we will be using the following packages and loading it into our R environment:\n\nsf\ntmap\nsfdep\n\nthe newer version of spdep;\ncan use immediately with sf objects; will save to sf layer) – old version had to extract it out\n\ntidyverse\n\n\n\nShow the code\npacman::p_load(sf, tmap, sfdep, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#importing-geospatial-data",
    "title": "In-class Exercise 05 - Global and Local Measures of Spatial Association: sfdep method",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nFirst, I will be importing Hunan.\n\n\nShow the code\nHunan <- st_read(dsn=\"data/geospatial\",\n                 layer = \"Hunan\") \n\n\nReading layer `Hunan' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nNote\n\n\n\nCheck if the bounding box is in decimal deree or not. If it’s in decimal degree, it is in geodetic CRS, not projected CRS."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#importing-aspatial-data",
    "href": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#importing-aspatial-data",
    "title": "In-class Exercise 05 - Global and Local Measures of Spatial Association: sfdep method",
    "section": "Importing Aspatial Data",
    "text": "Importing Aspatial Data\nNow, I will be importing Hunan_2012.csv into my R environment\n\n\nShow the code\nHunan_2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#joining-the-data",
    "href": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#joining-the-data",
    "title": "In-class Exercise 05 - Global and Local Measures of Spatial Association: sfdep method",
    "section": "Joining the Data",
    "text": "Joining the Data\n\n\nShow the code\n# will lose geometry for sf layer\nhunan_GDPPC <- left_join(Hunan, Hunan_2012) %>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#notes",
    "href": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#notes",
    "title": "In-class Exercise 05 - Global and Local Measures of Spatial Association: sfdep method",
    "section": "Notes",
    "text": "Notes\nCheck if anything can be used to join the data frames (geospatial and aspatial). This can be County name etc.\nAlso, perform left_join to prevent losing the geometric data"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#note-1",
    "href": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#note-1",
    "title": "In-class Exercise 05",
    "section": "Note",
    "text": "Note\n.before = 1 means to ensure one column will always be the first May not be necessaryin real life applications"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#computing-global-moran-i",
    "href": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#computing-global-moran-i",
    "title": "In-class Exercise 05 - Global and Local Measures of Spatial Association: sfdep method",
    "section": "Computing Global Moran I",
    "text": "Computing Global Moran I\n\n\nShow the code\nmoranI <- global_moran(wm_q$GDPPC,\n                      wm_q$nb,\n                      wm_q$wt)\nglimpse(moranI)\n\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\nHowever, Global Moran I might not be convincing enough"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#queenss-method",
    "href": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#queenss-method",
    "title": "In-class Exercise 05 - Global and Local Measures of Spatial Association: sfdep method",
    "section": "Queens’s Method",
    "text": "Queens’s Method\nYou can go directly into the Queen’s Method using tidyverse in a singular step:\n\n\nShow the code\nwm_q <- hunan_GDPPC %>%\n  mutate(nb=st_contiguity(geometry),\n         wt= st_weights(nb,\n                        style = \"W\"),\n         .before =1)\n\n\n\nNote\n.before = 1 means to ensure one column will always be the first May not be necessary in real life applications"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#performing-global-moran-i-permutation-test",
    "href": "In-class_Ex/In-class_Ex05/In_class_Ex05.html#performing-global-moran-i-permutation-test",
    "title": "In-class Exercise 05 - Global and Local Measures of Spatial Association: sfdep method",
    "section": "Performing Global Moran I permutation test",
    "text": "Performing Global Moran I permutation test\nCan do it on multiple simulations (in this case 100. This is because the number of simulations is nsim+1) to confirm the representativeness of the data set.\n\n\nShow the code\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 99)\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe statistical report above demonstrates that the p-value is smaller than 0.05, which means that this result is significant at a 95% significance level. Hence, we can reject the null hypothesis that the spatial distribution of GDP per capita resembles random distribution. Because the Moran’s I value is greater than 0, we can infer that the spatial distribution shows signs of clustering.\n\nNote\nnsim will effect computation time. If you’re on a larger data set, you can just do a smaller number (e.g. 99, 49). 999 may take an incredibly long time to load. Test if your compute can handle it within a certain timeframe.\nWe can also only infer from the results, we can’t definitively prove/disprove our hypothesis\n\nComplete in-class exercise 5 on our own + watch video for hot and cold spot"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html",
    "title": "Take Home Exercise 01: Part 2",
    "section": "",
    "text": "Show the code\n#loading the packages\npacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse, arrow, lubridate, spNetwork, classInt)\n\n\n\n\n\n\n\nShow the code\n# data\n\n# reading the Singapore Master Plan\nmpsz_sf <- st_read(dsn = \"../../data/data\",\n                layer = \"MP14_SUBZONE_WEB_PL\") %>%\n  st_transform(3414)\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\data\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nShow the code\n# reading the CoastalOutline\nsg_sf <- st_read(dsn='data/',\n                 layer = \"CoastalOutline\")\n\n\nReading layer `CoastalOutline' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_1\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21494.3 xmax: 55941.94 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\n\nShow the code\n# reading the origin points\norigin_df <- read_rds(\"data/rds/origin_dfs.rds\")"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#country-level-analysis",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#country-level-analysis",
    "title": "Take Home Exercise 01: Part 2",
    "section": "Country Level Analysis",
    "text": "Country Level Analysis\nWe can begin by trying to find all of the best kernel and bandwidths for the purposes of our analysis. To do this, we need to find the one with the tightest clusters.\nIn R, we have 4 possible kernel density bandwidths: diggle, ppl, scott and CvL. All of them will be tested below:\n\n\nShow the code\n#diggle \nkde_origins_SG.bw <- density(origins_SG_ppp, \n                             sigma=bw.diggle,\n                             edge=TRUE,\n                             kernel=\"gaussian\")  \n# ppl \nkde_origins_SG.ppl <- density(origins_SG_ppp,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                              kernel=\"gaussian\") \n# CvL \nkde_origins_SG.CvL <- density(origins_SG_ppp,\n                              sigma=bw.CvL,\n                              edge=TRUE,\n                              kernel=\"gaussian\") \n# scott \nkde_origins_SG.scott <- density(origins_SG_ppp,\n                                sigma=bw.scott, \n                                edge=TRUE,\n                                kernel=\"gaussian\")\n\n\nWe may also plot them out:\n\n\nShow the code\npar(mfrow=c(2,2)) \nplot(kde_origins_SG.bw) \nplot(kde_origins_SG.ppl) \nplot(kde_origins_SG.CvL) \nplot(kde_origins_SG.scott)\n\n\nNow, we can check for the tightness of these clusters:\n\n\nShow the code\n# tightness of diggle \nbw.diggle(origins_SG_ppp)  \n# tightness of ppl \nbw.ppl(origins_SG_ppp)  \n# tightness of CvL \nbw.CvL(origins_SG_ppp)  \n# tightness of scott \nbw.scott(origins_SG_ppp) \n\n\nWe can observe that the smallest sigma value is from diggle, suggesting that it has the tightest clusters of all the bandwidth. Hence, we will continue using diggle for this analysis.\nWe can also test for different kernels:\n\n\nShow the code\npar(mfrow=c(2,2)) \nplot(density(origins_SG_ppp,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n     main=\"Gaussian\") \nplot(density(origins_SG_ppp,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"epanechnikov\"),\n     main=\"Epanechnikov\") \nplot(density(origins_SG_ppp,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"quartic\"),\n     main=\"Quartic\") \nplot(density(origins_SG_ppp,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"disc\"),\n     main=\"Disc\") \n\n\n\n\n\nAs they are identical, there is no need to choose a specific one. Moving forward, I will be using Gaussian kernel."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#regions-of-interest",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#regions-of-interest",
    "title": "Take Home Exercise 01: Part 2",
    "section": "Regions of Interest",
    "text": "Regions of Interest\nWe can tighten our analysis to include only areas of interest. From the figures above, we observe higher densities in the planning areas Changi, Jurong East, Woodlands and Marine Parade, we can filter out mpsz to get them.\n\n\nShow the code\n# extraction of Changi Airport \nCA = mpsz_sf[mpsz_sf$PLN_AREA_N==\"CHANGI\",]  \n# extraction of Jurong East \nJE = mpsz_sf[mpsz_sf$PLN_AREA_N==\"JURONG EAST\",]  \n# extraction of Woodlands \nWL = mpsz_sf[mpsz_sf$PLN_AREA_N==\"WOODLANDS\",]  \n# extraction of Marine Parade \nMP = mpsz_sf[mpsz_sf$PLN_AREA_N=='MARINE PARADE',]\n\n\nWith this, we now have to perform the same functions we did in Create Owin Data and Conversions.\n\n\nShow the code\n# turn them into spatial \nCA_spatial <- as_Spatial(CA)\nJE_spatial <- as_Spatial(JE)\nWL_spatial <- as_Spatial(WL)\nMP_spatial <- as_Spatial(MP)  \n\n# turn them into SpatialPolygons \nCA_sp <- as(CA_spatial, \"SpatialPolygons\") \nJE_sp <- as(JE_spatial, \"SpatialPolygons\") \nWL_sp <- as(WL_spatial, \"SpatialPolygons\") \nMP_sp <- as(MP_spatial, \"SpatialPolygons\")  \n\n# convert to owin  \nCA_owin = as(CA_sp, \"owin\") \nJE_owin = as(JE_sp, \"owin\") \nWL_owin = as(WL_sp, \"owin\") \nMP_owin = as(MP_sp, \"owin\")\n\n\nFrom here, we can extract the events that occurred in these planning areas.\n\n\nShow the code\norigins_CA_ppp = origins_SG_ppp[CA_owin] \norigins_JE_ppp = origins_SG_ppp[JE_owin] \norigins_WL_ppp = origins_SG_ppp[WL_owin]\norigins_MP_ppp = origins_SG_ppp[MP_owin]\n\n\nWe can now perform the same analysis that we did in Country Level Analysis:\n\n\nShow the code\nkde_origins_CA <- density(origins_CA_ppp,\n                          sigma=bw.diggle,\n                          edge=TRUE,\n                          kernel=\"gaussian\")  \nkde_origins_JE <- density(origins_JE_ppp,\n                          sigma=bw.diggle,\n                          edge=TRUE, \n                          kernel=\"gaussian\")  \nkde_origins_WL <- density(origins_WL_ppp,\n                          sigma=bw.diggle,\n                          edge=TRUE,\n                          kernel=\"gaussian\")  \nkde_origins_MP <- density(origins_MP_ppp,\n                          sigma=bw.diggle,\n                          edge=TRUE,\n                          kernel=\"gaussian\") \n\n\nWe can also plot them out:\n\n\nShow the code\npar(mfrow=c(2,2)) \nplot(kde_origins_CA,\n     main=\"Changi\") \nplot(kde_origins_WL,\n     main=\"Woodlands\")\nplot(kde_origins_JE,\n     main=\"Jurong East\")\nplot(kde_origins_MP,\n     main=\"Marine Parade\")"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#clark-and-evans-test",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#clark-and-evans-test",
    "title": "Take Home Exercise 01: Part 2",
    "section": "Clark and Evans test",
    "text": "Clark and Evans test\nThe Clark and Evans test allows us to understand if the data points are clustered in any places or not.\n\nCountry Level Analysis\nIn the below code chunk, we are conducting this test on the origin points in the whole of Singapore. The hypothesis are as follows\nH0: The Grab origin points are distributed equally throughout the country\nH1: The Grab origin points have clusters.\n\n\nShow the code\nclarkevans.test(origins_SG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_SG_ppp\nR = 0.28039, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n\n\nFrom this, we can see that there is clustering (R=0.28039) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters.\n\n\nRegions of Interest\n\nChangi\n\n\nShow the code\nclarkevans.test(origins_CA_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_CA_ppp\nR = 0.13547, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\nFrom this, we can see that there is clustering (R= 0.31778) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters.\n\n\nWoodlands\n\n\nShow the code\nclarkevans.test(origins_WL_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_WL_ppp\nR = 0.31778, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\nFrom this, we can see that there is clustering (R= 0.25797) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters.\n\n\nJurong East\n\n\nShow the code\nclarkevans.test(origins_JE_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_JE_ppp\nR = 0.25797, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\nFrom this, we can see that there is clustering (R= 0.25797) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters.\n\n\nMarine Parade\n\n\nShow the code\nclarkevans.test(origins_MP_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origins_MP_ppp\nR = 0.51201, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\nFrom this, we can see that there is clustering (R= 0.51201) at a p-value of 2.2e-16. As 2.2e-16 is smaller than 0.05, we can conclude that this difference is significant at a 5% significance level. Hence, we reject the null hypothesis and the Grab origin points have clusters."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#data-handling-1",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#data-handling-1",
    "title": "Take Home Exercise 01: Part 2",
    "section": "Data Handling",
    "text": "Data Handling\n\nHandling of Road Data\nNow, we can read the road data as provided by openstreetmap. Note that it provides data for Malaysia, Singapore and Brunei all at once.\n\n\nShow the code\nall_roads <- st_read(dsn='../../data/data/data',\n                     layer = 'gis_osm_roads_free_1')\n\n\nWe realise that it is in WGS 84, not in SVY21 so we have to transform the data.\n\n\nShow the code\nall_roads <- st_transform(all_roads, 3414)\n\n\nWe can check the CRS again for all_roads.\n\n\nShow the code\nst_crs(all_roads)\n\n\nSince we’re only interested in the roads in mainland Singapore, we have to filter the roads.\n\n\nShow the code\n# get all roads in mainland Singapore \nSG_roads <- st_intersection(all_roads, sg_sf)  \n# write out the roads into a separate .shp file for easier future handling \nst_write(SG_roads, 'data/SG_roads.shp')\n\n\nWe can now read it from here.\n\n\nShow the code\nSG_roads <- st_read(dsn='data', layer= 'SG_roads')\n\n\nReading layer `SG_roads' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_1\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 227969 features and 10 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 2679.373 ymin: 23099.51 xmax: 50957.8 ymax: 50220.06\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\nGetting the Roads within the Subzones\nNow, we can find the streets that exist only inside the subzones.\n\n\nShow the code\n# get roads only in the aforementioned subzones \nCA_roads <- st_intersection(SG_roads, CA) \nWL_roads <- st_intersection(SG_roads, WL) \nJE_roads <- st_intersection(SG_roads, JE) \nMP_roads <- st_intersection(SG_roads, MP)\n\n\n\n\nShow the code\nCA_roads\n\n\nSimple feature collection with 4007 features and 25 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 42577.65 ymin: 32548.05 xmax: 50286.8 ymax: 41649.2\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n       osm_id code      fclass                  name  ref oneway maxspeed layer\n356  22617051 5113     primary         Loyang Avenue <NA>      F       70     0\n360  22617159 5113     primary         Loyang Avenue <NA>      F       70     0\n1348 22981700 5113     primary       Telok Paku Road <NA>      F       50     0\n3201 34403286 5114   secondary            Loyang Way <NA>      F       50     0\n3207 34403387 5122 residential Changi North Street 1 <NA>      B        0     0\n3208 34403405 5122 residential Changi North Crescent <NA>      B       50     0\n3209 34403417 5122 residential     Changi North Rise <NA>      B        0     0\n4001 42063713 5141     service                  <NA> <NA>      F        0     0\n4002 42063715 5141     service                  <NA> <NA>      B        0     0\n4003 42063716 5141     service                  <NA> <NA>      B        0     0\n     bridge tunnel OBJECTID SUBZONE_NO   SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N\n356       F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n360       F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n1348      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n3201      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n3207      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n3208      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n3209      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n4001      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n4002      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n4003      F      F      221          2 CHANGI WEST    CHSZ02      N     CHANGI\n     PLN_AREA_C    REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n356          CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n360          CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n1348         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n3201         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n3207         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n3208         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n3209         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n4001         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n4002         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n4003         CH EAST REGION       ER 7460F2CFB1D7D36C 2014-12-05 44092.34\n       Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n356  38928.66   14918.11    4848517 LINESTRING (44617.88 41088....\n360  38928.66   14918.11    4848517 LINESTRING (43851.2 39632.9...\n1348 38928.66   14918.11    4848517 LINESTRING (45352.67 41113....\n3201 38928.66   14918.11    4848517 LINESTRING (43761.28 39560....\n3207 38928.66   14918.11    4848517 LINESTRING (43152.23 36906....\n3208 38928.66   14918.11    4848517 LINESTRING (42843.89 36842....\n3209 38928.66   14918.11    4848517 LINESTRING (43130.89 36812....\n4001 38928.66   14918.11    4848517 LINESTRING (43433.23 37663....\n4002 38928.66   14918.11    4848517 LINESTRING (43436.11 37657....\n4003 38928.66   14918.11    4848517 LINESTRING (43511.5 37906.7...\n\n\nShow the code\nWL_roads \n\n\nSimple feature collection with 7165 features and 25 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 20613.4 ymin: 44814.83 xmax: 25593.19 ymax: 49200.77\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n       osm_id code        fclass                name  ref oneway maxspeed layer\n796  22773625 5115      tertiary  Woodlands Avenue 6 <NA>      F       40     0\n819  22774351 5131 motorway_link                <NA> <NA>      F       50     0\n825  22774532 5122   residential  Woodlands Drive 14 <NA>      F       40     0\n826  22774537 5122   residential  Woodlands Drive 53 <NA>      B       50     0\n827  22774541 5122   residential  Woodlands Drive 43 <NA>      F       40     0\n832  22775173 5115      tertiary  Woodlands Avenue 5 <NA>      F       60     0\n834  22775385 5113       primary Woodlands Avenue 12 <NA>      F       70     0\n835  22775386 5114     secondary  Woodlands Avenue 1 <NA>      F       50     0\n836  22775389 5114     secondary  Woodlands Avenue 1 <NA>      F       50     0\n3703 37584630 5111      motorway  Seletar Expressway  SLE      F       90     1\n     bridge tunnel OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND\n796       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n819       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n825       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n826       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n827       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n832       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n834       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n835       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n836       F      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n3703      T      F      282          4 WOODLANDS SOUTH    WDSZ04      N\n     PLN_AREA_N PLN_AREA_C     REGION_N REGION_C          INC_CRC FMEL_UPD_D\n796   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n819   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n825   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n826   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n827   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n832   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n834   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n835   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n836   WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n3703  WOODLANDS         WD NORTH REGION       NR 8A4E14DAC4ACE11C 2014-12-05\n       X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n796  23609.57 45692.88   5211.384    1576001 LINESTRING (24007.3 45538.1...\n819  23609.57 45692.88   5211.384    1576001 LINESTRING (22821.47 45515....\n825  23609.57 45692.88   5211.384    1576001 LINESTRING (23444.28 46022....\n826  23609.57 45692.88   5211.384    1576001 LINESTRING (23990.45 46088....\n827  23609.57 45692.88   5211.384    1576001 LINESTRING (23447.47 46014....\n832  23609.57 45692.88   5211.384    1576001 LINESTRING (24645.58 46021....\n834  23609.57 45692.88   5211.384    1576001 LINESTRING (23836.85 45038....\n835  23609.57 45692.88   5211.384    1576001 LINESTRING (23124.88 45989....\n836  23609.57 45692.88   5211.384    1576001 LINESTRING (24156.4 45407.0...\n3703 23609.57 45692.88   5211.384    1576001 LINESTRING (23684.88 44959....\n\n\nShow the code\nJE_roads \n\n\nSimple feature collection with 7131 features and 25 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 14254.68 ymin: 30994.22 xmax: 19398.25 ymax: 37289.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n       osm_id code       fclass                     name  ref oneway maxspeed\n1084 22903885 5114    secondary             Penjuru Road <NA>      F       60\n1085 22903886 5121 unclassified             Penjuru Road <NA>      F       60\n1443 23101520 5112        trunk              Jalan Buroh <NA>      F       70\n3791 39959160 5112        trunk              Jalan Buroh <NA>      F       70\n3792 39959161 5112        trunk              Jalan Buroh <NA>      F       70\n5003 70583774 5115     tertiary              Pandan Road <NA>      B       50\n5004 70583780 5121 unclassified             Penjuru Lane <NA>      B       50\n5005 70583783 5114    secondary          Tanjong Penjuru <NA>      B       50\n5006 70583786 5114    secondary          Tanjong Penjuru <NA>      F       50\n5007 70583790 5121 unclassified Tanjong Penjuru Crescent <NA>      B       50\n     layer bridge tunnel OBJECTID SUBZONE_NO        SUBZONE_N SUBZONE_C CA_IND\n1084     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n1085     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n1443     1      T      F       80         10 PENJURU CRESCENT    JESZ10      N\n3791     1      T      F       80         10 PENJURU CRESCENT    JESZ10      N\n3792     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5003     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5004     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5005     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5006     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n5007     0      F      F       80         10 PENJURU CRESCENT    JESZ10      N\n      PLN_AREA_N PLN_AREA_C    REGION_N REGION_C          INC_CRC FMEL_UPD_D\n1084 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n1085 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n1443 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n3791 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n3792 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5003 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5004 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5005 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5006 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n5007 JURONG EAST         JE WEST REGION       WR BC263278706376DE 2014-12-05\n       X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1084 17651.31 31799.61   9876.049    3049720 LINESTRING (16991.44 32621....\n1085 17651.31 31799.61   9876.049    3049720 LINESTRING (16738.48 31589....\n1443 17651.31 31799.61   9876.049    3049720 LINESTRING (16290.72 32753....\n3791 17651.31 31799.61   9876.049    3049720 LINESTRING (19056.98 32186....\n3792 17651.31 31799.61   9876.049    3049720 LINESTRING (18978.73 32113....\n5003 17651.31 31799.61   9876.049    3049720 LINESTRING (18411.82 31559....\n5004 17651.31 31799.61   9876.049    3049720 LINESTRING (17208.01 32320....\n5005 17651.31 31799.61   9876.049    3049720 LINESTRING (16869.64 32131....\n5006 17651.31 31799.61   9876.049    3049720 LINESTRING (17506.95 32049....\n5007 17651.31 31799.61   9876.049    3049720 LINESTRING (17697.91 31764....\n\n\nShow the code\nMP_roads\n\n\nSimple feature collection with 2864 features and 25 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 32697.12 ymin: 29763 xmax: 37589.95 ymax: 32843.37\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n       osm_id code       fclass                         name  ref oneway\n922  22810641 5114    secondary    Tanjong Katong Road South <NA>      F\n1202 22930502 5113      primary            Marina East Drive <NA>      F\n3760 39477475 5111     motorway           East Coast Parkway  ECP      F\n3761 39477476 5111     motorway           East Coast Parkway  ECP      F\n4078 44122367 5152     cycleway               Park Connector <NA>      B\n4097 44133236 5153      footway      Underpass to Meyer Road <NA>      B\n4140 44488255 5153      footway                  Katong Park <NA>      B\n4141 44488257 5121 unclassified East Coast Park Service Road <NA>      B\n4142 44488265 5114    secondary    Tanjong Katong Road South <NA>      F\n5509 74729034 5111     motorway           East Coast Parkway  ECP      F\n     maxspeed layer bridge tunnel OBJECTID SUBZONE_NO        SUBZONE_N\n922        50     0      F      F       44          5 MARINA EAST (MP)\n1202       60     0      F      F       44          5 MARINA EAST (MP)\n3760       90     1      T      F       44          5 MARINA EAST (MP)\n3761       80     0      F      F       44          5 MARINA EAST (MP)\n4078        0     0      F      F       44          5 MARINA EAST (MP)\n4097        0    -1      F      T       44          5 MARINA EAST (MP)\n4140        0    -1      F      T       44          5 MARINA EAST (MP)\n4141       50     0      F      F       44          5 MARINA EAST (MP)\n4142       50     1      T      F       44          5 MARINA EAST (MP)\n5509       90     0      F      F       44          5 MARINA EAST (MP)\n     SUBZONE_C CA_IND    PLN_AREA_N PLN_AREA_C       REGION_N REGION_C\n922     MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n1202    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n3760    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n3761    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4078    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4097    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4140    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4141    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n4142    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n5509    MPSZ05      N MARINE PARADE         MP CENTRAL REGION       CR\n              INC_CRC FMEL_UPD_D  X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area\n922  1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n1202 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n3760 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n3761 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4078 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4097 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4140 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4141 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n4142 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n5509 1575868DF0D30E32 2014-12-05 33715.7 30512.25   6657.151    1590340\n                           geometry\n922  LINESTRING (35230.6 31057.3...\n1202 LINESTRING (33760.43 30638....\n3760 LINESTRING (33860.36 30899....\n3761 LINESTRING (33706.71 30894....\n4078 LINESTRING (34789.2 30864.6...\n4097 LINESTRING (34772.07 30914....\n4140 LINESTRING (34005.49 30906....\n4141 LINESTRING (35255.73 30985,...\n4142 LINESTRING (35227.24 31091....\n5509 LINESTRING (34854.12 30932....\n\n\nWe notice that all of the above are geometry type geometry and not a linestring. We can convert them with the following code chunk:\n\n\nShow the code\nCA_roads <- CA_roads %>%   \n  st_cast(\"LINESTRING\")  \nWL_roads <- WL_roads %>%   \n  st_cast(\"LINESTRING\")  \nJE_roads <- JE_roads %>%   \n  st_cast(\"LINESTRING\")  \nMP_roads <- MP_roads %>%   \n  st_cast(\"LINESTRING\")\n\n\n\n\nExtraction of the Events Within the Subzones\nBefore we can conduct analysis on the network, we will also need to constrict the events to exclusively the ones that occurred within these two subzones.\n\n\nShow the code\n #extraction of origin events that occurred within Changi and Marine Parade \nCA_origins <- st_intersection(origins_sf, CA) \nWL_origins <- st_intersection(origins_sf, WL) \nJE_origins <- st_intersection(origins_sf, JE) \nMP_origins <- st_intersection(origins_sf, MP) \n\n\nWe can now plot this data. In this instance, we can use Changi as an example:\n\n\nShow the code\ntmap_mode('view') \ntm_shape(CA_origins)+ \n  tm_dots() + \n  tm_shape(CA_roads) +\n  tm_lines()\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#network-constrained-kde-netkde-analysis",
    "href": "Take_Home_Exercises/Take_Home_Exercise_1/Take_Home_Exercise_01P2.html#network-constrained-kde-netkde-analysis",
    "title": "Take Home Exercise 01: Part 2",
    "section": "Network Constrained KDE (NetKDE) Analysis",
    "text": "Network Constrained KDE (NetKDE) Analysis\n\nPreparing the lixel objects\nBefore computing NetKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with lixelize_lines() of spNetwork as shown in the code chunk below.\n\n\nShow the code\nCA_lixels <- lixelize_lines(CA_roads,\n                            750,\n                            mindist = 375) \nWL_lixels <- lixelize_lines(WL_roads,\n                            750,\n                            mindist = 375) \nJE_lixels <- lixelize_lines(JE_roads,\n                            750,\n                            mindist = 375) \nMP_lixels <- lixelize_lines(MP_roads,\n                            750,\n                            mindist = 375)\n\n\n\n\nGenerating Line Points\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.\n\n\nShow the code\nCA_samples <- lines_center(CA_lixels) \nWL_samples <- lines_center(WL_lixels) \nJE_samples <- lines_center(JE_lixels) \nMP_samples <- lines_center(MP_lixels)\n\n\n\n\nPerforming NetKDE\nWe can now compute the NetKDE using the code chunk below:\n\n\nShow the code\n# for the purposes of this analysis, the bandwidth will be set to 8.080901, which is the diggle bandwidth for Singapore overall \nCA_densities <- nkde(CA_roads, \n                  events = CA_origins,\n                  w = rep(1,nrow(CA_origins)),\n                  samples = CA_samples,\n                  kernel_name = \"quartic\",\n                  bw = 8.080901, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 10, #we aggregate events within a 10m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n# care about bw (bandwith) and kernel_name \n\nJE_densities <- nkde(JE_roads, \n                  events = JE_origins,\n                  w = rep(1,nrow(JE_origins)),\n                  samples = JE_samples,\n                  kernel_name = \"quartic\",\n                  bw = 8.080901, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 10, #we aggregate events within a 10m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n # care about bw (bandwith) and kernel_name \n\nWL_densities <- nkde(WL_roads, \n                  events = WL_origins,\n                  w = rep(1,nrow(WL_origins)),\n                  samples = WL_samples,\n                  kernel_name = \"quartic\",\n                  bw = 8.080901, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 10, #we aggregate events within a 10m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n# care about bw (bandwith) and kernel_name \n\nMP_densities <- nkde(MP_roads, \n                  events = MP_origins,\n                  w = rep(1,nrow(MP_origins)),\n                  samples = MP_samples,\n                  kernel_name = \"quartic\",\n                  bw = 8.080901, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 10, #we aggregate events within a 10m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n# care about bw (bandwith) and kernel_name \n\n\n\n\nVisualising NetKDE\nBefore we can visualise the NetKDE values, code chunk below will be used to insert the computed density values (i.e. densities) into samples and lixels objects as density field.\n\n\nShow the code\nCA_samples$density <- CA_densities\nCA_lixels$density <- CA_densities\n\nJE_samples$density <- JE_densities\nJE_lixels$density <- JE_densities\n\nMP_samples$density <- MP_densities\nMP_lixels$density <- MP_densities\n\nWL_samples$density <- WL_densities\nWL_lixels$density <- WL_densities\n\n\nWe can also rescale to make the values more understandable. Since the values are in kilometres, multiplying the values by 1000 will convert them to metres.\nWe can use the code chunk below to visualise the network kernel density estimation:\n\nVisualising NetKDE for Changi\n\n\nShow the code\ntmap_mode('view')\ntm_shape(CA_lixels)+\n  tm_lines(col=\"density\")\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\n\n\nVisualising NetKDE for Jurong East\n\n\nShow the code\ntmap_mode('view') \ntm_shape(JE_lixels)+   \n  tm_lines(col=\"density\")  \n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\n\n\nVisualising NetKDE for Marine Parade\n\n\nShow the code\ntmap_mode('view') \ntm_shape(MP_lixels)+   \n  tm_lines(col=\"density\")  \n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\n\n\nVisualising NetKDE for Woodlands\n\n\nShow the code\ntmap_mode('view') \ntm_shape(WL_lixels)+   \n  tm_lines(col=\"density\")  \n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands-on Exercise 7: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "I did this exercise by accident in week 3: Please refer to this site for my work for it"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/data/geospatial/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_02.html",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_02.html",
    "title": "Take Home Exercise 02",
    "section": "",
    "text": "From prof:\nAs a curious geospatial analytics green horn, you are interested to discover:\n\nif the distribution of dengue fever outbreak at Tainan City, Taiwan are independent from space and space and time.\nIf the outbreak is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer:\n\na study area layer in sf polygon features. It must be at village level and confined to the D01, D02, D04, D06, D07, D08, D32 and D39 counties of Tainan City, Taiwan.\na dengue fever layer within the study area in sf point features. The dengue fever cases should be confined to epidemiology week 31-50, 2023.\na derived dengue fever layer in spacetime s3 class of sfdep. It should contain, among many other useful information, a data field showing number of dengue fever cases by village and by epidemiology week.\n\nUsing the extracted data, perform global spatial autocorrelation analysis.\nUsing the extracted data, perform local spatial autocorrelation analysis.\nUsing the extracted data, perform emerging hotspot analysis.\nDescribe the spatial patterns revealed by the analysis above."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#loading-of-packages",
    "href": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#loading-of-packages",
    "title": "In-class Exercise 7",
    "section": "Loading of Packages",
    "text": "Loading of Packages\n\n\nShow the code\npacman::p_load(sf, sfdep, tmap, plotly, tidyverse, Kendall)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#geospatial",
    "href": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#geospatial",
    "title": "In-class Exercise 7",
    "section": "Geospatial",
    "text": "Geospatial\n\n\nShow the code\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#importing-apsatial-data",
    "href": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#importing-apsatial-data",
    "title": "In-class Exercise 7",
    "section": "Importing Apsatial Data",
    "text": "Importing Apsatial Data\n\n\nShow the code\nGDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#deriving-the-spatial-weights",
    "href": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#deriving-the-spatial-weights",
    "title": "In-class Exercise 7",
    "section": "Deriving the spatial weights",
    "text": "Deriving the spatial weights\nThe code chunk below will be used to identify neighbors and to derive an inverse distance weights.\n\n\nShow the code\nGDPPC_nb <- GDPPC_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n\n\n\n\nShow the code\nhead(GDPPC_nb)\n\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  <dbl> <chr>   <dbl> <list>    <list>   \n1  2005 Anxiang  8184 <int [6]> <dbl [6]>\n2  2005 Hanshou  6560 <int [6]> <dbl [6]>\n3  2005 Jinshi   9956 <int [5]> <dbl [5]>\n4  2005 Li       8394 <int [5]> <dbl [5]>\n5  2005 Linli    8850 <int [5]> <dbl [5]>\n6  2005 Shimen   9244 <int [6]> <dbl [6]>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#computing-gi-1",
    "href": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#computing-gi-1",
    "title": "In-class Exercise 7",
    "section": "Computing Gi*",
    "text": "Computing Gi*\nWe can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame.\n\n\nShow the code\ngi_stars <- GDPPC_nb %>% \n  group_by(Year) %>% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %>% \n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#arrange-to-show-significant-emerging-hotcold-spots",
    "href": "In-class_Ex/In-class_Ex07/In_class_Ex07.html#arrange-to-show-significant-emerging-hotcold-spots",
    "title": "In-class Exercise 7",
    "section": "Arrange to show significant emerging hot/cold spots",
    "text": "Arrange to show significant emerging hot/cold spots\n\n\nShow the code\nemerging <- ehsa %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:5)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_02.html#importing-of-geospatial-data",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_02.html#importing-of-geospatial-data",
    "title": "Take Home Exercise 02",
    "section": "Importing of Geospatial Data",
    "text": "Importing of Geospatial Data\nNow, we will import the map of Tainan.\n\n\nShow the code\ntainan_vil <- st_read(dsn='data/geospatial',\n                 layer = \"TAINAN_VILLAGE\")\n\n\nReading layer `TAINAN_VILLAGE' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 649 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0269 ymin: 22.88751 xmax: 120.6563 ymax: 23.41374\nGeodetic CRS:  TWD97\n\n\nWe notice that instead of WGS84, the data is in TWD97. This is Taiwan’s own projected coordinate system.\nNow, I will plot out the map of Tainan Village\n\n\nShow the code\nplot(tainan_vil[\"COUNTYCODE\"])"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_02.html#importing-of-aspatial-data",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_02.html#importing-of-aspatial-data",
    "title": "Take Home Exercise 02",
    "section": "Importing of Aspatial Data",
    "text": "Importing of Aspatial Data\nNow, I will be using read_csv() to import the aspatial data (in csv format) into my R environment\n\n\nShow the code\ndengue <- read_csv(\"data/aspatial/Dengue_Daily.csv\")\n\n\nWe can check the content of dengue using the following code chunk:\n\n\nShow the code\nlist(dengue)\n\n\n[[1]]\n# A tibble: 106,861 × 26\n   發病日     個案研判日 通報日     性別  年齡層 居住縣市 居住鄉鎮 居住村里\n   <date>     <chr>      <date>     <chr> <chr>  <chr>    <chr>    <chr>   \n 1 1998-01-02 None       1998-01-07 男    40-44  屏東縣   屏東市   None    \n 2 1998-01-03 None       1998-01-14 男    30-34  屏東縣   東港鎮   None    \n 3 1998-01-13 None       1998-02-18 男    55-59  宜蘭縣   宜蘭市   None    \n 4 1998-01-15 None       1998-01-23 男    35-39  高雄市   苓雅區   None    \n 5 1998-01-20 None       1998-02-04 男    55-59  宜蘭縣   五結鄉   None    \n 6 1998-01-22 None       1998-02-19 男    20-24  桃園市   蘆竹區   None    \n 7 1998-01-23 None       1998-02-02 男    40-44  新北市   新店區   None    \n 8 1998-01-26 None       1998-02-19 女    65-69  台北市   北投區   None    \n 9 1998-02-11 None       1998-02-13 女    25-29  台南市   南區     None    \n10 1998-02-16 None       1998-02-24 男    20-24  高雄市   楠梓區   None    \n# ℹ 106,851 more rows\n# ℹ 18 more variables: 最小統計區 <chr>, 最小統計區中心點X <chr>,\n#   最小統計區中心點Y <chr>, 一級統計區 <chr>, 二級統計區 <chr>,\n#   感染縣市 <chr>, 感染鄉鎮 <chr>, 感染村里 <chr>, 是否境外移入 <chr>,\n#   感染國家 <chr>, 確定病例數 <dbl>, 居住村里代碼 <chr>, 感染村里代碼 <chr>,\n#   血清型 <chr>, 內政部居住縣市代碼 <chr>, 內政部居住鄉鎮代碼 <chr>,\n#   內政部感染縣市代碼 <chr>, 內政部感染鄉鎮代碼 <chr>\n\n\nThe column names of interest are “通報日” (TL: date), “最小統計區中心點X” (TL: x-coordinate), “最小統計區中心點Y” (TL: y-coordinate).\nWe notice that the data in dengue does not list the county name and instead only provides the coordinates of the dengue case. This suggests that we cannot use table joins and we will need to find the points that fall within the specific districts of Tainan Village.\nThere are also some rows that have None values in the x- and y- coordinates.We can exclude them using the following code chunk:\n\n\nShow the code\n# the None values are a character type so need to omit rows where either 最小統計區中心點X or 最小統計區中心點Y is \"None\"\ndengue <- dengue[!(dengue$最小統計區中心點X == \"None\" | dengue$最小統計區中心點Y == \"None\"), ]\n\n\nWe also notice that the coordinates in “最小統計區中心點X” and “最小統計區中心點Y” are in projected coordinates system. For now, it is unclear whether this is under the WGS84 coordinate system or TWD97. We will proceed with the assumption that it is in TWD97.\nAnother issue is that we need to analyse the dengue cases from specific weeks 31-50 in 2023 and the dengue contins cases from 1998 and in YMD format. To restrict this, we can also run the following code chunk:\n\n\nShow the code\n# get the ones from 2023\ndengue$epiweek <- epiweek(dengue$發病日)\ndengue$epiyear <- epiyear(dengue$發病日)\n\ndengue_2023 <- dengue[dengue$epiyear==2023,]\n\n# get only from weeks 31-50\ndengue_2023 <- dengue_2023[dengue_2023$epiweek>=31 & dengue_2023$epiweek<=50,]"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_02.html#data-wrangling",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_02.html#data-wrangling",
    "title": "Take Home Exercise 02",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nCreating a simple feature data frame from aspatial data frame\nNow, I will use st_as_sf from the sf package to convert the dengue data frame into a simple feature data frame.\n\n\nShow the code\ndengue_sf <- st_as_sf(dengue,\n                      coords = c(\"最小統計區中心點X\",\"最小統計區中心點Y\"),\n                      crs = 3826)\n\n\n\n\nExtraction of Districts of Interest\n\n\nShow the code\nD01 <- tainan_vil %>%\n  filter(TOWNID==\"D01\") %>%\n  select()\n\nD02 <- tainan_vil %>%\n  filter(TOWNID==\"D02\") %>%\n  select()\n\nD04 <- tainan_vil %>%\n  filter(TOWNID==\"D04\") %>%\n  select()\n\nD06 <- tainan_vil %>%\n  filter(TOWNID==\"D06\") %>%\n  select()\n\nD07 <- tainan_vil %>%\n  filter(TOWNID==\"D07\") %>%\n  select()\n\nD08 <- tainan_vil %>%\n  filter(TOWNID==\"D08\") %>%\n  select()\n\nD32 <- tainan_vil %>%\n  filter(TOWNID==\"D32\") %>%\n  select()\n\nD39 <- tainan_vil %>%\n  filter(TOWNID==\"D39\") %>%\n  select()"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "In 2023, Taiwan recorded the worst outbreak of dengue fever since 2015. The outbreak mostly centered in Tainan, prompting escalated rates of inspections in high-risk areas and buildings.\nThe general criteria to label an area high-risk would be a place that has poor gutter structural design, blockages in the drain or are largely abandoned. Such issues increase the chance of water remaining stagnant and facilitates the continued reproduction of mosquitoes, the vector through which dengue fever is perpetuated.\nWhile this criteria is well-founded, it is possible to improve the identification of high-risk areas to enable more efficient use of resources through more precise targeting.\nTo do so, we will need to\n\nIdentify if the distribution of dengue fever outbreak in Tainan City, Taiwan is independent spatially or spatio-temporally and if so,\nIdentify the present hot and cold areas, as well as emergent ones\n\n\n\nI will be investigating the spatial autocorrelation of dengue fever in Tainan City, on both a local and global level. The global autocorrelation tells us if there are signs of clustering for the entirety of the dataset. Local autocorrelation further shows us the relationship of the clustering in a given area to its neighbours (e.g. if a hotspot is surrounded by coldspots and vice-versa).\nThis project also encompasses an analysis of the spatio-temporal autocorrelation of dengue, which allows us to identify any emergent hotspots in the dataset.\nFor this project, the analysis will be limited to Tainan City, the epicentre of dengue in Taiwan, specifically the following counties in Tainan City:\n\nD01\nD02\nD04\nD06\nD07\nD08\nD32\nD39\n\nThe analysis will be limited to the specific timeframe where dengue cases spiked in 2023, which were epidemiological weeks 31-50.\nAfter performing all of the analysis, I will discuss the outcome of the results."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#importing-of-geospatial-data",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#importing-of-geospatial-data",
    "title": "Take Home Exercise 2",
    "section": "Importing of Geospatial Data",
    "text": "Importing of Geospatial Data\nI will be importing the tainan_vil data into my R environment using st_read() of the sf package.\n\n\nShow the code\ntainan_vil <- st_read(dsn = \"data/geospatial\",\n                  layer=\"TAINAN_VILLAGE\")\n\n\nReading layer `TAINAN_VILLAGE' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 649 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0269 ymin: 22.88751 xmax: 120.6563 ymax: 23.41374\nGeodetic CRS:  TWD97"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#importing-of-aspatial-data",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#importing-of-aspatial-data",
    "title": "Take Home Exercise 2",
    "section": "Importing of Aspatial Data",
    "text": "Importing of Aspatial Data\nNow, I will be importing the daily dengue data into my R environment using the read_csv() function of the sf package.\n\n\nShow the code\ndengue <- read_csv(\"data/aspatial/Dengue_Daily.csv\")"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#getting-the-districts-of-interest",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#getting-the-districts-of-interest",
    "title": "Take Home Exercise 2",
    "section": "Getting the Districts of Interest",
    "text": "Getting the Districts of Interest\nWe will be restricting tainan_vil to the counties mentioned above.\n\n\nShow the code\n#getting the districts of interest\ndistricts = c(\"D01\",\"D02\",\"D04\",\"D06\",\"D07\",\"D08\",\"D32\",\"D39\")\n\n#restricting the village into just the required districts\ndistricts_sf = tainan_vil[tainan_vil$TOWNID %in% districts, ]\n\n\nHowever, we also face the problem of repeated village names in different towns. To fix this, we can specify the village name with the town name:\n\n\nShow the code\ndistricts_sf <- unite(districts_sf, VILLNAME, TOWNNAME, VILLNAME, sep = \"-\")"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#getting-the-dengue-cases-of-interest",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#getting-the-dengue-cases-of-interest",
    "title": "Take Home Exercise 2",
    "section": "Getting the Dengue Cases of Interest",
    "text": "Getting the Dengue Cases of Interest\nWe are also only interested in the dengue cases between weeks 31-50 in 2023. We can further restrict it using the following code chunk:\n\n\nShow the code\n# get the ones from 2023\ndengue$epiweek <- epiweek(dengue$發病日)\ndengue$epiyear <- epiyear(dengue$發病日)\n\ndengue <- dengue[dengue$epiyear==2023,]\n\n# get only from weeks 31-50\ndengue <- dengue[dengue$epiweek>=31 & dengue$epiweek<=50,]\n\n\nI also wanted to let the VILLNAME in dengue follow the same format as the VILLNAME in tainan_vil.\n\n\nShow the code\ndengue <- unite(dengue, VILLNAME, TOWNNAME, VILLNAME, sep = \"-\")\n\n\nWe can use the summary() function to investigate the contents of dengue\n\n\nShow the code\nsummary(dengue)\n\n\n     發病日            個案研判日            通報日          \n Min.   :2023-07-30   Length:25475       Min.   :2023-07-30  \n 1st Qu.:2023-09-11   Class :character   1st Qu.:2023-09-13  \n Median :2023-10-01   Mode  :character   Median :2023-10-03  \n Mean   :2023-10-03                      Mean   :2023-10-05  \n 3rd Qu.:2023-10-25                      3rd Qu.:2023-10-27  \n Max.   :2023-12-16                      Max.   :2023-12-23  \n     性別              年齡層           COUNTYNAME          VILLNAME        \n Length:25475       Length:25475       Length:25475       Length:25475      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  最小統計區        X-Coordinate       Y-Coordinate        一級統計區       \n Length:25475       Length:25475       Length:25475       Length:25475      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  二級統計區          感染縣市           感染鄉鎮           感染村里        \n Length:25475       Length:25475       Length:25475       Length:25475      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n 是否境外移入         感染國家           確定病例數 居住村里代碼      \n Length:25475       Length:25475       Min.   :1    Length:25475      \n Class :character   Class :character   1st Qu.:1    Class :character  \n Mode  :character   Mode  :character   Median :1    Mode  :character  \n                                       Mean   :1                      \n                                       3rd Qu.:1                      \n                                       Max.   :1                      \n 感染村里代碼          血清型          內政部居住縣市代碼 內政部居住鄉鎮代碼\n Length:25475       Length:25475       Length:25475       Length:25475      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n 內政部感染縣市代碼 內政部感染鄉鎮代碼    epiweek         epiyear    \n Length:25475       Length:25475       Min.   :31.00   Min.   :2023  \n Class :character   Class :character   1st Qu.:37.00   1st Qu.:2023  \n Mode  :character   Mode  :character   Median :40.00   Median :2023  \n                                       Mean   :39.96   Mean   :2023  \n                                       3rd Qu.:43.00   3rd Qu.:2023  \n                                       Max.   :50.00   Max.   :2023  \n\n\nLooking through the dataframe, I noticed that there are some “None” values in the X- and Y-coordinates. I will remove them using the following:\n\n\nShow the code\n# removing rows with None values in X-Coordinates and Y-Coordinates\n# note that X- and Y-Coordinates are both in character form and not numerical form\ndengue <- subset(dengue, `X-Coordinate` != \"None\" & \n                             `Y-Coordinate` != \"None\" &\n                             VILLNAME %in% districts_sf$VILLNAME)\n\n# assess if any None values remain\nsum(dengue$`X-Coordinate` == \"None\")\n\n\n[1] 0\n\n\nFinally, I will be converting dengue into an sf object.\n\n\nShow the code\n# Create sf object after handling missing values\ndengue_sf <- st_as_sf(dengue, coords = c(\"X-Coordinate\", \"Y-Coordinate\"), crs = st_crs(districts_sf))"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#further-cleaning",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#further-cleaning",
    "title": "Take Home Exercise 2",
    "section": "Further Cleaning",
    "text": "Further Cleaning\nFor my own convenience, I decided to translate the columns in dengue from Traditional Chinese to English and also try to link them up the columns in counties_sf. The following code chunk was written to perform it:\n\n\nShow the code\ndengue <- dengue %>%\n  rename('X-Coordinate' = 最小統計區中心點X,\n         'Y-Coordinate' = 最小統計區中心點Y,\n         'COUNTYNAME' = 居住縣市,\n         'VILLNAME' = 居住村里,\n         'TOWNNAME' = 居住鄉鎮)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#conversion-of-dengue-to-sf",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#conversion-of-dengue-to-sf",
    "title": "Take Home Exercise 2",
    "section": "Conversion of dengue to sf",
    "text": "Conversion of dengue to sf\nWe can now convert dengue into an sf object.\n\n\nShow the code\ndengue_sf <- st_as_sf(dengue, coords = c('X-Coordinate','Y-Coordinate'), crs= st_crs(counties_sf))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#datasets-used",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#datasets-used",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Datasets Used",
    "text": "Datasets Used\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#installing-packages",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#installing-packages",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Installing Packages",
    "text": "Installing Packages\nThe following packages will be used for this analysis:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for calibrating geographical weighted family of models\n\nGWmodel\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\n\nShow the code\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#importing-geospatial-datasets",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#importing-geospatial-datasets",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Importing geospatial datasets",
    "text": "Importing geospatial datasets\n\n\nShow the code\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe notice that it is in WGS84 instead of SVY21. We can correct it using the following:\n\n\nShow the code\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\n\nWe may now check if the CRS is correct.\n\n\nShow the code\nst_crs(mpsz_svy21)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nWe can also show the extent of mpsz by using st_bbox() of the sf package:\n\n\nShow the code\nst_bbox(mpsz_svy21) #view extent\n\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#importing-aspatial-datasets",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#importing-aspatial-datasets",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Importing Aspatial Datasets",
    "text": "Importing Aspatial Datasets\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\n\nShow the code\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\n\nShow the code\nglimpse(condo_resale)\n\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n\nShow the code\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\n\nShow the code\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\n\nShow the code\nsummary(condo_resale)\n\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\nConverting aspatial dataframe into an sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\n\nShow the code\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\n\nShow the code\nhead(condo_resale.sf)\n\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     <dbl>         <dbl>    <dbl> <dbl>    <dbl>          <dbl>            <dbl>\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA <dbl>, PROX_HAWKER_MARKET <dbl>,\n#   PROX_KINDERGARTEN <dbl>, PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#eda-using-statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#eda-using-statistical-graphics",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "EDA using statistical graphics",
    "text": "EDA using statistical graphics\n\n\nShow the code\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\n\nShow the code\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\nNow, we can plot the logged selling price.\n\n\nShow the code\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\nIt is now slightly less skewed than previously."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#multiple-histogram-plots-distribution-of-variables",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#multiple-histogram-plots-distribution-of-variables",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Multiple Histogram Plots distribution of variables",
    "text": "Multiple Histogram Plots distribution of variables\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\n\nShow the code\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\nDrawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\n\nShow the code\ntmap_mode(\"view\")\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\nNow, I will create an interactive viewing map:\n\n\nShow the code\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\ntm_dots() is used instead of tm_bubbles\n\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nNow turn the R display into plot mode.\n\n\nShow the code\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#building-fixed-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#building-fixed-bandwidth-gwr-model",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Building Fixed Bandwidth GWR Model",
    "text": "Building Fixed Bandwidth GWR Model\n\nComputing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\n\nShow the code\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres. It’s in metres because that’s the unit of measurement SVY21 is in.\n\n\nGWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\n\nShow the code\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\n\nShow the code\ngwr.fixed\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-02-25 11:05:46.98975 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2024-02-25 11:05:48.522928 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#building-adaptive-bandwith-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#building-adaptive-bandwith-gwr-model",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Building Adaptive Bandwith GWR Model",
    "text": "Building Adaptive Bandwith GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\nComputing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\n\nShow the code\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\nConstructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\n\nShow the code\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\nThe code below can be used to display the model output.\n\n\nShow the code\ngwr.adaptive\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-02-25 11:05:58.926952 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-02-25 11:06:00.399832 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-gwr-output",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-gwr-output",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Visualising GWR Output",
    "text": "Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#converting-sdf-into-sf-dataframe",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#converting-sdf-into-sf-dataframe",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Converting SDF into sf dataframe",
    "text": "Converting SDF into sf dataframe\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\n\nShow the code\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\n\n\nShow the code\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\n\nShow the code\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\n\nShow the code\nglimpse(condo_resale.sf.adaptive)\n\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\n\nShow the code\nsummary(gwr.adaptive$SDF$yhat)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-local-r2",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-local-r2",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Visualising local R2",
    "text": "Visualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-coefficient-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-coefficient-estimates",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Visualising coefficient estimates",
    "text": "Visualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\n\nShow the code\ntmap_mode(\"view\")\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\n\nBy URA Planning Region\n\n\nShow the code\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#okay",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#okay",
    "title": "Take Home Exercise 2",
    "section": "okay",
    "text": "okay\n\n\nShow the code\ntainan_dengue <- left_join(counties_sf, dengueCountyComplete)\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(tainan_dengue) +\n  tm_fill(\"WEEKLY_DENGUE_CASE_NUM\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"WEEKLY_DENGUE_CASE_NUM\") +\n  tm_layout(main.title = \"Distribution of case number per capita by county, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\nI will now try and create the time series cube from dengue_county\n\n\nShow the code\ndengue_county_st <- spacetime(dengueCountyComplete, counties_sf,\n                              .loc_col=\"VILLNAME\",\n                              .time_col =\"epiweek\" )\n\n\nNext, is_spacetime_cube() will be used to verify if dengue_county_st is indeed a time series cube.\n\n\nShow the code\nis_spacetime_cube(dengue_county_st)\n\n\n[1] TRUE"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#preparation-of-data",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#preparation-of-data",
    "title": "Take Home Exercise 2",
    "section": "Preparation of Data",
    "text": "Preparation of Data\n\nJoining the Attribute Tables\nI will be joining districts_sf with dengueCountyComplete so we can analyse the global and local spatial autocorrelation.\n\n\nShow the code\ntainan_dengue <- left_join(districts_sf, dengueCountyComplete)\n\n\n\n\nVisualisation using a Choropleth map\nWe can visualise the distribution using a choropleth map:\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(tainan_dengue) +\n  tm_fill(\"WEEKLY_DENGUE_CASE_NUM\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"WEEKLY_DENGUE_CASE_NUM\") +\n  tm_layout(main.title = \"Distribution of case number\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\nWe can also visualise this data according to month. For this, I will be using the month of September:\n\n\nShow the code\nsept <- tainan_dengue %>%\n  filter(epiweek>35 & epiweek<40)\ntmap_mode(\"plot\")\ntm_shape(tainan_dengue) +\n  tm_fill(\"WEEKLY_DENGUE_CASE_NUM\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"WEEKLY_DENGUE_CASE_NUM\") +\n  tm_layout(main.title = \"Distribution of case number in September\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\nWe notice that from the quantiles that it is very positively skewed. As such, this suggests that there could be some clustering for the dengue cases.\n\n\nDeriving Contiguity weights: Queen’s Method\nWe will now derive the contiguity weights using the Queen’s method.\n\n\nShow the code\nwm_q <- tainan_dengue %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\nWe can get a basic overview of wm_q using the following code chunk:\n\n\nShow the code\nwm_q\n\n\nSimple feature collection with 5160 features and 13 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0627 ymin: 22.89401 xmax: 120.2925 ymax: 23.09144\nGeodetic CRS:  TWD97\nFirst 10 features:\n                                                                                                                                                                                                                                                                                                                                                                                                                       nb\n1  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\n2  1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\n3  1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\n4  1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\n5  1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\n6  1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\n7  1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\n8  1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\n9  1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\n10  1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200\nwt\nnnnnnnnnnn      VILLCODE COUNTYNAME      VILLNAME      VILLENG COUNTYID COUNTYCODE TOWNID\n1  67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n2  67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n3  67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n4  67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n5  67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n6  67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n7  67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n8  67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n9  67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n10 67000350032     臺南市 安南區-青草里 Qingcao Vil.        D      67000    D06\n   TOWNCODE NOTE epiweek WEEKLY_DENGUE_CASE_NUM                       geometry\n1  67000350 <NA>      31                      0 POLYGON ((120.1176 23.08387...\n2  67000350 <NA>      32                      0 POLYGON ((120.1176 23.08387...\n3  67000350 <NA>      33                      0 POLYGON ((120.1176 23.08387...\n4  67000350 <NA>      34                      0 POLYGON ((120.1176 23.08387...\n5  67000350 <NA>      35                      0 POLYGON ((120.1176 23.08387...\n6  67000350 <NA>      36                      0 POLYGON ((120.1176 23.08387...\n7  67000350 <NA>      37                      1 POLYGON ((120.1176 23.08387...\n8  67000350 <NA>      38                      0 POLYGON ((120.1176 23.08387...\n9  67000350 <NA>      39                      0 POLYGON ((120.1176 23.08387...\n10 67000350 <NA>      40                      0 POLYGON ((120.1176 23.08387..."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#global-measure-of-spatial-autocorrelation",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#global-measure-of-spatial-autocorrelation",
    "title": "Take Home Exercise 2",
    "section": "Global Measure of Spatial Autocorrelation",
    "text": "Global Measure of Spatial Autocorrelation\n\nComputing Global Moran’s I Permutation Test\nIn this project, I opted to use a Global Moran’s I permutation test as opposed to a standard, Global Moran’s I test, as it would allow us to test the spatial autocorrelation using multiple simulation of tests instead of just 1.\nTo ensure the results are reproducable, I will be setting the seed.\n\n\nShow the code\nset.seed(1234)\n\n\nNext, global_moran_perm() is used to perform Monte Carlo simulation. It will run 100 simulations (n = 99+1.\n\n\nShow the code\nglobal_moran_perm(wm_q$WEEKLY_DENGUE_CASE_NUM,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.15977, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe statistical report above show that the p-value is smaller than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of dengue case resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0. We can infer that the spatial distribution shows signs of clustering."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#local-measure-of-spatial-autocorrelation",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#local-measure-of-spatial-autocorrelation",
    "title": "Take Home Exercise 2",
    "section": "Local Measure of Spatial Autocorrelation",
    "text": "Local Measure of Spatial Autocorrelation\n\nLocal Moran’s I\nIn this section,I will be computing the Local Moran’s I of tainan_dengue using local_moran().\n\n\nShow the code\nlisa <- wm_q %>% \n  mutate(local_moran = local_moran(\n    WEEKLY_DENGUE_CASE_NUM, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n\n\n\n\nVisualising Local Moran’s I\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the ii field.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of Dengue Cases\",\n            main.title.size = 0.8)\n\n\n\n\n\nThe negative values suggest that the area is an outlier (i.e. a high-value area surrounded by low-value areas and vice-versa).\n\n\nVisualising Local Moran’s I and p-values\nWhile the above does show the outliers in the dataset, it is also helpful to visualise it along with the p-values, showing the probability of the result being significant.\n\n\nShow the code\ntmap_mode(\"plot\")\nmap1 <- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of Dengue Cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\nWe can see that the majority of the not significant (p-value > 0.05) areas correspond the negative values in ii. This suggests that the distribution of dengue cases are largely consistent throughout the counties.\n\n\nVisualising a LISA map\nLISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low cluaters. In fact, LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are mean, median and pysal. In general, classification in mean will be used as shown in the code chunk below.\n\n\nShow the code\nlisa_sig <- lisa  %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#creating-a-time-series-cube",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#creating-a-time-series-cube",
    "title": "Take Home Exercise 2",
    "section": "Creating a time-series cube",
    "text": "Creating a time-series cube\nI will now create the time series cube from dengueCountyComplete\n\n\nShow the code\ndengue_county_st <- spacetime(dengueCountyComplete, districts_sf,\n                              .loc_col=\"VILLNAME\",\n                              .time_col =\"epiweek\" )\n\n\nNext, is_spacetime_cube() will be used to verify if dengue_county_st is indeed a time series cube.\n\n\nShow the code\nis_spacetime_cube(dengue_county_st)\n\n\n[1] TRUE"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#computing-gi",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#computing-gi",
    "title": "Take Home Exercise 2",
    "section": "Computing Gi*",
    "text": "Computing Gi*\nThe code chunk below will be used to identify neighbors and to derive an inverse distance weights.\n\n\nShow the code\ndengue_county_nb <- dengue_county_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n\n\nI can now visualise the head of dengue_county_nb\n\n\nShow the code\nhead(dengue_county_nb)\n\n\n# A tibble: 6 × 5\n  VILLNAME      epiweek WEEKLY_DENGUE_CASE_NUM nb        wt       \n  <chr>           <dbl>                  <dbl> <list>    <list>   \n1 安南區-青草里      31                      0 <int [4]> <dbl [4]>\n2 仁德區-保安里      31                      1 <int [6]> <dbl [6]>\n3 中西區-赤嵌里      31                      0 <int [9]> <dbl [9]>\n4 南區-大成里        31                      0 <int [7]> <dbl [7]>\n5 安南區-城北里      31                      0 <int [5]> <dbl [5]>\n6 安南區-城南里      31                      0 <int [8]> <dbl [8]>\n\n\nI can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame.\n\n\nShow the code\ngi_stars <- dengue_county_nb %>% \n  group_by(epiweek) %>% \n  mutate(gi_star = local_gstar_perm(\n    WEEKLY_DENGUE_CASE_NUM, nb, wt)) %>% \n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#mann-kendall-test",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#mann-kendall-test",
    "title": "Take Home Exercise 2",
    "section": "Mann-Kendall Test",
    "text": "Mann-Kendall Test\nI can now test the significance of the local Gi* for each location and plot it out.\n\n\nShow the code\nehsa <- gi_stars %>%\n  group_by(VILLNAME) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\n\n\nNow, I can arrange it to show significant hot/cold spots\n\n\nShow the code\n# arranging\nemerging <- ehsa %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:5)\n\n# showing\nhead(emerging)\n\n\n# A tibble: 5 × 6\n  VILLNAME         tau         sl     S     D  varS\n  <chr>          <dbl>      <dbl> <dbl> <dbl> <dbl>\n1 東區-崇信里   -0.789 0.00000134  -150  190.   950\n2 東區-德光里   -0.695 0.0000214   -132  190.   950\n3 永康區-中興里 -0.663 0.0000500   -126  190.   950\n4 永康區-五王里 -0.663 0.0000500   -126  190.   950\n5 永康區-成功里 -0.663 0.0000500   -126  190.   950"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#performing-emerging-hotspot-analysis",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#performing-emerging-hotspot-analysis",
    "title": "Take Home Exercise 2",
    "section": "Performing Emerging Hotspot Analysis",
    "text": "Performing Emerging Hotspot Analysis\nLastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (i.e. dengue_county_sf), and the quoted name of the variable of interest (i.e. WEEKLY_DENGUE_CASE_NUM) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation to be performed.\n\n\nShow the code\nehsa <- emerging_hotspot_analysis(\n  x = dengue_county_st, \n  .var = \"WEEKLY_DENGUE_CASE_NUM\", \n  k = 1, \n  nsim = 99\n)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#visualising-the-distribution-of-ehsa-dates",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#visualising-the-distribution-of-ehsa-dates",
    "title": "Take Home Exercise 2",
    "section": "Visualising the distribution of EHSA dates",
    "text": "Visualising the distribution of EHSA dates\n\n\nShow the code\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#visualising-ehsa",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#visualising-ehsa",
    "title": "Take Home Exercise 2",
    "section": "Visualising EHSA",
    "text": "Visualising EHSA\nNow that we know the distribution of the number and type of hot/cold spots in Tainan Village, we should also visualise it.\nBefore we do this, we must join districts_sf with ehsa.\n\n\nShow the code\ndistrict_ehsa <- districts_sf %>%\n  left_join(ehsa,\n            by = join_by(VILLNAME == location))\n\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\n\nShow the code\nehsa_sig <- district_ehsa  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(district_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\nThe map above suggests that there is a degree of clustering of the number of dengue cases in a given village. Nonetheless, there exists a number of villages that oscillate between being a hotspot and being normal. Understanding the causes behind the sporadic spread would be useful in more helpful targeted programmes to contain the spread of dengue fever."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#visualising-the-distribution-of-ehsa",
    "href": "Take_Home_Exercises/Take_Home_Exercise_2/Take_Home_Exercise_2.html#visualising-the-distribution-of-ehsa",
    "title": "Take Home Exercise 2",
    "section": "Visualising the distribution of EHSA",
    "text": "Visualising the distribution of EHSA\nWe can now visualising the distribution of of differernt kinds of hot spots and cold spots\n\n\nShow the code\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))\n\n\n\n\n\nFrom the above, we can see that the majority of villages in the districts of interest in Tainan City are oscillating hotspots, meaning they go from high to normal and vice-versa frequently."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "title": "Hands-on Exercise 9",
    "section": "",
    "text": "I will be conducting two modes of analysis:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-question",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-question",
    "title": "Hands-on Exercise 9",
    "section": "The Question",
    "text": "The Question\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-data",
    "title": "Hands-on Exercise 9",
    "section": "The Data",
    "text": "The Data\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#installation-and-loading-of-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#installation-and-loading-of-r-packages",
    "title": "Hands-on Exercise 9",
    "section": "Installation and Loading of R packages",
    "text": "Installation and Loading of R packages\nThe following code chunk will install (if needed) and load the R packages into my environment\n\n\nShow the code\npacman::p_load(spdep, tmap, sf, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, tidyverse, GGally, raster)\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe RGDAL package has since been removed from CRAN. Please use the sf package instead With tidyverse, we do not have to install readr, ggplot2 and dplyr packages separately. In fact, tidyverse also installs other very useful R packages such as tidyr."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#importing-geospatial-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#importing-geospatial-data-into-r-environment",
    "title": "Hands-on Exercise 9",
    "section": "Importing Geospatial Data into R Environment",
    "text": "Importing Geospatial Data into R Environment\nI will use st_read() to load the data.\n\n\nShow the code\nshan_sf <- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %>%\n  select(c(2:7))\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\n\nShow the code\nshan_sf\n\n\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\n\nShow the code\nglimpse(shan_sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#importing-aspatial-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#importing-aspatial-data-into-r-environment",
    "title": "Hands-on Exercise 9",
    "section": "Importing Aspatial Data into R Environment",
    "text": "Importing Aspatial Data into R Environment\nThe csv file will be import using read_csv() function of readr package.\nThe code chunks used are shown below:\n\n\nShow the code\nict <- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s tibble data.frame format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\n\nShow the code\nsummary(ict)\n\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#derive-new-variables-using-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#derive-new-variables-using-dplyr-package",
    "title": "Hands-on Exercise 9",
    "section": "Derive New Variables Using dplyr Package",
    "text": "Derive New Variables Using dplyr Package\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\n\nShow the code\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\n\nShow the code\nsummary(ict_derived)\n\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#eda-using-statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#eda-using-statistical-graphics",
    "title": "Hands-on Exercise 9",
    "section": "EDA Using Statistical Graphics",
    "text": "EDA Using Statistical Graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\n\nShow the code\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\n\nShow the code\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\n\nShow the code\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\nShow the code\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\n\nShow the code\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\n\nShow the code\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#eda-using-choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#eda-using-choropleth-map",
    "title": "Hands-on Exercise 9",
    "section": "EDA Using Choropleth Map",
    "text": "EDA Using Choropleth Map\n\nJoining Geospatial Data with Aspatial Data\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join() function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\n\nShow the code\nshan_sf <- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\n\nShow the code\nshan_sf <- read_rds(\"data/rds/shan_sf.rds\")\n\n\n\n\nPreparing a Choropleth Map\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\n\nShow the code\nqtm(shan_sf, \"RADIO_PR.x\")\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\n\nShow the code\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS.y\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO.y\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\n\nShow the code\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS.y\", \"RADIO_PR.y\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\nWe can identify that the spatial density of households with radios is higher in areas that have more families (?)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#extracting-clustering-variables",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#extracting-clustering-variables",
    "title": "Hands-on Exercise 9",
    "section": "Extracting Clustering Variables",
    "text": "Extracting Clustering Variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\n\nShow the code\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  dplyr::select(\"TS.x\", \"RADIO_PR.x\", \"TV_PR.x\", \"LLPHONE_PR.x\", \"MPHONE_PR.x\", \"COMPUTER_PR.x\")\nhead(cluster_vars,10)\n\n\n        TS.x RADIO_PR.x  TV_PR.x LLPHONE_PR.x MPHONE_PR.x COMPUTER_PR.x\n1    Mongmit   286.1852 554.1313     35.30618    260.6944      12.15939\n2    Pindaya   417.4647 505.1300     19.83584    162.3917      12.88190\n3    Ywangan   484.5215 260.5734     11.93591    120.2856       4.41465\n4   Pinlaung   231.6499 541.7189     28.54454    249.4903      13.76255\n5     Mabein   449.4903 708.6423     72.75255    392.6089      16.45042\n6      Kalaw   280.7624 611.6204     42.06478    408.7951      29.63160\n7      Pekon   318.6118 535.8494     39.83270    214.8476      18.97032\n8   Lawksawk   387.1017 630.0035     31.51366    320.5686      21.76677\n9  Nawnghkio   349.3359 547.9456     38.44960    323.0201      15.76465\n10   Kyaukme   210.9548 601.1773     39.58267    372.4930      30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below.\n\n\nShow the code\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n\n               TS.x RADIO_PR.x  TV_PR.x LLPHONE_PR.x MPHONE_PR.x COMPUTER_PR.x\nMongmit     Mongmit   286.1852 554.1313     35.30618    260.6944      12.15939\nPindaya     Pindaya   417.4647 505.1300     19.83584    162.3917      12.88190\nYwangan     Ywangan   484.5215 260.5734     11.93591    120.2856       4.41465\nPinlaung   Pinlaung   231.6499 541.7189     28.54454    249.4903      13.76255\nMabein       Mabein   449.4903 708.6423     72.75255    392.6089      16.45042\nKalaw         Kalaw   280.7624 611.6204     42.06478    408.7951      29.63160\nPekon         Pekon   318.6118 535.8494     39.83270    214.8476      18.97032\nLawksawk   Lawksawk   387.1017 630.0035     31.51366    320.5686      21.76677\nNawnghkio Nawnghkio   349.3359 547.9456     38.44960    323.0201      15.76465\nKyaukme     Kyaukme   210.9548 601.1773     39.58267    372.4930      30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\n\nShow the code\nshan_ict <- dplyr::select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n\n          RADIO_PR.x  TV_PR.x LLPHONE_PR.x MPHONE_PR.x COMPUTER_PR.x\nMongmit     286.1852 554.1313     35.30618    260.6944      12.15939\nPindaya     417.4647 505.1300     19.83584    162.3917      12.88190\nYwangan     484.5215 260.5734     11.93591    120.2856       4.41465\nPinlaung    231.6499 541.7189     28.54454    249.4903      13.76255\nMabein      449.4903 708.6423     72.75255    392.6089      16.45042\nKalaw       280.7624 611.6204     42.06478    408.7951      29.63160\nPekon       318.6118 535.8494     39.83270    214.8476      18.97032\nLawksawk    387.1017 630.0035     31.51366    320.5686      21.76677\nNawnghkio   349.3359 547.9456     38.44960    323.0201      15.76465\nKyaukme     210.9548 601.1773     39.58267    372.4930      30.94709"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-standardisation",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-standardisation",
    "title": "Hands-on Exercise 9",
    "section": "Data Standardisation",
    "text": "Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\nMin-Max Standardisation\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\n\nShow the code\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n\n   RADIO_PR.x        TV_PR.x        LLPHONE_PR.x     MPHONE_PR.x    \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n COMPUTER_PR.x    \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\nI also want to rename the columns to get rid of the “.x” for my own convenience:\n\n\nShow the code\nnames(shan_ict.std) <- gsub(\"\\\\.x$\", \"\", names(shan_ict.std))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#z-score-standardisation",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#z-score-standardisation",
    "title": "Hands-on Exercise 9",
    "section": "Z-score standardisation",
    "text": "Z-score standardisation\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\n\nShow the code\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n\n              vars  n mean sd median trimmed  mad   min  max range  skew\nRADIO_PR.x       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48\nTV_PR.x          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38\nLLPHONE_PR.x     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37\nMPHONE_PR.x      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48\nCOMPUTER_PR.x    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80\n              kurtosis   se\nRADIO_PR.x       -0.27 0.13\nTV_PR.x          -0.23 0.13\nLLPHONE_PR.x      1.49 0.13\nMPHONE_PR.x      -0.34 0.13\nCOMPUTER_PR.x     2.96 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\n\n\n\n\n\n\nWarning:\n\n\n\nZ-score standardisation method should only be used if we would assume all variables come from some normal distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visualising-the-standardised-clustering-variables",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visualising-the-standardised-clustering-variables",
    "title": "Hands-on Exercise 9",
    "section": "Visualising the standardised clustering variables",
    "text": "Visualising the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\n\nShow the code\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR.x`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nIt follows a mostly normal distribution.\n\n\nShow the code\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR.x`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-proximity-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-proximity-matrix",
    "title": "Hands-on Exercise 9",
    "section": "Computing proximity matrix",
    "text": "Computing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\n\nShow the code\nproxmat <- dist(shan_ict, method = 'euclidean')\n\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\n\nShow the code\nproxmat"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-hierarchical-clustering",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-hierarchical-clustering",
    "title": "Hands-on Exercise 9",
    "section": "Computing hierarchical clustering",
    "text": "Computing hierarchical clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\n\nShow the code\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\n\nShow the code\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\nSelecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\n\nShow the code\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\nDetermining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\nGap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\n\nShow the code\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\n\nShow the code\nfviz_gap_stat(gap_stat)\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\n\n\n\n\n\n\nNote\n\n\n\nIn addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\n\nInterpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\n\nShow the code\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\nVisually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\nTransforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\n\nShow the code\nshan_ict_mat <- data.matrix(shan_ict)\n\n\n\n\nPlotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\n\nShow the code\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\n\nMapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\n\nShow the code\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\n\nShow the code\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\n\nShow the code\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Hands-on Exercise 9",
    "section": "Spatially Constrained Clustering: ClustGeo Method",
    "text": "Spatially Constrained Clustering: ClustGeo Method\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\nA short note about ClustGeo package\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\nWard-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\n\nShow the code\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\nMapping the clusters formed\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\n\nShow the code\ngroups <- as.factor(cutree(nongeo_cluster, k=6))\nshan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nSpatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\n\nShow the code\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\n\nShow the code\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\n\nShow the code\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\n\nNext, cutree() is used to derive the cluster objecct.\n\n\nShow the code\ngroups <- as.factor(cutree(clustG, k=6))\n\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\n\nShow the code\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\n\nShow the code\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visual-interpretation-of-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visual-interpretation-of-clusters",
    "title": "Hands-on Exercise 9",
    "section": "Visual Interpretation of Clusters",
    "text": "Visual Interpretation of Clusters\n\nVisualising individual clustering variable\nCode chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\n\nShow the code\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR.x)) +\n  geom_boxplot()\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\nMultivariate Visualisation\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\n\nShow the code\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\n\nShow the code\nshan_sf_ngeo_cluster %>% \n  st_set_geometry(NULL) %>%\n  group_by(CLUSTER) %>%\n  summarise(mean_RADIO_PR = mean(RADIO_PR.x),\n            mean_TV_PR = mean(TV_PR.x),\n            mean_LLPHONE_PR = mean(LLPHONE_PR.x),\n            mean_MPHONE_PR = mean(MPHONE_PR.x),\n            mean_COMPUTER_PR = mean(COMPUTER_PR.x))\n\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  <chr>           <dbl>      <dbl>           <dbl>          <dbl>\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR <dbl>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#importing-aspatial-data",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#importing-aspatial-data",
    "title": "In-class Exercise 8",
    "section": "Importing Aspatial Data",
    "text": "Importing Aspatial Data\n\n\nShow the code\nict <- read_csv(\"data/aspatial/Shan-ICT.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#derivation-of-new-variables",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#derivation-of-new-variables",
    "title": "In-class Exercise 8",
    "section": "Derivation of New Variables",
    "text": "Derivation of New Variables\n\n\nShow the code\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`)\n\n\nWe can also check the summary statistics of ict_derived\n\n\nShow the code\nsummary(ict_derived)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#eda-using-statistical-graphics",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#eda-using-statistical-graphics",
    "title": "In-class Exercise 8",
    "section": "EDA Using Statistical Graphics",
    "text": "EDA Using Statistical Graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\n\nShow the code\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\n\nShow the code\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\n\nShow the code\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\nShow the code\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\n\nShow the code\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\n\nShow the code\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\nShow the code\nshan_sf <- left_join(shan_sf, \n                     ict_derived,\n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\n\n\nShow the code\nshan_sf <- read_rds(\"data/rds/shan_sf.rds\")\n\n\nNote: if you use st_join, both files need to be spatial\n\n\nShow the code\n# correlogram and corplt --> similar to scatter plot but uses elipses\n# shape of elipse; rounded = less correlated, narrow = highly correlated\n# blue = positive, erd = negative\n\n#returns a matrix\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\nExtracting clustering variables\n\n\nShow the code\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\",\"TV_PR\",\"LLPHONE_PR\", \"MPHONE_PR\",\n         \"COMPUTER_PR\")\n\nhead(cluster_vars, 10)\n\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nShow the code\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n\n   RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1  286.1852 554.1313   35.30618  260.6944    12.15939\n2  417.4647 505.1300   19.83584  162.3917    12.88190\n3  484.5215 260.5734   11.93591  120.2856     4.41465\n4  231.6499 541.7189   28.54454  249.4903    13.76255\n5  449.4903 708.6423   72.75255  392.6089    16.45042\n6  280.7624 611.6204   42.06478  408.7951    29.63160\n7  318.6118 535.8494   39.83270  214.8476    18.97032\n8  387.1017 630.0035   31.51366  320.5686    21.76677\n9  349.3359 547.9456   38.44960  323.0201    15.76465\n10 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nShow the code\nwrite_rds(shan_ict, \"data/rds/shan_ict.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#min-max",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#min-max",
    "title": "In-class Exercise 8",
    "section": "Min-Max",
    "text": "Min-Max\n\n\nShow the code\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#z-score",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#z-score",
    "title": "In-class Exercise 8",
    "section": "Z-score",
    "text": "Z-score\n\n\nShow the code\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#visualising-the-standardised-clustering-variables",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#visualising-the-standardised-clustering-variables",
    "title": "In-class Exercise 8",
    "section": "Visualising the standardised clustering variables",
    "text": "Visualising the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\n\nShow the code\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\nShow the code\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#computing-proximity-matrix",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#computing-proximity-matrix",
    "title": "In-class Exercise 8",
    "section": "Computing proximity matrix",
    "text": "Computing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\n\nShow the code\nproxmat <- dist(shan_ict, method = 'euclidean')\n\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\n\nShow the code\nproxmat\n\n\n           1         2         3         4         5         6         7\n2  171.86828                                                            \n3  381.88259 257.31610                                                  \n4   57.46286 208.63519 400.05492                                        \n5  263.37099 313.45776 529.14689 312.66966                              \n6  160.05997 302.51785 499.53297 181.96406 198.14085                    \n7   59.61977 117.91580 336.50410  94.61225 282.26877 211.91531          \n8  140.11550 204.32952 432.16535 192.57320 130.36525 140.01101 157.51129\n9   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787 113.15370\n10 144.02475 311.01487 505.89191 139.67966 264.88283  79.42225 202.12206\n11 563.01629 704.11252 899.44137 571.58335 453.27410 412.46033 614.56144\n12 141.87227 298.61288 491.83321 101.10150 345.00222 197.34633 182.23667\n13 115.86190 258.49346 422.71934  64.52387 358.86053 200.34668 151.60031\n14 434.92968 437.99577 397.03752 398.11227 693.24602 562.59200 416.00669\n15  97.61092 212.81775 360.11861  78.07733 340.55064 204.93018 114.98048\n16 192.67961 283.35574 361.23257 163.42143 425.16902 267.87522 208.14888\n17 256.72744 287.41816 333.12853 220.56339 516.40426 386.74701 242.52301\n18 503.61965 481.71125 364.98429 476.29056 747.17454 625.24500 480.23965\n19 251.29457 398.98167 602.17475 262.51735 231.28227 106.69059 303.80011\n20 193.32063 335.72896 483.68125 192.78316 301.52942 114.69105 243.30037\n21 401.25041 354.39039 255.22031 382.40610 637.53975 537.63884 368.25761\n22 529.63213 635.51774 807.44220 555.01039 365.32538 373.64459 573.39528\n23 406.15714 474.50209 452.95769 371.26895 630.34312 463.53759 416.84901\n24 349.45980 391.74783 408.97731 305.86058 610.30557 465.52013 342.08722\n25 118.18050 245.98884 388.63147  76.55260 366.42787 212.36711 145.37542\n26 214.20854 314.71506 432.98028 160.44703 470.48135 317.96188 225.64279\n27 242.54541 402.21719 542.85957 217.58854 384.91867 195.18913 293.70625\n28 104.91839 275.44246 472.77637  85.49572 287.92364 124.30500 160.37607\n29 568.27732 726.85355 908.82520 563.81750 520.67373 427.77791 624.82399\n30 272.67383 428.24958 556.82263 244.47146 418.54016 224.03998 321.81214\n31 179.62251 225.40822 444.66868 170.04533 366.16094 307.27427 165.02707\n32 177.76325 221.30579 367.44835 222.20020 212.69450 167.08436 190.93173\n33 403.39082 500.86933 528.12533 365.44693 613.51206 444.75859 421.48797\n34 265.12574 310.64850 337.94020 229.75261 518.16310 375.64739 259.68288\n35 136.93111 223.06050 352.85844  98.14855 398.00917 264.16294 138.86577\n36  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782 139.31874\n37 131.49728 172.00796 342.91035 111.61846 381.20187 287.11074 105.30573\n38 384.30076 549.42389 728.16301 372.59678 406.09124 260.26411 441.20998\n39 189.37188 337.98982 534.44679 204.47572 213.61240  38.52842 243.98001\n40 224.12169 355.47066 531.63089 194.76257 396.61508 273.01375 249.36301\n41 281.05362 443.26362 596.19312 265.96924 368.55167 185.14704 336.38582\n42 386.02794 543.81859 714.43173 382.78835 379.56035 246.39577 442.77120\n43 246.45691 385.68322 573.23173 263.48638 219.47071  88.29335 297.67761\n44 164.26299 323.28133 507.78892 168.44228 253.84371  67.19580 219.21623\n45 109.15790 198.35391 340.42789  80.86834 367.19820 237.34578 113.84636\n46 399.84278 503.75471 697.98323 429.54386 226.24011 252.26066 440.66133\n47 381.51246 512.13162 580.13146 356.37963 523.44632 338.35194 423.81347\n48 202.92551 175.54012 287.29358 189.47065 442.07679 360.17247 162.43575\n49 145.48666 293.61143 469.51621  91.56527 375.06406 217.19877 181.94596\n50 430.64070 402.42888 306.16379 405.83081 674.01120 560.16577 403.82131\n51 309.51302 475.93982 630.71590 286.03834 411.88352 233.56349 363.58788\n52 173.50424 318.23811 449.67218 141.58836 375.82140 197.63683 213.46379\n53 214.21738 332.92193 570.56521 235.55497 193.49994 173.43078 248.43910\n54 195.92520 208.43740 324.77002 169.50567 448.59948 348.06617 167.79937\n55 237.78494 228.41073 286.16305 214.33352 488.33873 385.88676 207.16559\n           8         9        10        11        12        13        14\n2                                                                       \n3                                                                       \n4                                                                       \n5                                                                       \n6                                                                       \n7                                                                       \n8                                                                       \n9   90.82891                                                            \n10 186.29066 157.04230                                                  \n11 510.13288 533.68806 434.75768                                        \n12 246.74469 211.88187 128.24979 526.65211                              \n13 241.71260 182.21245 142.45669 571.97975 100.53457                    \n14 567.52693 495.15047 512.02846 926.93007 429.96554 374.50873          \n15 224.64646 147.44053 170.93318 592.90743 144.67198  91.15307 364.95519\n16 311.07742 225.81118 229.28509 634.71074 212.07320 131.67061 313.35220\n17 391.26989 319.57938 339.27780 763.91399 264.13364 203.23607 178.70499\n18 625.18712 546.69447 586.05094 995.66496 522.96309 456.00842 133.29995\n19 220.75270 230.55346 129.95255 313.15288 238.64533 270.86983 638.60773\n20 228.54223 172.84425 110.37831 447.49969 210.76951 178.09554 509.99632\n21 515.39711 444.05061 505.52285 929.11283 443.25453 376.33870 147.83545\n22 441.82621 470.45533 429.15493 221.19950 549.08985 563.95232 919.38755\n23 523.69580 435.59661 420.30003 770.40234 392.32592 329.31700 273.75350\n24 487.41102 414.10280 409.03553 816.44931 324.97428 275.76855 115.58388\n25 249.35081 176.09570 163.95741 591.03355 128.42987  52.68195 351.34601\n26 352.31496 289.83220 253.25370 663.76026 158.93517 125.25968 275.09705\n27 314.64777 257.76465 146.09228 451.82530 185.99082 188.29603 485.52853\n28 188.78869 151.13185  60.32773 489.35308  78.78999  92.79567 462.41938\n29 548.83928 552.65554 428.74978 149.26996 507.39700 551.56800 882.51110\n30 345.91486 287.10769 175.35273 460.24292 214.19291 204.25746 484.14757\n31 260.95300 257.52713 270.87277 659.16927 185.86794 209.35473 427.95451\n32 142.31691  93.03711 217.64419 539.43485 293.22640 253.26470 536.71695\n33 520.31264 439.34272 393.79911 704.86973 351.75354 328.82831 339.01411\n34 396.47081 316.14719 330.28984 744.44948 272.82761 202.99615 194.31049\n35 274.91604 204.88286 218.84211 648.68011 157.48857  91.53795 302.84362\n36 104.17830  43.26545 126.50414 505.88581 201.71653 169.63695 502.99026\n37 257.11202 209.88026 250.27059 677.66886 175.89761 142.36728 329.29477\n38 393.18472 381.40808 241.58966 256.80556 315.93218 354.10985 686.88950\n39 171.50398 164.05304  81.20593 381.30567 204.49010 216.81639 582.53670\n40 318.30406 285.04608 215.63037 547.24297 122.68682 202.92529 446.53763\n41 321.16462 279.84188 154.91633 377.44407 230.78652 243.00945 561.24281\n42 379.41126 367.33575 247.81990 238.67060 342.43665 370.05669 706.47792\n43 209.38215 208.29647 136.23356 330.08211 258.23950 272.28711 632.54638\n44 190.30257 156.51662  51.67279 413.64173 160.94435 174.67678 531.08019\n45 242.04063 170.09168 200.77712 633.21624 163.28926  84.11238 332.07962\n46 304.96838 344.79200 312.60547 250.81471 425.36916 448.55282 810.74692\n47 453.02765 381.67478 308.31407 541.97887 351.78203 312.13429 500.68857\n48 317.74604 267.21607 328.14177 757.16745 255.83275 210.50453 278.85535\n49 265.29318 219.26405 146.92675 560.43400  59.69478  58.41263 388.73386\n50 551.13000 475.77296 522.86003 941.49778 458.30232 391.54062 109.08779\n51 363.37684 323.32123 188.59489 389.59919 229.71502 260.39387 558.83162\n52 278.68953 206.15773 145.00266 533.00162 142.03682 110.55197 398.43973\n53 179.07229 220.61209 181.55295 422.37358 211.99976 275.77546 620.04321\n54 323.14701 269.07880 306.78359 736.93741 224.29176 180.37471 262.66006\n55 362.84062 299.74967 347.85944 778.52971 273.79672 218.10003 215.19289\n          15        16        17        18        19        20        21\n2                                                                       \n3                                                                       \n4                                                                       \n5                                                                       \n6                                                                       \n7                                                                       \n8                                                                       \n9                                                                       \n10                                                                      \n11                                                                      \n12                                                                      \n13                                                                      \n14                                                                      \n15                                                                      \n16 107.06341                                                            \n17 188.94166 159.79790                                                  \n18 428.96133 365.50032 262.84016                                        \n19 289.82513 347.11584 466.36472 708.65819                              \n20 185.18173 200.31803 346.39710 563.56780 172.33279                    \n21 340.86349 303.04574 186.95158 135.51424 628.11049 494.81014          \n22 568.99109 608.76740 750.29555 967.14087 311.95286 411.03849 890.12935\n23 314.27683 215.97925 248.82845 285.65085 525.63854 371.13393 312.05193\n24 273.91673 223.22828 104.98924 222.60577 534.44463 412.17123 203.02855\n25  51.46282  90.69766 177.33790 423.77868 290.86435 179.52054 344.45451\n26 154.32012 150.98053 127.35225 375.60376 377.86793 283.30992 313.59911\n27 204.69232 206.57001 335.61300 552.31959 214.23677 131.59966 501.59903\n28 130.04549 199.58124 288.55962 542.16609 184.47950 144.77393 458.06573\n29 580.38112 604.66190 732.68347 954.11795 334.65738 435.58047 903.72094\n30 228.33583 210.77938 343.30638 548.40662 236.72516 140.23910 506.29940\n31 225.28268 308.71751 278.02761 525.04057 365.88437 352.91394 416.65397\n32 206.61627 258.04282 370.01575 568.21089 262.09281 187.85699 470.46845\n33 310.60810 248.25265 287.87384 380.92091 485.51312 365.87588 392.40306\n34 182.75266 119.86993  65.38727 257.18572 454.52548 318.47482 201.65224\n35  73.45899 106.21031 124.62791 379.37916 345.31042 239.43845 291.84351\n36 152.15482 219.72196 327.13541 557.32112 201.58191 137.29734 460.91883\n37 128.21054 194.64317 162.27126 411.59788 369.00833 295.87811 304.02806\n38 388.40984 411.06668 535.28615 761.48327 179.95877 253.20001 708.17595\n39 229.37894 286.75945 408.23212 648.04408  79.41836 120.66550 564.64051\n40 204.54010 270.02165 299.36066 539.91284 295.23103 288.03320 468.27436\n41 263.31986 273.50305 408.73288 626.17673 170.63913 135.62913 573.55355\n42 392.48568 414.53594 550.62819 771.39688 173.27153 240.34131 715.42102\n43 279.19573 329.38387 460.39706 692.74693  59.85893 142.21554 613.01033\n44 180.51419 236.70878 358.95672 597.42714 115.18145  94.98486 518.86151\n45  62.60859 107.04894 154.86049 400.71816 325.71557 216.25326 308.13805\n46 450.33382 508.40925 635.94105 866.21117 195.14541 319.81385 778.45810\n47 321.80465 257.50434 394.07696 536.95736 362.45608 232.52209 523.43600\n48 184.23422 222.52947 137.79420 352.06533 447.10266 358.89620 233.83079\n49 131.56529 176.16001 224.79239 482.18190 268.92310 207.25000 406.56282\n50 361.82684 310.20581 195.59882  81.75337 646.66493 507.96808  59.52318\n51 285.33223 295.60023 414.31237 631.91325 209.33700 194.93467 585.61776\n52 108.84990 114.03609 238.99570 465.03971 255.10832 137.85278 403.66587\n53 281.03383 375.22688 445.78964 700.98284 172.70139 275.15989 601.80824\n54 166.61820 198.88460 109.08506 348.56123 429.84475 340.39128 242.78233\n55 191.32762 196.76188  77.35900 288.66231 472.04024 364.77086 180.09747\n          22        23        24        25        26        27        28\n2                                                                       \n3                                                                       \n4                                                                       \n5                                                                       \n6                                                                       \n7                                                                       \n8                                                                       \n9                                                                       \n10                                                                      \n11                                                                      \n12                                                                      \n13                                                                      \n14                                                                      \n15                                                                      \n16                                                                      \n17                                                                      \n18                                                                      \n19                                                                      \n20                                                                      \n21                                                                      \n22                                                                      \n23 760.29566                                                            \n24 820.50164 217.28718                                                  \n25 576.18780 295.40170 253.80950                                        \n26 677.09508 278.21548 167.98445 121.78922                              \n27 472.95568 331.42618 375.35820 185.99483 247.17708                    \n28 486.77266 398.13308 360.99219 120.24428 201.92690 164.99494          \n29 325.06329 708.82887 769.06406 569.06099 626.44910 404.00848 480.60074\n30 481.31907 316.30314 375.58139 205.04337 256.37933  57.60801 193.36162\n31 659.56458 494.36143 355.99713 229.44658 231.78673 365.03882 217.61884\n32 444.04411 448.40651 462.63265 237.67919 356.84917 291.88846 227.52638\n33 730.92980 158.82353 254.24424 296.74316 268.25060 281.87425 374.70456\n34 727.08969 188.64567 113.80917 168.92101 140.95392 305.57166 287.36626\n35 632.45718 294.40441 212.99485  62.86179 100.45714 244.16253 167.66291\n36 445.81335 427.94086 417.08639 169.92664 286.37238 230.45003 131.18943\n37 658.87060 377.52977 256.70338 136.54610 153.49551 311.98001 193.53779\n38 347.33155 531.46949 574.40292 373.47509 429.00536 216.24705 289.45119\n39 354.90063 474.12297 481.88406 231.48538 331.22632 184.67099 136.45492\n40 595.70536 413.07823 341.68641 205.10051 202.31862 224.43391 183.01388\n41 403.82035 397.85908 451.51070 248.72536 317.64824  78.29342 196.47091\n42 295.91660 536.85519 596.19944 382.79302 455.10875 223.32205 302.89487\n43 295.90429 505.40025 531.35998 284.08582 383.72138 207.58055 193.67980\n44 402.33622 420.65204 428.08061 183.05109 279.52329 134.50170  99.39859\n45 605.02113 311.92379 247.73318  58.55724 137.24737 242.43599 153.59962\n46 150.84117 684.20905 712.80752 462.31183 562.88102 387.33906 365.04897\n47 540.60474 264.64997 407.02947 298.12447 343.53898 187.40057 326.12960\n48 728.87329 374.90376 233.25039 195.17677 190.50609 377.89657 273.02385\n49 573.75476 354.79137 284.76895  98.04789 118.65144 190.26490  94.23028\n50 910.23039 280.26395 181.33894 359.60008 317.15603 503.79786 476.55544\n51 448.79027 401.39475 445.40621 267.10497 312.64797  91.06281 218.49285\n52 532.26397 281.62645 292.49814  90.77517 165.38834 103.91040 128.20940\n53 432.10118 572.76394 522.91815 294.70967 364.40429 296.40789 191.11990\n54 719.84066 348.84991 201.49393 167.69794 144.59626 347.14183 249.70235\n55 754.03913 316.54695 170.90848 194.47928 169.56962 371.71448 294.16284\n          29        30        31        32        33        34        35\n2                                                                       \n3                                                                       \n4                                                                       \n5                                                                       \n6                                                                       \n7                                                                       \n8                                                                       \n9                                                                       \n10                                                                      \n11                                                                      \n12                                                                      \n13                                                                      \n14                                                                      \n15                                                                      \n16                                                                      \n17                                                                      \n18                                                                      \n19                                                                      \n20                                                                      \n21                                                                      \n22                                                                      \n23                                                                      \n24                                                                      \n25                                                                      \n26                                                                      \n27                                                                      \n28                                                                      \n29                                                                      \n30 408.04016                                                            \n31 664.06286 392.97391                                                  \n32 565.84279 315.11651 346.57799                                        \n33 635.92043 274.81900 478.37690 463.39594                              \n34 708.13447 308.33123 321.66441 354.76537 242.02901                    \n35 628.48557 261.51075 206.82668 267.95563 304.49287 134.00139          \n36 520.24345 257.77823 271.41464 103.97300 432.35040 319.32583 209.32532\n37 670.74564 335.52974 131.89940 285.37627 383.49700 199.64389  91.65458\n38 202.55831 217.88123 483.49434 408.03397 468.09747 512.61580 432.31105\n39 391.74585 214.66375 327.41448 200.26876 448.84563 395.58453 286.41193\n40 521.88657 258.49342 233.60474 357.44661 329.11433 309.05385 219.06817\n41 331.67199  92.57672 408.24516 304.26577 348.18522 379.27212 309.77356\n42 196.46063 231.38484 506.32466 379.50202 481.59596 523.74815 444.13246\n43 351.48520 229.85484 385.33554 221.47613 474.82621 442.80821 340.47382\n44 410.41270 167.65920 305.03473 200.27496 386.95022 343.96455 239.63685\n45 619.01766 260.52971 209.64684 232.17823 331.72187 158.90478  43.40665\n46 345.98041 405.59730 518.72748 334.17439 650.56905 621.53039 513.76415\n47 470.63605 157.48757 517.03554 381.95144 263.97576 340.37881 346.00673\n48 749.99415 396.89963 186.90932 328.16234 400.10989 187.43974 136.49038\n49 535.57527 207.94433 194.24075 296.99681 334.19820 231.99959 124.74445\n50 907.38406 504.75214 448.58230 502.20840 366.66876 200.48082 310.58885\n51 326.19219 108.37735 413.26052 358.17599 329.39338 387.80686 323.35704\n52 500.41640 123.18870 296.43996 250.74435 253.74202 212.59619 145.15617\n53 454.80044 336.16703 262.24331 285.56475 522.38580 455.59190 326.59925\n54 722.40954 364.76893 178.69483 335.26416 367.46064 161.67411 106.82328\n55 760.45960 385.65526 240.95555 352.70492 352.20115 130.23777 132.70541\n          36        37        38        39        40        41        42\n2                                                                       \n3                                                                       \n4                                                                       \n5                                                                       \n6                                                                       \n7                                                                       \n8                                                                       \n9                                                                       \n10                                                                      \n11                                                                      \n12                                                                      \n13                                                                      \n14                                                                      \n15                                                                      \n16                                                                      \n17                                                                      \n18                                                                      \n19                                                                      \n20                                                                      \n21                                                                      \n22                                                                      \n23                                                                      \n24                                                                      \n25                                                                      \n26                                                                      \n27                                                                      \n28                                                                      \n29                                                                      \n30                                                                      \n31                                                                      \n32                                                                      \n33                                                                      \n34                                                                      \n35                                                                      \n36                                                                      \n37 225.80242                                                            \n38 347.60273 478.66210                                                  \n39 130.86310 312.74375 226.82048                                        \n40 285.13095 231.85967 346.46200 276.19175                              \n41 247.19891 370.01334 147.02444 162.80878 271.34451                    \n42 333.32428 492.09476  77.21355 212.11323 375.73885 146.18632          \n43 177.75714 370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\n44 128.26577 276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\n45 173.82799  97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\n46 325.09619 528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\n47 352.92324 433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\n48 288.06872  84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\n49 206.40432 158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\n50 488.79874 334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\n51 294.29500 382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\n52 189.97131 220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\n53 218.12104 309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\n54 284.14692  70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\n55 315.91750 125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n          43        44        45        46        47        48        49\n2                                                                       \n3                                                                       \n4                                                                       \n5                                                                       \n6                                                                       \n7                                                                       \n8                                                                       \n9                                                                       \n10                                                                      \n11                                                                      \n12                                                                      \n13                                                                      \n14                                                                      \n15                                                                      \n16                                                                      \n17                                                                      \n18                                                                      \n19                                                                      \n20                                                                      \n21                                                                      \n22                                                                      \n23                                                                      \n24                                                                      \n25                                                                      \n26                                                                      \n27                                                                      \n28                                                                      \n29                                                                      \n30                                                                      \n31                                                                      \n32                                                                      \n33                                                                      \n34                                                                      \n35                                                                      \n36                                                                      \n37                                                                      \n38                                                                      \n39                                                                      \n40                                                                      \n41                                                                      \n42                                                                      \n43                                                                      \n44 107.16213                                                            \n45 316.91914 221.84918                                                  \n46 186.28225 288.27478 486.91951                                        \n47 337.48335 295.38434 343.38498 497.61245                              \n48 444.26274 350.91512 146.61572 599.57407 476.62610                    \n49 282.22935 184.10672 131.55208 455.91617 331.69981 232.32965          \n50 631.99123 535.95620 330.76503 803.08034 510.79265 272.03299 419.06087\n51 217.08047 175.35413 323.95988 374.58247 225.25026 453.86726 246.76592\n52 245.95083 146.38284 146.78891 429.98509 229.09986 278.95182 130.39336\n53 203.87199 186.11584 312.85089 287.73864 475.33116 387.71518 261.75211\n54 429.95076 332.02048 127.42203 592.65262 447.05580  47.79331 196.60826\n55 466.20497 368.20978 153.22576 631.49232 448.58030  68.67929 242.15271\n          50        51        52        53        54\n2                                                   \n3                                                   \n4                                                   \n5                                                   \n6                                                   \n7                                                   \n8                                                   \n9                                                   \n10                                                  \n11                                                  \n12                                                  \n13                                                  \n14                                                  \n15                                                  \n16                                                  \n17                                                  \n18                                                  \n19                                                  \n20                                                  \n21                                                  \n22                                                  \n23                                                  \n24                                                  \n25                                                  \n26                                                  \n27                                                  \n28                                                  \n29                                                  \n30                                                  \n31                                                  \n32                                                  \n33                                                  \n34                                                  \n35                                                  \n36                                                  \n37                                                  \n38                                                  \n39                                                  \n40                                                  \n41                                                  \n42                                                  \n43                                                  \n44                                                  \n45                                                  \n46                                                  \n47                                                  \n48                                                  \n49                                                  \n50                                                  \n51 585.70558                                        \n52 410.49230 188.89405                              \n53 629.43339 304.21734 295.35984                    \n54 271.82672 421.06366 249.74161 377.52279          \n55 210.48485 450.97869 270.79121 430.02019  63.67613"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#computing-hierarchical-clustering",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#computing-hierarchical-clustering",
    "title": "In-class Exercise 8",
    "section": "Computing hierarchical clustering",
    "text": "Computing hierarchical clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\n\nShow the code\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\n\nShow the code\nplot(hclust_ward, cex = 0.6)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#selecting-the-optimal-clustering-algorithm",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#selecting-the-optimal-clustering-algorithm",
    "title": "In-class Exercise 8",
    "section": "Selecting the optimal clustering algorithm",
    "text": "Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\n\nShow the code\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#optimising-clusters",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#optimising-clusters",
    "title": "In-class Exercise 8",
    "section": "Optimising Clusters",
    "text": "Optimising Clusters\n\n\nShow the code\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nNote: look at gap\nNote: Local optimisation, not global. There are multiple optimisation. Choose according to your needs. In this case, the optimal number of clusters is 6.\n\n\nShow the code\nfviz_gap_stat(gap_stat)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#interpreting-dendograms",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#interpreting-dendograms",
    "title": "In-class Exercise 8",
    "section": "Interpreting dendograms",
    "text": "Interpreting dendograms\n\n\nShow the code\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#visually-driven-hierarchical-clustering-analysis",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#visually-driven-hierarchical-clustering-analysis",
    "title": "In-class Exercise 8",
    "section": "Visually-driven hierarchical clustering analysis",
    "text": "Visually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\nTransforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\n\nShow the code\nshan_ict_mat <- data.matrix(shan_ict)\n\n\n\n\nPlotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\n\nShow the code\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#mapping-the-clusters-formed",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#mapping-the-clusters-formed",
    "title": "In-class Exercise 8",
    "section": "Mapping the clusters formed",
    "text": "Mapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\n\nShow the code\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\n\nShow the code\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\n\nShow the code\nqtm(shan_sf_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#computing-neighbours-list",
    "href": "In-class_Ex/In-class_Ex08/In_class_Ex08.html#computing-neighbours-list",
    "title": "In-class Exercise 8",
    "section": "Computing neighbours list",
    "text": "Computing neighbours list\n\n\nShow the code\nshan.nb <- poly2nb(shan_sf)\nsummary(shan.nb)\n\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\n\nShow the code\nplot(st_geometry(shan_sf),\n     border=grey(.5))\n\npts = st_coordinates(st_centroid(shan_sf)) # create the centroid circles\nplot(shan.nb,\n     pts,\n     col=\"blue\",\n     add= TRUE)\n\n\n\n\n\nNote: can continue using pts since it’s saved into environment\nAll the same as Hands-on Exercise 9"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "You can click here for my work"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#datasets-used",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#datasets-used",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Datasets Used",
    "text": "Datasets Used\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#installing-packages",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#installing-packages",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Installing Packages",
    "text": "Installing Packages\nThe following packages will be used for this analysis:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for calibrating geographical weighted family of models\n\nGWmodel\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\n\nShow the code\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, ggstatsplot)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#importing-geospatial-datasets",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#importing-geospatial-datasets",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Importing geospatial datasets",
    "text": "Importing geospatial datasets\n\n\nShow the code\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe notice that it is in WGS84 instead of SVY21. We can correct it using the following:\n\n\nShow the code\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\n\nWe may now check if the CRS is correct.\n\n\nShow the code\nst_crs(mpsz_svy21)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nWe can also show the extent of mpsz by using st_bbox() of the sf package:\n\n\nShow the code\nst_bbox(mpsz_svy21) #view extent\n\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#importing-aspatial-datasets",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#importing-aspatial-datasets",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Importing Aspatial Datasets",
    "text": "Importing Aspatial Datasets\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\n\nShow the code\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\n\nShow the code\nglimpse(condo_resale)\n\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n\nShow the code\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\n\nShow the code\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\n\nShow the code\nsummary(condo_resale)\n\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\nConverting aspatial dataframe into an sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\n\nShow the code\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\n\nShow the code\nhead(condo_resale.sf)\n\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     <dbl>         <dbl>    <dbl> <dbl>    <dbl>          <dbl>            <dbl>\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA <dbl>, PROX_HAWKER_MARKET <dbl>,\n#   PROX_KINDERGARTEN <dbl>, PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#eda-using-statistical-graphics",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#eda-using-statistical-graphics",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "EDA using statistical graphics",
    "text": "EDA using statistical graphics\n\n\nShow the code\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\n\nShow the code\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\nNow, we can plot the logged selling price.\n\n\nShow the code\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\nIt is now slightly less skewed than previously."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#multiple-histogram-plots-distribution-of-variables",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#multiple-histogram-plots-distribution-of-variables",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Multiple Histogram Plots distribution of variables",
    "text": "Multiple Histogram Plots distribution of variables\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\n\nShow the code\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\nDrawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\n\nShow the code\ntmap_mode(\"view\")\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\nNow, I will create an interactive viewing map:\n\n\nShow the code\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\ntm_dots() is used instead of tm_bubbles\n\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nNow turn the R display into plot mode.\n\n\nShow the code\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#building-fixed-bandwidth-gwr-model",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#building-fixed-bandwidth-gwr-model",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Building Fixed Bandwidth GWR Model",
    "text": "Building Fixed Bandwidth GWR Model\n\nComputing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\n\nShow the code\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres. It’s in metres because that’s the unit of measurement SVY21 is in.\n\n\nGWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\n\nShow the code\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\n\nShow the code\ngwr.fixed\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 11:29:09.01344 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 11:29:10.153513 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#building-adaptive-bandwith-gwr-model",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#building-adaptive-bandwith-gwr-model",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Building Adaptive Bandwith GWR Model",
    "text": "Building Adaptive Bandwith GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\nComputing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\n\nShow the code\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\nConstructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\n\nShow the code\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\nThe code below can be used to display the model output.\n\n\nShow the code\ngwr.adaptive\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 11:29:18.179672 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 11:29:19.845522 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\nIt’s better than non-spatial as it has a higher adjusted R squared (i.e. able to explain the variance better)\nIt also has a greater AICC."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#visualising-gwr-output",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#visualising-gwr-output",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Visualising GWR Output",
    "text": "Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#converting-sdf-into-sf-dataframe",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#converting-sdf-into-sf-dataframe",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Converting SDF into sf dataframe",
    "text": "Converting SDF into sf dataframe\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\n\nShow the code\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\n\n\nShow the code\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\n\nShow the code\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\n\nShow the code\nglimpse(condo_resale.sf.adaptive)\n\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\n\nShow the code\nsummary(gwr.adaptive$SDF$yhat)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#visualising-local-r2",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#visualising-local-r2",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Visualising local R2",
    "text": "Visualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#visualising-coefficient-estimates",
    "href": "In-class_Ex/In-class_Ex09/In_class_Ex09.html#visualising-coefficient-estimates",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR",
    "section": "Visualising coefficient estimates",
    "text": "Visualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\n\nShow the code\ntmap_mode(\"view\")\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\n\nBy URA Planning Region\n\n\nShow the code\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html",
    "title": "Hands-on Exercise 11",
    "section": "",
    "text": "Predictive modelling uses statistical learning or machine learning techniques to predict outcomes. By and large, the event one wants to predict is in the future. However, a set of known outcome and predictors (also known as variables) will be used to calibrate the predictive models.\nGeospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. When geographically referenced data are used, occurrences of events are neither uniform nor random in distribution over space. There are geospatial factors (infrastructure, sociocultural, topographic, etc.) that constrain and influence where the locations of events occur. Geospatial predictive modeling attempts to describe those constraints and influences by spatially correlating occurrences of historical geospatial locations with environmental factors that represent those constraints and influences.\n\n\nIn this in-class exercise, you will learn how to build predictive model by using geographical random forest method. By the end of this hands-on exercise, you will acquire the skills of:\n\npreparing training and test data sets by using appropriate data sampling methods,\ncalibrating predictive models by using both geospatial statistical learning and machine learning methods,\ncomparing and selecting the best model for predicting the future outcome,\npredicting the future outcomes by using the best model calibrated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#the-data",
    "title": "Hands-on Exercise 11",
    "section": "The Data",
    "text": "The Data\n\nAspatial dataset:\n\nHDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg.\n\nGeospatial dataset:\n\nMP14_SUBZONE_WEB_PL: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg\n\nLocational factors with geographic coordinates:\n\nDownloaded from Data.gov.sg.\n\nEldercare data is a list of eldercare in Singapore. It is in shapefile format.\nHawker Centre data is a list of hawker centres in Singapore. It is in geojson format.\nParks data is a list of parks in Singapore. It is in geojson format.\nSupermarket data is a list of supermarkets in Singapore. It is in geojson format.\nCHAS clinics data is a list of CHAS clinics in Singapore. It is in geojson format.\nChildcare service data is a list of childcare services in Singapore. It is in geojson format.\nKindergartens data is a list of kindergartens in Singapore. It is in geojson format.\n\nDownloaded from Datamall.lta.gov.sg.\n\nMRT data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.\nBus stops data is a list of bus stops in Singapore. It is in shapefile format.\n\n\nLocational factors without geographic coordinates:\n\nDownloaded from Data.gov.sg.\n\nPrimary school data is extracted from the list on General information of schools from data.gov portal. It is in csv format.\n\nRetrieved/Scraped from other sources\n\nCBD coordinates obtained from Google.\nShopping malls data is a list of Shopping malls in Singapore obtained from Wikipedia.\nGood primary schools is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at Local Salary Forum."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 11",
    "section": "Installing and Loading R packages",
    "text": "Installing and Loading R packages\nThis code chunk performs 3 tasks:\n\nA list called packages will be created and will consists of all the R packages required to accomplish this exercise.\nCheck if R packages on package have been installed in R and if not, they will be installed.\nAfter all the R packages have been installed, they will be loaded.\n\n\n\nShow the code\npacman::p_load(sf, spdep, GWmodel, SpatialML,                 tmap, rsample, Metrics, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#reading-data-into-rds",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#reading-data-into-rds",
    "title": "Hands-on Exercise 11",
    "section": "Reading Data into RDS",
    "text": "Reading Data into RDS\nReading the input data sets. It is in simple feature data frame.\n\n\nShow the code\nmdata <- read_rds(\"data/aspatial/mdata.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#data-sampling",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#data-sampling",
    "title": "Hands-on Exercise 11",
    "section": "Data Sampling",
    "text": "Data Sampling\nThe entire data are split into training and test data sets with 65% and 35% respectively by using initial_split() of rsample package. rsample is one of the package of tigymodels.\n\n\nShow the code\nset.seed(1234)\nresale_split <- initial_split(mdata, \n                              prop = 6.5/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n\n\n\n\nShow the code\nwrite_rds(train_data, \"data/model/train_data.rds\")\nwrite_rds(test_data, \"data/model/test_data.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#building-a-non-spatial-multiple-linear-regression",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#building-a-non-spatial-multiple-linear-regression",
    "title": "Hands-on Exercise 11",
    "section": "Building a non-spatial multiple linear regression",
    "text": "Building a non-spatial multiple linear regression\n\n\nShow the code\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nsummary(price_mlr)\n\n\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              107601.073  10601.261  10.150  < 2e-16 ***\nfloor_area_sqm             2780.698     90.579  30.699  < 2e-16 ***\nstorey_order              14299.298    339.115  42.167  < 2e-16 ***\nremaining_lease_mths        344.490      4.592  75.027  < 2e-16 ***\nPROX_CBD                 -16930.196    201.254 -84.124  < 2e-16 ***\nPROX_ELDERLYCARE         -14441.025    994.867 -14.516  < 2e-16 ***\nPROX_HAWKER              -19265.648   1273.597 -15.127  < 2e-16 ***\nPROX_MRT                 -32564.272   1744.232 -18.670  < 2e-16 ***\nPROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\nPROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\nPROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\nWITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  < 2e-16 ***\nWITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  < 2e-16 ***\nWITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\nWITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61650 on 10320 degrees of freedom\nMultiple R-squared:  0.7373,    Adjusted R-squared:  0.737 \nF-statistic:  2069 on 14 and 10320 DF,  p-value: < 2.2e-16\n\n\n\n\nShow the code\nwrite_rds(price_mlr, \"data/model/price_mlr.rds\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#gwr-predictive-method",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#gwr-predictive-method",
    "title": "Hands-on Exercise 11",
    "section": "gwr predictive method",
    "text": "gwr predictive method\nIn this section, you will learn how to calibrate a model to predict HDB resale price by using geographically weighted regression method of GWmodel package.\n\nConverting the sf data.frame to SpatialPointDataFrame\n\n\nShow the code\ntrain_data_sp <- as_Spatial(train_data)\ntrain_data_sp\n\n\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n\n\n\n\nComputing adaptive bandwidth\nNext, bw.gwr() of GWmodel package will be used to determine the optimal bandwidth to be used.\n\n\nShow the code\nbw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n\n\n\n\nShow the code\nwrite_rds(bw_adaptive, \"data/model/bw_adaptive.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex11/data/geospatial/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#constructing-the-adaptive-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#constructing-the-adaptive-bandwidth-gwr-model",
    "title": "Hands-on Exercise 11",
    "section": "Constructing the adaptive bandwidth gwr model",
    "text": "Constructing the adaptive bandwidth gwr model\nFirst, let us call the save bandwidth by using the code chunk below.\n\n\nShow the code\nbw_adaptive <- read_rds(\"data/model/bw_adaptive.rds\")\n\n\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and Gaussian kernel as shown in the code chunk below.\n\n\nShow the code\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n\n\nThe code chunk below will be used to save the model in rds format for future use.\n\n\nShow the code\nwrite_rds(gwr_adaptive, \"data/model/gwr_adaptive.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#retrieve-gwr-output-object",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#retrieve-gwr-output-object",
    "title": "Hands-on Exercise 11",
    "section": "Retrieve gwr output object",
    "text": "Retrieve gwr output object\nThe code chunk below will be used to retrieve the save gwr model object.\n\n\nShow the code\ngwr_adaptive <- read_rds(\"data/model/gwr_adaptive.rds\")\n\n\nThe code below can be used to display the model output.\n\n\nShow the code\ngwr_adaptive\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-17 21:17:00.62871 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 10335\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              107601.073  10601.261  10.150  < 2e-16 ***\n   floor_area_sqm             2780.698     90.579  30.699  < 2e-16 ***\n   storey_order              14299.298    339.115  42.167  < 2e-16 ***\n   remaining_lease_mths        344.490      4.592  75.027  < 2e-16 ***\n   PROX_CBD                 -16930.196    201.254 -84.124  < 2e-16 ***\n   PROX_ELDERLYCARE         -14441.025    994.867 -14.516  < 2e-16 ***\n   PROX_HAWKER              -19265.648   1273.597 -15.127  < 2e-16 ***\n   PROX_MRT                 -32564.272   1744.232 -18.670  < 2e-16 ***\n   PROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\n   PROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\n   PROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\n   WITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  < 2e-16 ***\n   WITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  < 2e-16 ***\n   WITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\n   WITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  < 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61650 on 10320 degrees of freedom\n   Multiple R-squared: 0.7373\n   Adjusted R-squared: 0.737 \n   F-statistic:  2069 on 14 and 10320 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.922202e+13\n   Sigma(hat): 61610.08\n   AIC:  257320.2\n   AICc:  257320.3\n   BIC:  247249\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -3.2478e+08 -4.7727e+05 -8.3004e+03  5.5025e+05\n   floor_area_sqm           -2.8714e+04  1.4475e+03  2.3011e+03  3.3900e+03\n   storey_order              3.3186e+03  8.5899e+03  1.0826e+04  1.3397e+04\n   remaining_lease_mths     -1.4431e+03  2.6063e+02  3.9048e+02  5.2865e+02\n   PROX_CBD                 -1.0837e+07 -5.7697e+04 -1.3787e+04  2.6552e+04\n   PROX_ELDERLYCARE         -3.2195e+07 -4.0643e+04  1.0562e+04  6.1054e+04\n   PROX_HAWKER              -2.3985e+08 -5.1365e+04  3.0026e+03  6.4287e+04\n   PROX_MRT                 -1.1632e+07 -1.0488e+05 -4.9373e+04  5.1037e+03\n   PROX_PARK                -6.5961e+06 -4.8671e+04 -8.8128e+02  5.3498e+04\n   PROX_MALL                -1.8112e+07 -7.4238e+04 -1.3982e+04  4.9779e+04\n   PROX_SUPERMARKET         -4.5761e+06 -6.3461e+04 -1.7429e+04  3.5616e+04\n   WITHIN_350M_KINDERGARTEN -4.1823e+05 -6.0040e+03  9.0209e+01  4.7127e+03\n   WITHIN_350M_CHILDCARE    -1.0273e+05 -2.2375e+03  2.6668e+02  2.6388e+03\n   WITHIN_350M_BUS          -1.1757e+05 -1.4719e+03  1.1626e+02  1.7584e+03\n   WITHIN_1KM_PRISCH        -6.6465e+05 -5.5959e+03  2.6916e+02  5.7500e+03\n                                  Max.\n   Intercept                1.6493e+08\n   floor_area_sqm           5.0907e+04\n   storey_order             2.9537e+04\n   remaining_lease_mths     1.8119e+03\n   PROX_CBD                 2.2411e+07\n   PROX_ELDERLYCARE         8.2444e+07\n   PROX_HAWKER              5.9654e+06\n   PROX_MRT                 2.0189e+08\n   PROX_PARK                1.5188e+07\n   PROX_MALL                1.0443e+07\n   PROX_SUPERMARKET         3.8330e+06\n   WITHIN_350M_KINDERGARTEN 6.6799e+05\n   WITHIN_350M_CHILDCARE    1.0802e+05\n   WITHIN_350M_BUS          3.7313e+04\n   WITHIN_1KM_PRISCH        5.0231e+05\n   ************************Diagnostic information*************************\n   Number of data points: 10335 \n   Effective number of parameters (2trace(S) - trace(S'S)): 1730.101 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 8604.899 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 238871.9 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 237036.9 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 238209.1 \n   Residual sum of squares: 4.829191e+12 \n   R-square value:  0.967657 \n   Adjusted R-square value:  0.9611534 \n\n   ***********************************************************************\n   Program stops at: 2024-03-17 21:21:21.502152"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#converting-the-test-data-from-sf-data.frame-to-spatialpointdataframe",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#converting-the-test-data-from-sf-data.frame-to-spatialpointdataframe",
    "title": "Hands-on Exercise 11",
    "section": "Converting the test data from sf data.frame to SpatialPointDataFrame",
    "text": "Converting the test data from sf data.frame to SpatialPointDataFrame\n\n\nShow the code\ntest_data_sp <- test_data %>%\n  as_Spatial()\ntest_data_sp\n\n\nclass       : SpatialPointsDataFrame \nfeatures    : 5566 \nextent      : 11597.31, 42623.63, 28287.8, 48669.59  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,         PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       230888,             74,            1,                  546, 1.00583660772922, 3.34897933104965e-07, 0.0474019664161957, 0.0414043955932523, 0.0502664084494264, 0.0907500295577619,                0, 4.55547870890763e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1050000,            138,           14,                 1151,  19.632402730488,     3.30163731686804,   2.83106651960209,   2.13060636038504,   2.41313695915468,   10.6169590126272, 2.26056404492346,     0.79249074802552,     1.53786629004208,                        7,                    16, ..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#computing-adaptive-bandwidth-for-the-test-data",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#computing-adaptive-bandwidth-for-the-test-data",
    "title": "Hands-on Exercise 11",
    "section": "Computing adaptive bandwidth for the test data",
    "text": "Computing adaptive bandwidth for the test data\n\n\nShow the code\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#computing-predicted-values-of-the-test-data",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#computing-predicted-values-of-the-test-data",
    "title": "Hands-on Exercise 11",
    "section": "Computing predicted values of the test data",
    "text": "Computing predicted values of the test data\n\n\nShow the code\ngwr_pred <- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw=40, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n\n\nAsk prof"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#extracting-coordinate-data",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#extracting-coordinate-data",
    "title": "Hands-on Exercise 11",
    "section": "Extracting Coordinate Data",
    "text": "Extracting Coordinate Data\nThe code chunk below extract the x,y coordinates of the full, training and test data sets.\n\n\nShow the code\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\n\nBefore continue, we write all the output into rds for future used.\n\n\nShow the code\ncoords_train <- write_rds(coords_train, \"data/model/coords_train.rds\" )\ncoords_test <- write_rds(coords_test, \"data/model/coords_test.rds\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#dropping-geometry-field",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#dropping-geometry-field",
    "title": "Hands-on Exercise 11",
    "section": "Dropping geometry field",
    "text": "Dropping geometry field\nFirst, we will drop geometry column of the sf data.frame by using st_drop_geometry() of sf package.\n\n\nShow the code\ntrain_data <- train_data %>% \n  st_drop_geometry()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#calibrating-geographical-random-forest-model",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#calibrating-geographical-random-forest-model",
    "title": "Hands-on Exercise 11",
    "section": "Calibrating Geographical Random Forest Model",
    "text": "Calibrating Geographical Random Forest Model\nIn this section, you will learn how to calibrate a model to predict HDB resale price by using grf() of SpatialML package.\n\nCalibrating using training data\nThe code chunk below calibrate a geographic ranform forest model by using grf() of SpatialML package.\n\n\nShow the code\nset.seed(1234)\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\n\nLet’s save the model output by using the code chunk below.\n\n\nShow the code\nwrite_rds(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n\n\nThe code chunk below can be used to retrieve the save model in future.\n\n\nShow the code\ngwRF_adaptive <- read_rds(\"data/model/gwRF_adaptive.rds\")\n\n\n\n\nPredicting by using test data\n\nPreparing the Test Data\nThe code chunk below will be used to combine the test data with its corresponding coordinates data.\n\n\nShow the code\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n\n\n\n\nPredicting with test data\nNext, predict.grf() of spatialML package will be used to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\n\nShow the code\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n\n\nBefore moving on, let us save the output into rds file for future use.\n\n\nShow the code\nGRF_pred <- write_rds(gwRF_pred, \"data/model/GRF_pred.rds\")\n\n\n\n\nConverting the predicting output into a data frame\nThe output of the predict.grf() is a vector of predicted values. It is wiser to convert it into a data frame for further visualisation and analysis.\n\n\nShow the code\nGRF_pred <- read_rds(\"data/model/GRF_pred.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n\n\nIn the code chunk below, cbind() is used to append the predicted values onto test_datathe.\n\n\nShow the code\ntest_data_p <- cbind(test_data, GRF_pred_df)\n\n\n\n\nShow the code\nwrite_rds(test_data_p, \"data/model/test_data_p.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#calculating-root-mean-square-error",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#calculating-root-mean-square-error",
    "title": "Hands-on Exercise 11",
    "section": "Calculating Root Mean Square Error",
    "text": "Calculating Root Mean Square Error\nThe root mean square error (RMSE) allows us to measure how far predicted values are from observed values in a regression analysis. In the code chunk below, rmse() of Metrics package is used to compute the RMSE.\n\n\nShow the code\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n\n\n[1] 27302.9"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#visualising-the-predicted-values",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#visualising-the-predicted-values",
    "title": "Hands-on Exercise 11",
    "section": "Visualising the predicted values",
    "text": "Visualising the predicted values\nAlternatively, scatterplot can be used to visualise the actual resale price and the predicted resale price by using the code chunk below.\n\n\nShow the code\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/In_class_Ex10.html",
    "href": "In-class_Ex/In-class_Ex10/In_class_Ex10.html",
    "title": "In class exercise 10",
    "section": "",
    "text": "Show the code\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap,\n               rsample, tidymodels, tidyverse, gtsummary,\n               rpart, rpart.plot, ggstatplot, performance )\n\n\nSpatialML –> only for random forest rsample –> part of the tidymodel (for random sampling) tidymodels –> rsample + other packages (for more modern modelling); framework + family of packages"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/In_class_Ex10.html#create-a-dataframe",
    "href": "In-class_Ex/In-class_Ex10/In_class_Ex10.html#create-a-dataframe",
    "title": "In class exercise 10",
    "section": "Create a dataframe",
    "text": "Create a dataframe\nWe can use them as a data.frame\n\n\nShow the code\ntrain_df <- train_sf %>%\n  st_drop_geometry() %>%\n  as.data.frame()\n\ntest_df <- test_sf %>%\n  st_drop_geometry() %>%\n  as.data.frame()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/In_class_Ex10.html#correlation-matrix",
    "href": "In-class_Ex/In-class_Ex10/In_class_Ex10.html#correlation-matrix",
    "title": "In class exercise 10",
    "section": "Correlation Matrix",
    "text": "Correlation Matrix\n\n\nShow the code\nrs_sf1 <- rs_sf %>%\n  st_drop_geometry()\nggstatsplot::ggcorrmat(rs_sf1[, 2:17])\n\n\n\n\n\n\n\nShow the code\ntbl_summary(rs_sf1)\n\n\n\n\n\n\n  \n    \n      Characteristic\n      N = 15,9011\n    \n  \n  \n    RESALE_PRICE\n405,000 (353,000, 470,000)\n    FLOOR_AREA_SQM\n93 (91, 102)\n    STOREY_ORDER\n3 (2, 4)\n    REMAINING_LEASE_MTHS\n936 (798, 1,111)\n    PROX_CBD\n13.4 (10.2, 15.4)\n    PROX_ELDERLYCARE\n0.63 (0.30, 1.15)\n    PROX_HAWKER\n0.66 (0.38, 0.98)\n    PROX_MRT\n0.54 (0.30, 0.83)\n    PROX_PARK\n0.72 (0.51, 1.04)\n    PROX_GOOD_PRISCH\n4.02 (2.27, 5.78)\n    PROX_MALL\n0.57 (0.37, 0.83)\n    PROX_CHAS\n0.18 (0.12, 0.25)\n    PROX_SUPERMARKET\n0.26 (0.17, 0.37)\n    WITHIN_350M_KINDERGARTEN\n\n        0\n5,452 (34%)\n        1\n6,636 (42%)\n        2\n2,559 (16%)\n        3\n835 (5.3%)\n        4\n296 (1.9%)\n        5\n107 (0.7%)\n        6\n10 (<0.1%)\n        7\n6 (<0.1%)\n    WITHIN_350M_CHILDCARE\n4 (3, 5)\n    WITHIN_350M_BUS\n8 (6, 10)\n    WITHIN_1KM_PRISCH\n3 (2, 4)\n  \n  \n  \n    \n      1 Median (IQR); n (%)\n    \n  \n\n\n\n\nOnly include factors that are relevant to your case.\n\n\nShow the code\ntrain_df <- train_df %>%\n  select(-c(PROX_CHAS))\ntrain_sf <- train_sf %>%\n  select(-c(PROX_CHAS))\ntest_df <- test_df %>%\n  select(-c(PROX_CHAS))\ntest_sf <- test_sf %>%\n  select(-c(PROX_CHAS))\n\n\n\n\nShow the code\nrs_mlr <- lm(RESALE_PRICE ~ FLOOR_AREA_SQM +\n                  STOREY_ORDER + REMAINING_LEASE_MTHS +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_df)\nsummary(rs_mlr)\n\n\n\nCall:\nlm(formula = RESALE_PRICE ~ FLOOR_AREA_SQM + STOREY_ORDER + REMAINING_LEASE_MTHS + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-179178  -39031   -1868   36751  327631 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              109413.550  11990.543   9.125  < 2e-16 ***\nFLOOR_AREA_SQM             2725.663    102.698  26.541  < 2e-16 ***\nSTOREY_ORDER              14192.913    384.118  36.949  < 2e-16 ***\nREMAINING_LEASE_MTHS        346.996      5.187  66.893  < 2e-16 ***\nPROX_CBD                 -16943.081    227.058 -74.620  < 2e-16 ***\nPROX_ELDERLYCARE         -13972.191   1120.481 -12.470  < 2e-16 ***\nPROX_HAWKER              -17968.486   1437.798 -12.497  < 2e-16 ***\nPROX_MRT                 -32448.233   1961.837 -16.540  < 2e-16 ***\nPROX_PARK                 -6753.096   1671.444  -4.040 5.39e-05 ***\nPROX_MALL                -14003.731   2266.148  -6.180 6.75e-10 ***\nPROX_SUPERMARKET         -25566.285   4720.643  -5.416 6.28e-08 ***\nWITHIN_350M_KINDERGARTEN   8740.242    721.483  12.114  < 2e-16 ***\nWITHIN_350M_CHILDCARE     -4614.476    398.810 -11.571  < 2e-16 ***\nWITHIN_350M_BUS             990.698    252.454   3.924 8.77e-05 ***\nWITHIN_1KM_PRISCH         -8438.093    553.831 -15.236  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61040 on 7935 degrees of freedom\nMultiple R-squared:  0.7405,    Adjusted R-squared:  0.7401 \nF-statistic:  1618 on 14 and 7935 DF,  p-value: < 2.2e-16\n\n\n\n\nShow the code\nwrite_rds(rs_mlr, \"data/models/rs_mlr.rds\" ) \n\n\n\nThe Training Data\n\n\nShow the code\ncoords <- st_coordinates(rs_sf)\ncoords_train <- st_coordinates(train_sf)\ncoords_test <- st_coordinates(test_sf)\n\n\n\n\nShow the code\nset.seed(1234)\nrs_rp <- rpart(\n  formula = RESALE_PRICE ~\n    FLOOR_AREA_SQM +\n    STOREY_ORDER +\n    REMAINING_LEASE_MTHS +\n    PROX_CBD +\n    PROX_ELDERLYCARE +\n    PROX_HAWKER +\n    PROX_MRT +\n    PROX_PARK +\n    PROX_GOOD_PRISCH +\n    PROX_MALL +\n    PROX_SUPERMARKET +\n    WITHIN_350M_KINDERGARTEN +\n    WITHIN_350M_CHILDCARE +\n    WITHIN_1KM_PRISCH,\n  data = train_df)\nrs_rp\n\n\nn= 7950 \n\nnode), split, n, deviance, yval\n      * denotes terminal node\n\n 1) root 7950 1.139546e+14 433705.6  \n   2) PROX_CBD>=7.974483 6665 4.472144e+13 403736.0  \n     4) REMAINING_LEASE_MTHS< 1020.5 4228 1.573100e+13 370187.4  \n       8) PROX_GOOD_PRISCH>=3.629405 2271 3.851141e+12 340796.1 *\n       9) PROX_GOOD_PRISCH< 3.629405 1957 7.641480e+12 404294.6 *\n     5) REMAINING_LEASE_MTHS>=1020.5 2437 1.597594e+13 461940.1  \n      10) PROX_CBD>=10.40657 2331 9.762718e+12 451754.4  \n        20) PROX_GOOD_PRISCH>=4.866983 1123 2.801796e+12 423493.8 *\n        21) PROX_GOOD_PRISCH< 4.866983 1208 5.230246e+12 478026.4 *\n      11) PROX_CBD< 10.40657 106 6.532500e+11 685929.1 *\n   3) PROX_CBD< 7.974483 1285 3.219685e+13 589151.4  \n     6) REMAINING_LEASE_MTHS< 930.5 745 6.613365e+12 486637.6  \n      12) FLOOR_AREA_SQM< 98.5 451 2.446537e+12 442460.5 *\n      13) FLOOR_AREA_SQM>=98.5 294 1.936449e+12 554405.7 *\n     7) REMAINING_LEASE_MTHS>=930.5 540 6.952722e+12 730582.5  \n      14) REMAINING_LEASE_MTHS< 1071.5 314 2.461969e+12 676641.3 *\n      15) REMAINING_LEASE_MTHS>=1071.5 226 2.307737e+12 805527.4 *\n\n\n\n\nShow the code\nrpart.plot(rs_rp)\n\n\n\n\n\n\n\nShow the code\nset.seed(1234)\nrs_rf <- ranger(formula = RESALE_PRICE ~\n    FLOOR_AREA_SQM +\n    STOREY_ORDER +\n    REMAINING_LEASE_MTHS +\n    PROX_CBD +\n    PROX_ELDERLYCARE +\n    PROX_HAWKER +\n    PROX_MRT +\n    PROX_PARK +\n    PROX_GOOD_PRISCH +\n    PROX_MALL +\n    PROX_SUPERMARKET +\n    WITHIN_350M_KINDERGARTEN +\n    WITHIN_350M_CHILDCARE +\n    WITHIN_1KM_PRISCH,\n  data = train_df,\n  importance =\"impurity\")\n\nrs_rf\n\n\nRanger result\n\nCall:\n ranger(formula = RESALE_PRICE ~ FLOOR_AREA_SQM + STOREY_ORDER +      REMAINING_LEASE_MTHS + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +      PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL + PROX_SUPERMARKET +      WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_1KM_PRISCH,      data = train_df, importance = \"impurity\") \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      7950 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       731609721 \nR squared (OOB):                  0.9489659 \n\n\n\n\nShow the code\nvi <- as.data.frame(rs_rf$variable.importance)\nvi$variables <- rownames(vi) #takes row name and create new column named variables\nvi <- vi %>%\n  rename(vi = \"rs_rf$variable.importance\") #rename to something more readable\n\n\n\n\nShow the code\nggplot(data = vi, \n       aes( x= vi,\n            y = reorder(variables, vi))) +\n  geom_bar(stat=\"Identity\") # treat every row as a single observation\n\n\n\n\n\nIf the variable importance are all close to zero with only one important variable, that means that your model has problem and it’s because your data DOES NOT allow the model to make use of other variables. This usually happens because of a complete separation/quasi-separation issue (exclude the great predictor first)\nTo reduce the computational time of bandwidth training, can just set number of neighbors (max/min), nthreads\nTo make forest managable for shiny, - reduce data size - reduce number of forest\n\n\nShow the code\ntest_df <- cbind(test_sf, coords_test) %>%\n  st_drop_geometry()\n\n\n\n\nShow the code\ngrf_pred <- read_rds(\"data/models/grf_pred.rds\")\ngrf_pred_df <- as.data.frame(grf_pred)\n\n\n\n\nShow the code\ntest_pred <- test_df %>%\n  select(RESALE_PRICE) %>%\n  cbind(grf_pred_df)\n\n\n\n\nShow the code\nrf_pred <- predict(rs_rf, test_df)\n\n\n\n\nShow the code\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>%\n  rename(rf_pred = \"rf_pred$predictions\")\n\n\n\n\nShow the code\ntest_pred <- cbind(test_pred, rf_pred_df)\n\n\n\n\nShow the code\ntest_pred <- read_rds(\"data/models/test_pred.rds\")\n\n\n\n\nShow the code\nyardstick::rmse(test_pred, \n                RESALE_PRICE,\n                rf_pred)\n\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      28970.\n\n\n\n\nShow the code\nmc <- test_pred %>%\n  pivot_longer(cols=c(2:4),\n               names_to = \"models\",\n               values_to = \"predicted\")\n\n\n\n\nShow the code\nggplot(data = test_pred,\n       aes(x=grf_pred,\n           y=RESALE_PRICE))+\n  geom_point()"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "",
    "text": "I will be building a prototype version of the Shiny app displaying Kernel Density Estimation (KDE) of various facilities related to enabled ageing. These facilities include:\n\nEldercare Services\nCommunity Gardens\nParks\nHospitals\nCommunity Centres (CCs)\nCHAS clinics"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#non-osm",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#non-osm",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Non-OSM",
    "text": "Non-OSM\nNow, I will be importing the data into our R environment. Note that these are not for osm data, which will be handled separately\n\n\nShow the code\n# Eldercare services\neldercare_sf <- st_read(dsn= \"data/\",\n                        layer = \"ELDERCARE\")\n\n\nReading layer `ELDERCARE' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n\n\nShow the code\n# Community Gardens\ncomGarden_sf <- st_read(\"data/CommunityinBloomCIB.kml\")\n\n\nReading layer `CIB_Gardens_New' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_3\\data\\CommunityinBloomCIB.kml' \n  using driver `KML'\nSimple feature collection with 1586 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6337 ymin: 1.247904 xmax: 103.9901 ymax: 1.46195\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nShow the code\n# CHAS clinics\nchas_sf<- st_read(\"data/CHASClinics.kml\")\n\n\nReading layer `MOH_CHAS_CLINICS' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_3\\data\\CHASClinics.kml' \n  using driver `KML'\nSimple feature collection with 1193 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.5818 ymin: 1.016264 xmax: 103.9903 ymax: 1.456037\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nShow the code\n# Coastal OUtline\nmpsz_sf <- st_read(dsn=\"../../data/data/\",\n                   layer = \"CostalOutline\")\n\n\nReading layer `CostalOutline' from data source `D:\\KrisLBT\\IS415-GAA\\data\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\nShow the code\nsg <- st_read(dsn=\"../../data/data/\",\n              layer= \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\data\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nNow, we will check for their crs.\n\n\nShow the code\nst_crs(eldercare_sf)\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWe will transform this from EPSG9001 to EPSG 3414\n\n\nShow the code\neldercare_sf <- eldercare_sf %>%\n  st_transform(3414)\n\n\nWe will repeat this process for the others\n\n\nShow the code\nst_crs(chas_sf) # is in EPSG9001/WGS84\n\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nShow the code\nchas_sf <- chas_sf %>%\n  st_transform(3414)\n\nst_crs(comGarden_sf) # is in WGS84\n\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nShow the code\ncomGarden_sf <- comGarden_sf %>%\n  st_transform(3414)\n\nst_crs(mpsz_sf) # is in WGS84\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nShow the code\nmpsz_sf <- mpsz_sf %>%\n  st_transform(3414)\n\nst_crs(sg) # it is in WGS84\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nShow the code\nsg <- sg %>%\n  st_transform(3414)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#osm",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#osm",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "OSM",
    "text": "OSM\nWe will now handle data (hospital, community centres and parks) from OSM.\nAccording to the documentation, we will have to source the point data from gis_osm_pois_free_1. We further filter it to the specific facility type in Singapore\n\n\nShow the code\npois <- st_read(dsn = \"../../data/data/data/\",\n                layer = \"gis_osm_pois_free_1\")\n\nst_crs(pois) # it is in WGS84\n\npois <- pois %>%\n  st_transform(3414) # make the crs of pois the same as mpsz_sf\n\npois_sg <- st_intersection(pois, mpsz_sf) # find all the points that intersects with mpsz_sf\n\nhospitals_sf <- pois_sg %>%\n  filter(fclass==\"hospital\")\n\ncomCentres_sf <- pois_sg %>%\n  filter(fclass==\"community_centre\")\n\nparks_sf <- pois_sg %>%\n  filter(fclass==\"park\")\n\n\nWe can now write it out for our convenience.\n\n\nShow the code\nst_write(hospitals_sf, \"data/hospitals_sf.shp\")\nst_write(comCentres_sf, \"data/comCentres_sf.shp\")\nst_write(parks_sf, \"data/parks_sf.shp\")\n\n\nWe can now read it into our environment\n\n\nShow the code\nhospitals_sf <- st_read(dsn=\"data/\",\n                        layer = \"hospitals_sf\")\n\n\nReading layer `hospitals_sf' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 19 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 20806.99 ymin: 29308.85 xmax: 40797.33 ymax: 46589.98\nProjected CRS: SVY21 / Singapore TM\n\n\nShow the code\ncomCentres_sf <- st_read(dsn=\"data/\",\n                        layer = \"comCentres_sf\")\n\n\nReading layer `comCentres_sf' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 13347.62 ymin: 28780.56 xmax: 39908.18 ymax: 45952.95\nProjected CRS: SVY21 / Singapore TM\n\n\nShow the code\nparks_sf <- st_read(dsn=\"data/\",\n                    layer = \"parks_sf\")\n\n\nReading layer `parks_sf' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Take_Home_Exercises\\Take_Home_Exercise_3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 8 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 12417.4 ymin: 30296 xmax: 37060.78 ymax: 41791.09\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#converting-sf-data.frames-to-sps-spatial-class",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#converting-sf-data.frames-to-sps-spatial-class",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Converting sf data.frames to sp’s Spatial* class",
    "text": "Converting sf data.frames to sp’s Spatial* class\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\n\nShow the code\nchas_sp <- as_Spatial(chas_sf)\nmpsz_sp <- as_Spatial(mpsz_sf)\ncomCentres_sp <- as_Spatial(comCentres_sf)\ncomGarden_sp <- as_Spatial(comGarden_sf)\neldercare_sp <- as_Spatial(eldercare_sf)\nhospitals_sp <- as_Spatial(hospitals_sf)\nparks_sp <- as_Spatial(parks_sf)\nsg_sp <- as_Spatial(sg)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Converting the generic sp format into spatstat’s ppp format",
    "text": "Converting the generic sp format into spatstat’s ppp format\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\n\nShow the code\nchas_ppp <- as(chas_sp,\"ppp\")\ncomCentres_ppp <- as(comCentres_sp,\"ppp\")\ncomGarden_ppp <- as(comGarden_sp,\"ppp\")\neldercare_ppp <- as(eldercare_sp,\"ppp\")\nhospitals_ppp <- as(hospitals_sp,\"ppp\")\nparks_ppp <- as(parks_sp,\"ppp\")"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#check-for-duplicates",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#check-for-duplicates",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Check for duplicates",
    "text": "Check for duplicates\n\n\nShow the code\nany(duplicated(chas_ppp))\n\n\n[1] FALSE\n\n\nShow the code\nany(duplicated(comCentres_ppp))\n\n\n[1] FALSE\n\n\nShow the code\nany(duplicated(comGarden_ppp))\n\n\n[1] FALSE\n\n\nShow the code\nany(duplicated(eldercare_ppp))\n\n\n[1] FALSE\n\n\nShow the code\nany(duplicated(parks_ppp))\n\n\n[1] FALSE\n\n\nShow the code\nany(duplicated(hospitals_ppp))\n\n\n[1] FALSE\n\n\nSince there are no duplicated points, we can move on."
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#creating-owin-object",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#creating-owin-object",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Creating owin Object",
    "text": "Creating owin Object\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\n\nShow the code\nmpsz_owin <- as(mpsz_sp, \"owin\")\n\n\n\n\nShow the code\nplot(mpsz_owin)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#combining-points-events-object-and-owin-object",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#combining-points-events-object-and-owin-object",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Combining points events object and owin object",
    "text": "Combining points events object and owin object\n\n\nShow the code\nchasSG_ppp = chas_ppp[mpsz_owin]\ncomCentresSG_ppp = comCentres_ppp[mpsz_owin]\ncomGardenSG_ppp = comGarden_ppp[mpsz_owin]\neldercareSG_ppp = eldercare_ppp[mpsz_owin]\nhospitalsSG_ppp = hospitals_ppp[mpsz_owin]\nparksSG_ppp = parks_ppp[mpsz_owin]"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#kernel-density-estimation",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#kernel-density-estimation",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Kernel Density Estimation",
    "text": "Kernel Density Estimation\n\n\nShow the code\nkde_chasSG_bw <- density(chasSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nkde_comCentresSG_bw <- density(comCentresSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\nkde_comGardenSG_bw <- density(comGardenSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nkde_eldercareSG_bw <- density(eldercareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nkde_hospitalsSG_bw <- density(hospitalsSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nkde_parksSG_bw <- density(parksSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\n\n\nShow the code\nplot(kde_chasSG_bw)\n\n\n\n\n\n\n\nShow the code\nplot(kde_comCentresSG_bw)\n\n\n\n\n\n\n\nShow the code\nplot(kde_comGardenSG_bw)\n\n\n\n\n\n\n\nShow the code\nplot(kde_eldercareSG_bw)\n\n\n\n\n\n\n\nShow the code\nplot(kde_hospitalsSG_bw)\n\n\n\n\n\n\n\nShow the code\nplot(kde_parksSG_bw)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#rescaling-kde-values",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#rescaling-kde-values",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Rescaling KDE Values",
    "text": "Rescaling KDE Values\n\n\nShow the code\nchasSG_ppp.km <- rescale(chasSG_ppp, 1000, \"km\")\nkde_chasSG.bw <- density(chasSG_ppp.km, sigma = bw.diggle,\n                         edge= TRUE, kernel = \"gaussian\")\nplot(kde_chasSG.bw)\n\n\n\n\n\n\n\nShow the code\ncomCentresSG_ppp.km <- rescale(comCentresSG_ppp, 1000, \"km\")\nkde_comCentresSG.bw <- density(comCentresSG_ppp.km, sigma = bw.diggle,\n                         edge= TRUE, kernel = \"gaussian\")\nplot(kde_comCentresSG.bw)\n\n\n\n\n\n\n\nShow the code\ncomGardenSG_ppp.km <- rescale(comGardenSG_ppp, 1000, \"km\")\nkde_comGardenSG.bw <- density(comGardenSG_ppp.km, sigma = bw.diggle,\n                         edge= TRUE, kernel = \"gaussian\")\nplot(kde_comGardenSG.bw)\n\n\n\n\n\n\n\nShow the code\neldercareSG_ppp.km <- rescale(eldercareSG_ppp, 1000, \"km\")\nkde_eldercareSG.bw <- density(eldercareSG_ppp.km, sigma = bw.diggle,\n                         edge= TRUE, kernel = \"gaussian\")\nplot(kde_eldercareSG.bw)\n\n\n\n\n\n\n\nShow the code\nhospitalsSG_ppp.km <- rescale(hospitalsSG_ppp, 1000, \"km\")\nkde_hospitalsSG.bw <- density(hospitalsSG_ppp.km, sigma = bw.diggle,\n                         edge= TRUE, kernel = \"gaussian\")\nplot(kde_hospitalsSG.bw)\n\n\n\n\n\n\n\nShow the code\nparksSG_ppp.km <- rescale(parksSG_ppp, 1000, \"km\")\nkde_parksSG.bw <- density(parksSG_ppp.km, sigma = bw.diggle,\n                         edge= TRUE, kernel = \"gaussian\")\nplot(kde_parksSG.bw)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#converting-kde-output-into-grid-object",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#converting-kde-output-into-grid-object",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Converting KDE Output into Grid Object",
    "text": "Converting KDE Output into Grid Object\n\n\nShow the code\ngridded_kde_chasSG_bw <- as.SpatialGridDataFrame.im(kde_chasSG.bw)\nspplot(gridded_kde_chasSG_bw)\n\n\n\n\n\n\n\nShow the code\ngridded_kde_comCentresSG_bw <- as.SpatialGridDataFrame.im(kde_comCentresSG.bw)\nspplot(gridded_kde_comCentresSG_bw)\n\n\n\n\n\n\n\nShow the code\ngridded_kde_comGardenSG_bw <- as.SpatialGridDataFrame.im(kde_comGardenSG.bw)\nspplot(gridded_kde_comGardenSG_bw)\n\n\n\n\n\n\n\nShow the code\ngridded_kde_eldercareSG_bw <- as.SpatialGridDataFrame.im(kde_eldercareSG.bw)\nspplot(gridded_kde_eldercareSG_bw)\n\n\n\n\n\n\n\nShow the code\ngridded_kde_hospitalsSG_bw <- as.SpatialGridDataFrame.im(kde_hospitalsSG.bw)\nspplot(gridded_kde_hospitalsSG_bw)\n\n\n\n\n\n\n\nShow the code\ngridded_kde_eldercareSG_bw <- as.SpatialGridDataFrame.im(kde_eldercareSG.bw)\nspplot(gridded_kde_eldercareSG_bw)\n\n\n\n\n\n\n\nShow the code\ngridded_kde_hospitalsSG_bw <- as.SpatialGridDataFrame.im(kde_hospitalsSG.bw)\nspplot(gridded_kde_hospitalsSG_bw)\n\n\n\n\n\n\n\nShow the code\ngridded_kde_parksSG_bw <- as.SpatialGridDataFrame.im(kde_parksSG.bw)\nspplot(gridded_kde_parksSG_bw)"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#extracting-specific-regions",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#extracting-specific-regions",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Extracting specific regions",
    "text": "Extracting specific regions\n\n\nShow the code\npg = sg_sp[sg_sp@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = sg_sp[sg_sp@data$PLN_AREA_N == \"TAMPINES\",]\nck = sg_sp[sg_sp@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = sg_sp[sg_sp@data$PLN_AREA_N == \"JURONG WEST\",]"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#create-an-sp-object",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#create-an-sp-object",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Create an sp object",
    "text": "Create an sp object\n\n\nShow the code\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#create-owin-object",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#create-owin-object",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Create Owin Object",
    "text": "Create Owin Object\n\nRegional owin\n\n\nShow the code\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n\nShow the code\nplot(pg_owin)\n\n\n\n\n\n\n\nCHAS\n\n\nShow the code\nchas_pg_ppp <- chas_ppp[pg_owin]\nchas_tm_ppp <- chas_ppp[tm_owin]\nchas_ck_ppp <- chas_ppp[ck_owin]\nchas_jw_ppp <- chas_ppp[jw_owin]\n\n\n\n\nCommunity Centres\n\n\nShow the code\ncomCentres_pg_ppp <- comCentres_ppp[pg_owin]\ncomCentres_tm_ppp <- comCentres_ppp[tm_owin]\ncomCentres_ck_ppp <- comCentres_ppp[ck_owin]\ncomCentres_jw_ppp <- comCentres_ppp[jw_owin]\n\n\n\n\nCommunity Gardens\n\n\nShow the code\ncomGarden_pg_ppp <- comGarden_ppp[pg_owin]\ncomGarden_tm_ppp <- comGarden_ppp[tm_owin]\ncomGarden_ck_ppp <- comGarden_ppp[ck_owin]\ncomGarden_jw_ppp <- comGarden_ppp[jw_owin]\n\n\n\n\nEldercare\n\n\nShow the code\neldercare_pg_ppp <- eldercare_ppp[pg_owin]\neldercare_tm_ppp <- eldercare_ppp[tm_owin]\neldercare_ck_ppp <- eldercare_ppp[ck_owin]\neldercare_jw_ppp <- eldercare_ppp[jw_owin]\n\n\n\n\nHospitals\n\n\nShow the code\nhospitals_pg_ppp <- hospitals_ppp[pg_owin]\nhospitals_tm_ppp <- hospitals_ppp[tm_owin]\nhospitals_ck_ppp <- hospitals_ppp[ck_owin]\nhospitals_jw_ppp <- hospitals_ppp[jw_owin]\n\n\n\n\nParks\n\n\nShow the code\nparks_pg_ppp <- parks_ppp[pg_owin]\nparks_tm_ppp <- parks_ppp[tm_owin]\nparks_ck_ppp <- parks_ppp[ck_owin]\nparks_jw_ppp <- parks_ppp[jw_owin]"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#rescaling-owin-object",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#rescaling-owin-object",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Rescaling owin Object",
    "text": "Rescaling owin Object\n\n\nShow the code\nchas_pg_ppp.km = rescale(chas_pg_ppp, 1000, \"km\")\nchas_tm_ppp.km = rescale(chas_tm_ppp, 1000, \"km\")\nchas_ck_ppp.km = rescale(chas_ck_ppp, 1000, \"km\")\nchas_jw_ppp.km = rescale(chas_jw_ppp, 1000, \"km\")\n\n\n\n\nShow the code\ncomCentres_pg_ppp.km = rescale(comCentres_pg_ppp, 1000, \"km\")\ncomCentres_tm_ppp.km = rescale(comCentres_tm_ppp, 1000, \"km\")\ncomcentres_ck_ppp.km = rescale(comCentres_ck_ppp, 1000, \"km\")\ncomCentres_jw_ppp.km = rescale(comCentres_jw_ppp, 1000, \"km\")\n\n\n\n\nShow the code\ncomGarden_pg_ppp.km = rescale(comGarden_pg_ppp, 1000, \"km\")\ncomGarden_tm_ppp.km = rescale(comGarden_tm_ppp, 1000, \"km\")\ncomGarden_ck_ppp.km = rescale(comGarden_ck_ppp, 1000, \"km\")\ncomGarden_jw_ppp.km = rescale(comGarden_jw_ppp, 1000, \"km\")\n\n\n\n\nShow the code\neldercare_pg_ppp.km = rescale(eldercare_pg_ppp, 1000, \"km\")\neldercare_tm_ppp.km = rescale(eldercare_tm_ppp, 1000, \"km\")\neldercare_ck_ppp.km = rescale(eldercare_ck_ppp, 1000, \"km\")\neldercare_jw_ppp.km = rescale(eldercare_jw_ppp, 1000, \"km\")\n\n\n\n\nShow the code\nhospitals_pg_ppp.km = rescale(hospitals_pg_ppp, 1000, \"km\")\nhospitals_tm_ppp.km = rescale(hospitals_tm_ppp, 1000, \"km\")\nhospitals_ck_ppp.km = rescale(hospitals_ck_ppp, 1000, \"km\")\nhospitals_jw_ppp.km = rescale(hospitals_jw_ppp, 1000, \"km\")\n\n\n\n\nShow the code\nparks_pg_ppp.km = rescale(parks_pg_ppp, 1000, \"km\")\nparks_tm_ppp.km = rescale(parks_tm_ppp, 1000, \"km\")\nparks_ck_ppp.km = rescale(parks_ck_ppp, 1000, \"km\")\nparks_jw_ppp.km = rescale(parks_jw_ppp, 1000, \"km\")"
  },
  {
    "objectID": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#computing-kde",
    "href": "Take_Home_Exercises/Take_Home_Exercise_3/Take_Home_Exercise_3.html#computing-kde",
    "title": "Take Home Exercise 3: Eldervailability",
    "section": "Computing KDE",
    "text": "Computing KDE\n\n\nShow the code\nplot(density(chas_pg_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"CHAS_Punggol\")\n\n\n\n\n\nShow the code\nplot(density(chas_tm_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"CHAS_Tampines\")\n\n\n\n\n\nShow the code\nplot(density(chas_ck_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"CHAS_Choa_Chu_Kang\")\n\n\n\n\n\nShow the code\nplot(density(chas_tm_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"CHAS_Tampines\")\n\n\n\n\n\nShow the code\nplot(density(chas_jw_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"CHAS_Jurong_West\")\n\n\n\n\n\n\n\nShow the code\nplot(density(comCentres_pg_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"comCentres_Punggol\")\n\n\n\n\n\nShow the code\nplot(density(comCentres_tm_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"comCentres_Tampines\")\n##plot(density(comCentres_ck_ppp,  # this one doesn't work\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"comCentres_Choa_Chu_Kang\")\n\nplot(density(comCentres_tm_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"comCentres_Tampines\")\n\n\n\n\n\nShow the code\n#plot(density(comCentres_jw_ppp,  # this one also doesn't work\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"comCentres_Jurong_West\")\n\n\n\n\nShow the code\nplot(density(comGarden_pg_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"comGarden_Punggol\")\n\n\n\n\n\nShow the code\nplot(density(comGarden_tm_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"comGarden_Tampines\")\n\n\n\n\n\nShow the code\nplot(density(comGarden_ck_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"comGarden_Choa_Chu_Kang\")\n\n\n\n\n\nShow the code\nplot(density(chas_tm_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"comGarden_Tampines\")\n\n\n\n\n\nShow the code\nplot(density(comGarden_jw_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"comGarden_Jurong_West\")\n\n\n\n\n\n\n\nShow the code\nplot(density(eldercare_pg_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"eldercare_Punggol\")\n\n\n\n\n\nShow the code\nplot(density(eldercare_tm_ppp, #\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"eldercare_Tampines\")\n\n\n\n\n\nShow the code\nplot(density(eldercare_ck_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"eldercare_Choa_Chu_Kang\")\n\n\n\n\n\nShow the code\nplot(density(eldercare_tm_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"eldercare_Tampines\")\n\n\n\n\n\nShow the code\nplot(density(eldercare_jw_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"eldercare_Jurong_West\")\n\n\n\n\n\n\n\nShow the code\nplot(density(hospitals_pg_ppp,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"),\n             main=\"hospitals_Punggol\")\n\n\n\n\n\nShow the code\n#plot(density(hospitals_tm_ppp, # this one doesn't work\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"hospitals_Tampines\")\n\n#plot(density(hospitals_ck_ppp, # this one doesn't work\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"hospitals_Choa_Chu_Kang\")\n#plot(density(hospitals_tm_ppp, # this one doesn't work\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"hospitals_Tampines\")\n\n#plot(density(hospitals_jw_ppp,   # this one doesn't work\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"hospitals_Jurong_West\")\n\n\n\n\nShow the code\n#plot(density(parks_pg_ppp,   # this doesn't work\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"parks_Punggol\")\n#plot(density(parks_tm_ppp,  # this one doesn't work\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"parks_Tampines\")\n#plot(density(parks_ck_ppp,\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"parks_Choa_Chu_Kang\")\n\n#plot(density(parks_tm_ppp,\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"parks_Tampines\")\n#plot(density(parks_jw_ppp,\n#             sigma=bw.ppl,\n#             edge=TRUE,\n#             kernel=\"gaussian\"),\n#             main=\"parks_Jurong_West\")\n\n\nI suspect you can’t actually use KDE for a subzone if there are 0 values"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "",
    "text": "Four data sets will be used in this hands-on exercise, they are:\n\nMP14_SUBZONE_NO_SEA_PL: URA Master Plan 2014 subzone boundary GIS data. This data set is downloaded from data.gov.sg.\nhexagons: A 250m radius hexagons GIS data. This data set was created by using st_make_grid() of sf package. It is in ESRI shapefile format.\nELDERCARE: GIS data showing location of eldercare service. This data is downloaded from data.gov.sg. There are two versions. One in ESRI shapefile format. The other one in Google kml file format. For the purpose of this hands-on exercise, ESRI shapefile format is provided.\nOD_Matrix: a distance matrix in csv format. There are six fields in the data file. They are:\n\norigin_id: the unique id values of the origin (i.e. fid of hexagon data set.),\ndestination_id: the unique id values of the destination (i.e. fid of ELDERCARE data set.),\nentry_cost: the perpendicular distance between the origins and the nearest road),\nnetwork_cost: the actual network distance from the origin and destination,\nexit_cost: the perpendicular distance between the destination and the nearest road), and\ntotal_cost: the summation of entry_cost, network_cost and exit_cost.\n\n\nAll the values of the cost related fields are in metres."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#importing-geospatial-data",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\n\n\nShow the code\n# Importing the 2014 subzone no sea\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex12\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nShow the code\n# Importing hexagons\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\") \n\n\nReading layer `hexagons' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex12\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\n\nShow the code\n# Importing eldercare\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") \n\n\nReading layer `ELDERCARE' from data source \n  `D:\\KrisLBT\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex12\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#updating-crs-information",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#updating-crs-information",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Updating CRS Information",
    "text": "Updating CRS Information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\n\nShow the code\nmpsz <- st_transform(mpsz, 3414)\neldercare <- st_transform(eldercare, 3414)\nhexagons <- st_transform(hexagons, 3414)\n\n\nI can now check the crs of mpsz using the st_crs() function of the sf package.\n\n\nShow the code\nst_crs(mpsz)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#importing-distance-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#importing-distance-matrix",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Importing Distance Matrix",
    "text": "Importing Distance Matrix\nThe code chunk below uses read_cvs() of readr package to import OD_Matrix.csv into RStudio. The imported object is a tibble data.frame called ODMatrix.\n\n\nShow the code\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\", skip = 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#tidying-distance-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#tidying-distance-matrix",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Tidying Distance Matrix",
    "text": "Tidying Distance Matrix\nThe code chunk below uses spread() of tidyr package is used to transform the O-D matrix from a thin format into a fat format.\n\n\nShow the code\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  spread(destination_id, total_cost)%>%\n  select(c(-c('origin_id')))\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou may now use the pivot_wider() function from the tidyr package\n\n\nCurrently, the distance is measured in metre because SVY21 projected coordinate system is used. The code chunk below will be used to convert the unit f measurement from metre to kilometre.\n\n\nShow the code\ndistmat_km <- as.matrix(distmat/1000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#computing-hansens-accessibility",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#computing-hansens-accessibility",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Computing Hansen’s accessibility",
    "text": "Computing Hansen’s accessibility\nThe code chunk below calculates Hansen’s accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_Handsen.\n\n\nShow the code\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 2, \n                            family = \"Hansen\"))\n\n\nThe default field name is very messy, we will rename it to accHansen by using the code chunk below.\n\n\nShow the code\ncolnames(acc_Hansen) <- \"accHansen\"\n\n\nNext, we will convert the data table into tibble format by using the code chunk below.\n\n\nShow the code\nacc_Hansen <- as_tibble(acc_Hansen)\n\n\nLastly, bind_cols() of dplyr will be used to join the acc_Hansen tibble data frame with the hexagons simple feature data frame. The output is called hexagon_Hansen.\n\n\nShow the code\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n\n\nActually, the steps above can be perform by using a single code chunk as shown below.\n\n\nShow the code\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 0.5, \n                            family = \"Hansen\"))\n\ncolnames(acc_Hansen) <- \"accHansen\"\nacc_Hansen <- as_tibble(acc_Hansen)\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#visualising-hansens-accessibility",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#visualising-hansens-accessibility",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Visualising Hansen’s accessibility",
    "text": "Visualising Hansen’s accessibility\n\nExtracting map extent\nFirstly, we will extract the extend of hexagons simple feature data frame by by using st_bbox() of sf package.\n\n\nShow the code\nmapex <- st_bbox(hexagons)\n\n\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility to eldercare centre in Singapore.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#statistical-graphic-visualisation",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#statistical-graphic-visualisation",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Statistical graphic visualisation",
    "text": "Statistical graphic visualisation\nIn this section, we are going to compare the distribution of Hansen’s accessibility values by URA Planning Region.\nFirstly, we need to add the planning region field into haxegon_Hansen simple feature data frame by using the code chunk below.\n\n\nShow the code\nhexagon_Hansen <- st_join(hexagon_Hansen, mpsz, \n                          join = st_intersects)\n\n\nNext, ggplot() will be used to plot the distribution by using boxplot graphical method.\n\n\nShow the code\nggplot(data=hexagon_Hansen, \n       aes(y = log(accHansen), \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#computing-kd2sfcas-accessibility",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#computing-kd2sfcas-accessibility",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Computing KD2SFCA’s accessibility",
    "text": "Computing KD2SFCA’s accessibility\nIn this section, you are going to repeat most of the steps you had learned in previous section to perform the analysis. However, some of the codes will be combined into one code chunk. The code chunk below calculates Hansen’s accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_KD2SFCA. Notice that KD2SFCA is used for family argument.\n\n\nShow the code\nacc_KD2SFCA <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            d0 = 50,\n                            power = 2, \n                            family = \"KD2SFCA\"))\n\ncolnames(acc_KD2SFCA) <- \"accKD2SFCA\"\nacc_KD2SFCA <- as_tibble(acc_KD2SFCA)\nhexagon_KD2SFCA <- bind_cols(hexagons, acc_KD2SFCA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#visualising-kd2sfcas-accessibility",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#visualising-kd2sfcas-accessibility",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Visualising KD2SFCA’s accessibility",
    "text": "Visualising KD2SFCA’s accessibility\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility to eldercare centre in Singapore. Notice that mapex is reused for bbox argument.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(hexagon_KD2SFCA,\n         bbox = mapex) + \n  tm_fill(col = \"accKD2SFCA\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: KD2SFCA method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#statistical-graphic-visualisation-1",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#statistical-graphic-visualisation-1",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Statistical graphic visualisation",
    "text": "Statistical graphic visualisation\nNow, we are going to compare the distribution of KD2CFA accessibility values by URA Planning Region.\nFirstly, we need to add the planning region field into hexagon_KD2SFCA simple feature data frame by using the code chunk below.\n\n\nShow the code\nhexagon_KD2SFCA <- st_join(hexagon_KD2SFCA, mpsz, \n                          join = st_intersects)\n\n\nNext, ggplot() will be used to plot the distribution by using boxplot graphical method.\n\n\nShow the code\nggplot(data=hexagon_KD2SFCA, \n       aes(y = accKD2SFCA, \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#computing-sam-accessibility",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#computing-sam-accessibility",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Computing SAM accessibility",
    "text": "Computing SAM accessibility\nIn this section, you are going to repeat most of the steps you had learned in previous section to perform the analysis. However, some of the codes will be combined into one code chunk.\nThe code chunk below calculates Hansen’s accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_SAM. Notice that SAM is used for family argument.\n\n\nShow the code\nacc_SAM <- data.frame(ac(hexagons$demand,\n                         eldercare$capacity,\n                         distmat_km, \n                         d0 = 50,\n                         power = 2, \n                         family = \"SAM\"))\n\ncolnames(acc_SAM) <- \"accSAM\"\nacc_SAM <- as_tibble(acc_SAM)\nhexagon_SAM <- bind_cols(hexagons, acc_SAM)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#visualising-sams-accessibility",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#visualising-sams-accessibility",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Visualising SAM’s accessibility",
    "text": "Visualising SAM’s accessibility\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility to eldercare centre in Singapore. Notice that mapex is reused for bbox argument.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(hexagon_SAM,\n         bbox = mapex) + \n  tm_fill(col = \"accSAM\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: SAM method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 3),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#statistical-graphic-visualisation-2",
    "href": "Hands-on_Ex/Hands-on_Ex12/Hands-on_Ex12.html#statistical-graphic-visualisation-2",
    "title": "Hands-on Exercise 12: Modelling Geographical Accessibility",
    "section": "Statistical graphic visualisation",
    "text": "Statistical graphic visualisation\nNow, we are going to compare the distribution of SAM accessibility values by URA Planning Region.\nFirstly, we need to add the planning region field into hexagon_SAM simple feature data frame by using the code chunk below.\n\n\nShow the code\nhexagon_SAM <- st_join(hexagon_SAM, mpsz, \n                       join = st_intersects)\n\n\nNext, ggplot() will be used to plot the distribution by using boxplot graphical method.\n\n\nShow the code\nggplot(data=hexagon_SAM, \n       aes(y = accSAM, \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/data/geospatial/ELDERCARE.html",
    "href": "Hands-on_Ex/Hands-on_Ex12/data/geospatial/ELDERCARE.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex12/data/geospatial/hexagons.html",
    "href": "Hands-on_Ex/Hands-on_Ex12/data/geospatial/hexagons.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "",
    "text": "Four data sets will be used in this hands-on exercise, they are:\n\nMP14_SUBZONE_NO_SEA_PL: URA Master Plan 2014 subzone boundary GIS data. This data set is downloaded from data.gov.sg.\nhexagons: A 250m radius hexagons GIS data. This data set was created by using st_make_grid() of sf package. It is in ESRI shapefile format.\nELDERCARE: GIS data showing location of eldercare service. This data is downloaded from data.gov.sg. There are two versions. One in ESRI shapefile format. The other one in Google kml file format. For the purpose of this hands-on exercise, ESRI shapefile format is provided.\nOD_Matrix: a distance matrix in csv format. There are six fields in the data file. They are:\n\norigin_id: the unique id values of the origin (i.e. fid of hexagon data set.),\ndestination_id: the unique id values of the destination (i.e. fid of ELDERCARE data set.),\nentry_cost: the perpendicular distance between the origins and the nearest road),\nnetwork_cost: the actual network distance from the origin and destination,\nexit_cost: the perpendicular distance between the destination and the nearest road), and\ntotal_cost: the summation of entry_cost, network_cost and exit_cost.\n\n\nAll the values of the cost related fields are in metres."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#importing-geospatial-data",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\n\n\nShow the code\n# Importing the 2014 subzone no sea\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex11\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nShow the code\n# Importing hexagons\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\") \n\n\nReading layer `hexagons' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex11\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\n\nShow the code\n# Importing eldercare\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") \n\n\nReading layer `ELDERCARE' from data source \n  `D:\\KrisLBT\\IS415-GAA\\In-class_Ex\\In-class_Ex11\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#updating-crs-information",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#updating-crs-information",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Updating CRS Information",
    "text": "Updating CRS Information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\n\nShow the code\nmpsz <- st_transform(mpsz, 3414)\neldercare <- st_transform(eldercare, 3414)\nhexagons <- st_transform(hexagons, 3414)\n\n\nI can now check the crs of mpsz using the st_crs() function of the sf package.\n\n\nShow the code\nst_crs(mpsz)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#importing-distance-matrix",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#importing-distance-matrix",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Importing Distance Matrix",
    "text": "Importing Distance Matrix\nThe code chunk below uses read_cvs() of readr package to import OD_Matrix.csv into RStudio. The imported object is a tibble data.frame called ODMatrix.\n\n\nShow the code\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\", skip = 0)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#tidying-distance-matrix",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#tidying-distance-matrix",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Tidying Distance Matrix",
    "text": "Tidying Distance Matrix\nThe code chunk below uses pivot_wider() of tidyr package is used to transform the O-D matrix from a thin format into a fat format.\n\n\nShow the code\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  pivot_wider(names_from= destination_id, values_from =total_cost)%>%\n  select(-origin_id)\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou may now use the pivot_wider() function from the tidyr package\n\n\nCurrently, the distance is measured in metre because SVY21 projected coordinate system is used. The code chunk below will be used to convert the unit f measurement from metre to kilometre.\n\n\nShow the code\ndistmat_km <- as.matrix(distmat/1000)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#computing-hansens-accessibility",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#computing-hansens-accessibility",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Computing Hansen’s accessibility",
    "text": "Computing Hansen’s accessibility\nThe code chunk below calculates Hansen’s accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_Handsen.\n\n\nShow the code\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 2, \n                            family = \"Hansen\"))\n\n\nThe default field name is very messy, we will rename it to accHansen by using the code chunk below.\n\n\nShow the code\ncolnames(acc_Hansen) <- \"accHansen\"\n\n\nNext, we will convert the data table into tibble format by using the code chunk below.\n\n\nShow the code\nacc_Hansen <- as_tibble(acc_Hansen)\n\n\nLastly, bind_cols() of dplyr will be used to join the acc_Hansen tibble data frame with the hexagons simple feature data frame. The output is called hexagon_Hansen.\n\n\nShow the code\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n\n\nActually, the steps above can be perform by using a single code chunk as shown below.\n\n\nShow the code\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 0.5, \n                            family = \"Hansen\"))\n\ncolnames(acc_Hansen) <- \"accHansen\"\nacc_Hansen <- as_tibble(acc_Hansen)\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#visualising-hansens-accessibility",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#visualising-hansens-accessibility",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Visualising Hansen’s accessibility",
    "text": "Visualising Hansen’s accessibility\n\nExtracting map extent\nFirstly, we will extract the extend of hexagons simple feature data frame by by using st_bbox() of sf package.\n\n\nShow the code\nmapex <- st_bbox(hexagons)\n\n\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility to eldercare centre in Singapore.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#statistical-graphic-visualisation",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#statistical-graphic-visualisation",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Statistical graphic visualisation",
    "text": "Statistical graphic visualisation\nIn this section, we are going to compare the distribution of Hansen’s accessibility values by URA Planning Region.\nFirstly, we need to add the planning region field into haxegon_Hansen simple feature data frame by using the code chunk below.\n\n\nShow the code\nhexagon_Hansen <- st_join(hexagon_Hansen, mpsz, \n                          join = st_intersects)\n\n\nNext, ggplot() will be used to plot the distribution by using boxplot graphical method.\n\n\nShow the code\nggplot(data=hexagon_Hansen, \n       aes(y = log(accHansen), \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#computing-kd2sfcas-accessibility",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#computing-kd2sfcas-accessibility",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Computing KD2SFCA’s accessibility",
    "text": "Computing KD2SFCA’s accessibility\nIn this section, you are going to repeat most of the steps you had learned in previous section to perform the analysis. However, some of the codes will be combined into one code chunk. The code chunk below calculates Hansen’s accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_KD2SFCA. Notice that KD2SFCA is used for family argument.\n\n\nShow the code\nacc_KD2SFCA <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            d0 = 50,\n                            power = 2, \n                            family = \"KD2SFCA\"))\n\ncolnames(acc_KD2SFCA) <- \"accKD2SFCA\"\nacc_KD2SFCA <- as_tibble(acc_KD2SFCA)\nhexagon_KD2SFCA <- bind_cols(hexagons, acc_KD2SFCA)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#visualising-kd2sfcas-accessibility",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#visualising-kd2sfcas-accessibility",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Visualising KD2SFCA’s accessibility",
    "text": "Visualising KD2SFCA’s accessibility\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility to eldercare centre in Singapore. Notice that mapex is reused for bbox argument.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(hexagon_KD2SFCA,\n         bbox = mapex) + \n  tm_fill(col = \"accKD2SFCA\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: KD2SFCA method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#statistical-graphic-visualisation-1",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#statistical-graphic-visualisation-1",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Statistical graphic visualisation",
    "text": "Statistical graphic visualisation\nNow, we are going to compare the distribution of KD2CFA accessibility values by URA Planning Region.\nFirstly, we need to add the planning region field into hexagon_KD2SFCA simple feature data frame by using the code chunk below.\n\n\nShow the code\nhexagon_KD2SFCA <- st_join(hexagon_KD2SFCA, mpsz, \n                          join = st_intersects)\n\n\nNext, ggplot() will be used to plot the distribution by using boxplot graphical method.\n\n\nShow the code\nggplot(data=hexagon_KD2SFCA, \n       aes(y = accKD2SFCA, \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#computing-sam-accessibility",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#computing-sam-accessibility",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Computing SAM accessibility",
    "text": "Computing SAM accessibility\nIn this section, you are going to repeat most of the steps you had learned in previous section to perform the analysis. However, some of the codes will be combined into one code chunk.\nThe code chunk below calculates Hansen’s accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_SAM. Notice that SAM is used for family argument.\n\n\nShow the code\nacc_SAM <- data.frame(ac(hexagons$demand,\n                         eldercare$capacity,\n                         distmat_km, \n                         d0 = 50,\n                         power = 2, \n                         family = \"SAM\"))\n\ncolnames(acc_SAM) <- \"accSAM\"\nacc_SAM <- as_tibble(acc_SAM)\nhexagon_SAM <- bind_cols(hexagons, acc_SAM)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#visualising-sams-accessibility",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#visualising-sams-accessibility",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Visualising SAM’s accessibility",
    "text": "Visualising SAM’s accessibility\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility to eldercare centre in Singapore. Notice that mapex is reused for bbox argument.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(hexagon_SAM,\n         bbox = mapex) + \n  tm_fill(col = \"accSAM\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: SAM method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 3),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#statistical-graphic-visualisation-2",
    "href": "In-class_Ex/In-class_Ex11/In_class_Ex011.html#statistical-graphic-visualisation-2",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "Statistical graphic visualisation",
    "text": "Statistical graphic visualisation\nNow, we are going to compare the distribution of SAM accessibility values by URA Planning Region.\nFirstly, we need to add the planning region field into hexagon_SAM simple feature data frame by using the code chunk below.\n\n\nShow the code\nhexagon_SAM <- st_join(hexagon_SAM, mpsz, \n                       join = st_intersects)\n\n\nNext, ggplot() will be used to plot the distribution by using boxplot graphical method.\n\n\nShow the code\nggplot(data=hexagon_SAM, \n       aes(y = accSAM, \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/data/geospatial/ELDERCARE.html",
    "href": "In-class_Ex/In-class_Ex11/data/geospatial/ELDERCARE.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/data/geospatial/hexagons.html",
    "href": "In-class_Ex/In-class_Ex11/data/geospatial/hexagons.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html",
    "title": "Hands-on Exercise 13",
    "section": "",
    "text": "Show the code\npacman::p_load(tmap, sf, sp,\n               performance, reshape2,\n               ggpubr, tidyverse, DT,\n               stplnr)\n\n\n#The Data\nThis exercise is a continuation of Chapter 15: Processing and Visualising Flow Data and the following data will be used:\n\nod_data.rds, weekday morning peak passenger flows at planning subzone level.\nmpsz.rds, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBeside these two data sets, an additional attribute data file called pop.csv will be provided.\n#Computing Distance Matrix\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. For example, in the table below we can see an Euclidean distance of 3926.0025 between MESZ01 and RVSZ05, of 3939.1079 between MESZ01 and SRSZ01, and so on. By definition, an location’s distance from itself, which is shown in the main diagonal of the table, is 0.\nIn this section, I will learn how to compute a distance matrix by using URA Master Plan 2019 Planning Subzone boundary in which you saved as an rds file called mpsz.\nFirst, let us import mpsz.rds into R environemnt by using the code chunk below.\n\n\nShow the code\nmpsz <- st_read(dsn=\"data/geospatial\",\n                 layer=\"MPSZ-2019\")\nst_crs(mpsz) # it is in WGS84 format\n\nmpsz <- mpsz %>%\n  st_transform(3414)\n\nst_crs(mpsz) # it is now in the correct format\n\nwrite_rds(mpsz, \"data/rds/mpsz.rds\")\n\n\n\n\nShow the code\nmpsz <- read_rds(\"data/rds/mpsz.rds\")\n\nmpsz\n\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#extracting-the-study-data",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#extracting-the-study-data",
    "title": "Hands-on Exercise 13",
    "section": "Extracting the study data",
    "text": "Extracting the study data\nFor the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o’clock.\n\n\nShow the code\nodbus6_9 <- odbus %>%\n  filter(DAY_TYPE == \"WEEKDAY\") %>%\n  filter(TIME_PER_HOUR >= 6 &\n           TIME_PER_HOUR <= 9) %>%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\nTable below shows the content of odbus6_9\n\n\nShow the code\ndatatable(odbus6_9)\n\n\n\n\nShow the code\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\n\n\n\nShow the code\nodbus6_9 <- read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#importing-geospatial-data",
    "title": "Hands-on Exercise 13",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\n\nShow the code\nbusstop <- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %>%\n  st_transform(crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 13",
    "section": "Geospatial data wrangling",
    "text": "Geospatial data wrangling\n###Combining Busstop and mpsz\nCode chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\n\nShow the code\nbusstop_mpsz <- st_intersection(busstop, mpsz) %>%\n  select(BUS_STOP_N, SUBZONE_C) %>%\n  st_drop_geometry()\n\n\n\n\nShow the code\ndatatable(busstop_mpsz)\n\n\n\n\nShow the code\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")  \n\n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame.\n\n\nShow the code\nod_data <- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %>%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\n\nShow the code\nduplicate <- od_data %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\n\nShow the code\nod_data <- unique(od_data)\n\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\nNext, we will update od_data data frame cwith the planning subzone codes.\n\n\nShow the code\nod_data <- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\n\n\n\nShow the code\nduplicate <- od_data %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n\n\n\n\nShow the code\nod_data <- unique(od_data)\n\n\n\n\nShow the code\nod_data <- od_data %>%\n  rename(DESTIN_SZ = SUBZONE_C) %>%\n  drop_na() %>%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %>%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\n\nIt is time to save the output into an rds file format.\n\n\nShow the code\nwrite_rds(od_data, \"data/rds/od_data_fii.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#back-to-preparing",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#back-to-preparing",
    "title": "Hands-on Exercise 13",
    "section": "Back to Preparing",
    "text": "Back to Preparing\n\n\nShow the code\nod_data_fii <- read_rds(\"data/rds/od_data_fii.rds\")\n\n\nNext, we will compute the total passenger trip between and within planning subzones by using the code chunk below. The output is all flow_data.\n\n\nShow the code\nflow_data <- od_data_fii %>%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %>% \n  summarize(TRIPS = sum(MORNING_PEAK)) \n\n\nUse the code chunk below to display flow_data dataframe.\n\n\nShow the code\nhead(flow_data, 10)\n\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_SZ [1]\n   ORIGIN_SZ DESTIN_SZ TRIPS\n   <chr>     <chr>     <dbl>\n 1 AMSZ01    AMSZ01     1998\n 2 AMSZ01    AMSZ02     8289\n 3 AMSZ01    AMSZ03     8971\n 4 AMSZ01    AMSZ04     2252\n 5 AMSZ01    AMSZ05     6136\n 6 AMSZ01    AMSZ06     2148\n 7 AMSZ01    AMSZ07     1620\n 8 AMSZ01    AMSZ08     1925\n 9 AMSZ01    AMSZ09     1773\n10 AMSZ01    AMSZ10       63"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#separating-intra-flow-from-passenger-volume-df",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#separating-intra-flow-from-passenger-volume-df",
    "title": "Hands-on Exercise 13",
    "section": "Separating intra-flow from passenger volume df",
    "text": "Separating intra-flow from passenger volume df\nCode chunk below is used to add three new fields in flow_data dataframe.\n\n\nShow the code\nflow_data$FlowNoIntra <- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset <- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\n\nCombining passenger volume data with distance value Before we can join flow_data and distPair, we need to convert data value type of ORIGIN_SZ and DESTIN_SZ fields of flow_data dataframe into factor data type.\n\n\nShow the code\nflow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)\n\n\nNow, left_join() of dplyr will be used to flow_data dataframe and distPair dataframe. The output is called flow_data1.\n\n\nShow the code\nflow_data1 <- flow_data %>%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#importing-population-data",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#importing-population-data",
    "title": "Hands-on Exercise 13",
    "section": "Importing population data",
    "text": "Importing population data\n\n\nShow the code\npop <- read_csv(\"data/aspatial/pop.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#geospatial-data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#geospatial-data-wrangling-1",
    "title": "Hands-on Exercise 13",
    "section": "Geospatial data wrangling",
    "text": "Geospatial data wrangling\n\n\nShow the code\npop <- pop %>%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %>%\n  select(1:6) %>%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#preparing-origin-attribute",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#preparing-origin-attribute",
    "title": "Hands-on Exercise 13",
    "section": "Preparing origin attribute",
    "text": "Preparing origin attribute\n\n\nShow the code\nflow_data1 <- flow_data1 %>%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %>%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#preparing-destination-attribute",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#preparing-destination-attribute",
    "title": "Hands-on Exercise 13",
    "section": "Preparing destination attribute",
    "text": "Preparing destination attribute\n\n\nShow the code\nflow_data1 <- flow_data1 %>%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %>%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))\n\n\nWe will called the output data file SIM_data. it is in rds data file format.\n\n\nShow the code\nwrite_rds(flow_data1, \"data/rds/flow_data_6-9.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#importing-the-modelling-data",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#importing-the-modelling-data",
    "title": "Hands-on Exercise 13",
    "section": "Importing the modelling data",
    "text": "Importing the modelling data\nFirstly, let us import the modelling data by using the code chunk below.\n\n\nShow the code\nSIM_data <- read_rds(\"data/rds/flow_data_6-9.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#visualising-the-dependent-variable",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#visualising-the-dependent-variable",
    "title": "Hands-on Exercise 13",
    "section": "Visualising the dependent variable",
    "text": "Visualising the dependent variable\nFirstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.\n\n\nShow the code\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\n\nNotice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.\nNext, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\n\nShow the code\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\nNotice that their relationship hardly resemble linear relationship.\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.\n\n\nShow the code\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#checking-for-variables-with-zero-values",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#checking-for-variables-with-zero-values",
    "title": "Hands-on Exercise 13",
    "section": "Checking for variables with zero values",
    "text": "Checking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in SIM_data data frame.\n\n\nShow the code\nsummary(SIM_data)\n\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS         FlowNoIntra      \n Length:14734       Length:14734       Min.   :     1   Min.   :     0.0  \n Class :character   Class :character   1st Qu.:    14   1st Qu.:    13.0  \n Mode  :character   Mode  :character   Median :    76   Median :    70.0  \n                                       Mean   :  1021   Mean   :   839.9  \n                                       3rd Qu.:   426   3rd Qu.:   379.0  \n                                       Max.   :232187   Max.   :148274.0  \n     offset              dist       ORIGIN_AGE7_12 ORIGIN_AGE13_24\n Min.   :0.000001   Min.   :   50   Min.   :   0   Min.   :    0  \n 1st Qu.:1.000000   1st Qu.: 3346   1st Qu.: 240   1st Qu.:  440  \n Median :1.000000   Median : 6067   Median : 700   Median : 1350  \n Mean   :0.982150   Mean   : 6880   Mean   :1032   Mean   : 2269  \n 3rd Qu.:1.000000   3rd Qu.: 9729   3rd Qu.:1480   3rd Qu.: 3260  \n Max.   :1.000000   Max.   :26136   Max.   :6340   Max.   :16380  \n ORIGIN_AGE25_64 DESTIN_AGE7_12 DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :    0   Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.: 2200   1st Qu.: 240   1st Qu.:  460   1st Qu.: 2200  \n Median : 6810   Median : 720   Median : 1420   Median : 7030  \n Mean   :10487   Mean   :1033   Mean   : 2290   Mean   :10574  \n 3rd Qu.:15770   3rd Qu.:1500   3rd Qu.: 3260   3rd Qu.:15830  \n Max.   :74610   Max.   :6340   Max.   :16380   Max.   :74610  \n\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64,DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\n\nShow the code\nSIM_data$DESTIN_AGE7_12 <- ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0,\n  0.99, SIM_data$DESTIN_AGE7_12)\nSIM_data$DESTIN_AGE13_24 <- ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0,\n  0.99, SIM_data$DESTIN_AGE13_24)\nSIM_data$DESTIN_AGE25_64 <- ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0,\n  0.99, SIM_data$DESTIN_AGE25_64)\nSIM_data$ORIGIN_AGE7_12 <- ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0,\n  0.99, SIM_data$ORIGIN_AGE7_12)\nSIM_data$ORIGIN_AGE13_24 <- ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0,\n  0.99, SIM_data$ORIGIN_AGE13_24)\nSIM_data$ORIGIN_AGE25_64 <- ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0,\n  0.99, SIM_data$ORIGIN_AGE25_64)\n\n\nYou can run the summary() again.\n\n\nShow the code\nsummary(SIM_data)\n\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS         FlowNoIntra      \n Length:14734       Length:14734       Min.   :     1   Min.   :     0.0  \n Class :character   Class :character   1st Qu.:    14   1st Qu.:    13.0  \n Mode  :character   Mode  :character   Median :    76   Median :    70.0  \n                                       Mean   :  1021   Mean   :   839.9  \n                                       3rd Qu.:   426   3rd Qu.:   379.0  \n                                       Max.   :232187   Max.   :148274.0  \n     offset              dist       ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :0.000001   Min.   :   50   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1.000000   1st Qu.: 3346   1st Qu.: 240.00   1st Qu.:  440.00  \n Median :1.000000   Median : 6067   Median : 700.00   Median : 1350.00  \n Mean   :0.982150   Mean   : 6880   Mean   :1031.86   Mean   : 2268.84  \n 3rd Qu.:1.000000   3rd Qu.: 9729   3rd Qu.:1480.00   3rd Qu.: 3260.00  \n Max.   :1.000000   Max.   :26136   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.: 2200.00   1st Qu.: 240.00   1st Qu.:  460.00   1st Qu.: 2200.00  \n Median : 6810.00   Median : 720.00   Median : 1420.00   Median : 7030.00  \n Mean   :10487.62   Mean   :1033.40   Mean   : 2290.35   Mean   :10574.46  \n 3rd Qu.:15770.00   3rd Qu.:1500.00   3rd Qu.: 3260.00   3rd Qu.:15830.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\nNotice that all the 0 values have been replaced by 0.99."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#unconstrained-spatial-interaction-model",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#unconstrained-spatial-interaction-model",
    "title": "Hands-on Exercise 13",
    "section": "Unconstrained Spatial Interaction Model",
    "text": "Unconstrained Spatial Interaction Model\nIn this section, you will learn how to calibrate an unconstrained spatial interaction model by using glm() of Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. ORIGIN_AGE25_64) and distance between origin and destination in km (i.e. dist).\n\n\nShow the code\nuncSIM <- glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n           10.407308              0.244859              0.009562  \n           log(dist)  \n           -0.705896  \n\nDegrees of Freedom: 14733 Total (i.e. Null);  14730 Residual\nNull Deviance:      60800000 \nResidual Deviance: 36430000     AIC: 36520000"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#r-squared-function",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#r-squared-function",
    "title": "Hands-on Exercise 13",
    "section": "R-squared function",
    "text": "R-squared function\nIn order to measure how much variation of the trips can be accounted by the model we will write a function to calculate R-Squared value as shown below.\n\n\nShow the code\nCalcRSquared <- function(observed,estimated){\n  r <- cor(observed,estimated)\n  R2 <- r^2\n  R2\n}\n\n\nNext, we will compute the R-squared of the unconstrained SIM by using the code chunk below.\n\n\nShow the code\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n\n[1] 0.1892576\n\n\n\n\nShow the code\nr2_mcfadden(uncSIM)\n\n\n# R2 for Generalized Linear Regression\n       R2: 0.400\n  adj. R2: 0.400"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#origin-production-constrained-sim",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#origin-production-constrained-sim",
    "title": "Hands-on Exercise 13",
    "section": "Origin (Production) constrained SIM",
    "text": "Origin (Production) constrained SIM\nIn this section, we will fit an origin constrained SIM by using the code3 chunk below.\nThe general formula of Origin Constrained Spatial Interaction Model\n\n\nShow the code\norcSIM <- glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(>|z|)    \n(Intercept)           1.211e+01  3.785e-03  3199.012  < 2e-16 ***\nORIGIN_SZAMSZ02       1.008e+00  4.450e-03   226.401  < 2e-16 ***\nORIGIN_SZAMSZ03       5.474e-01  4.563e-03   119.959  < 2e-16 ***\nORIGIN_SZAMSZ04      -7.494e-02  5.187e-03   -14.448  < 2e-16 ***\nORIGIN_SZAMSZ05      -2.006e-01  5.790e-03   -34.650  < 2e-16 ***\nORIGIN_SZAMSZ06       4.193e-01  5.130e-03    81.736  < 2e-16 ***\nORIGIN_SZAMSZ07      -1.372e+00  9.683e-03  -141.686  < 2e-16 ***\nORIGIN_SZAMSZ08      -1.022e+00  8.956e-03  -114.087  < 2e-16 ***\nORIGIN_SZAMSZ09       2.239e-01  5.408e-03    41.396  < 2e-16 ***\nORIGIN_SZAMSZ10       5.061e-01  4.716e-03   107.311  < 2e-16 ***\nORIGIN_SZAMSZ11      -1.856e+00  1.285e-02  -144.414  < 2e-16 ***\nORIGIN_SZAMSZ12      -1.580e+00  1.076e-02  -146.883  < 2e-16 ***\nORIGIN_SZBDSZ01       1.072e+00  4.345e-03   246.734  < 2e-16 ***\nORIGIN_SZBDSZ02       5.198e-01  5.079e-03   102.340  < 2e-16 ***\nORIGIN_SZBDSZ03       9.865e-01  4.490e-03   219.724  < 2e-16 ***\nORIGIN_SZBDSZ04       1.767e+00  3.894e-03   453.646  < 2e-16 ***\nORIGIN_SZBDSZ05       6.395e-01  4.546e-03   140.691  < 2e-16 ***\nORIGIN_SZBDSZ06       9.363e-01  4.543e-03   206.094  < 2e-16 ***\nORIGIN_SZBDSZ07      -1.281e+00  9.558e-03  -133.991  < 2e-16 ***\nORIGIN_SZBDSZ08      -1.167e+00  9.032e-03  -129.194  < 2e-16 ***\nORIGIN_SZBKSZ01      -4.540e-01  6.538e-03   -69.437  < 2e-16 ***\nORIGIN_SZBKSZ02       3.736e-01  5.115e-03    73.050  < 2e-16 ***\nORIGIN_SZBKSZ03       5.841e-01  4.934e-03   118.375  < 2e-16 ***\nORIGIN_SZBKSZ04      -1.177e-01  5.914e-03   -19.895  < 2e-16 ***\nORIGIN_SZBKSZ05      -2.164e-01  5.832e-03   -37.115  < 2e-16 ***\nORIGIN_SZBKSZ06       3.684e-03  5.873e-03     0.627  0.53048    \nORIGIN_SZBKSZ07       7.456e-01  4.426e-03   168.439  < 2e-16 ***\nORIGIN_SZBKSZ08      -2.279e-02  5.348e-03    -4.261 2.04e-05 ***\nORIGIN_SZBKSZ09      -9.572e-02  5.721e-03   -16.733  < 2e-16 ***\nORIGIN_SZBLSZ01      -1.688e+00  1.482e-02  -113.887  < 2e-16 ***\nORIGIN_SZBLSZ02      -2.154e+00  1.924e-02  -111.980  < 2e-16 ***\nORIGIN_SZBLSZ03      -3.249e+00  3.930e-02   -82.662  < 2e-16 ***\nORIGIN_SZBLSZ04      -2.203e+00  2.306e-02   -95.557  < 2e-16 ***\nORIGIN_SZBMSZ01      -1.267e-01  5.222e-03   -24.266  < 2e-16 ***\nORIGIN_SZBMSZ02      -1.075e+00  6.742e-03  -159.386  < 2e-16 ***\nORIGIN_SZBMSZ03      -4.386e-01  5.794e-03   -75.707  < 2e-16 ***\nORIGIN_SZBMSZ04      -6.333e-02  5.157e-03   -12.280  < 2e-16 ***\nORIGIN_SZBMSZ05      -2.256e+00  1.247e-02  -180.957  < 2e-16 ***\nORIGIN_SZBMSZ06      -2.378e+00  1.618e-02  -147.029  < 2e-16 ***\nORIGIN_SZBMSZ07      -4.769e-01  5.653e-03   -84.362  < 2e-16 ***\nORIGIN_SZBMSZ08      -5.652e-01  5.811e-03   -97.259  < 2e-16 ***\nORIGIN_SZBMSZ09      -1.232e+00  8.688e-03  -141.760  < 2e-16 ***\nORIGIN_SZBMSZ10      -1.471e+00  9.130e-03  -161.131  < 2e-16 ***\nORIGIN_SZBMSZ11      -7.866e-01  6.595e-03  -119.263  < 2e-16 ***\nORIGIN_SZBMSZ12      -1.072e+00  9.149e-03  -117.206  < 2e-16 ***\nORIGIN_SZBMSZ13      -1.207e-01  5.691e-03   -21.218  < 2e-16 ***\nORIGIN_SZBMSZ14      -5.376e-01  6.629e-03   -81.098  < 2e-16 ***\nORIGIN_SZBMSZ15      -3.253e-01  6.054e-03   -53.740  < 2e-16 ***\nORIGIN_SZBMSZ16      -1.548e+00  9.144e-03  -169.303  < 2e-16 ***\nORIGIN_SZBMSZ17      -2.169e+00  1.576e-02  -137.622  < 2e-16 ***\nORIGIN_SZBPSZ01       1.369e-01  5.553e-03    24.660  < 2e-16 ***\nORIGIN_SZBPSZ02      -3.292e-02  6.462e-03    -5.094 3.50e-07 ***\nORIGIN_SZBPSZ03       1.491e-01  6.149e-03    24.241  < 2e-16 ***\nORIGIN_SZBPSZ04       3.544e-01  5.084e-03    69.711  < 2e-16 ***\nORIGIN_SZBPSZ05       5.454e-01  4.554e-03   119.764  < 2e-16 ***\nORIGIN_SZBPSZ06      -1.406e+00  9.311e-03  -151.045  < 2e-16 ***\nORIGIN_SZBPSZ07      -1.004e+00  8.575e-03  -117.068  < 2e-16 ***\nORIGIN_SZBSSZ01      -1.625e-02  5.276e-03    -3.080  0.00207 ** \nORIGIN_SZBSSZ02       3.088e-01  4.787e-03    64.495  < 2e-16 ***\nORIGIN_SZBSSZ03       2.555e-01  4.689e-03    54.487  < 2e-16 ***\nORIGIN_SZBTSZ01      -6.646e-02  5.385e-03   -12.340  < 2e-16 ***\nORIGIN_SZBTSZ02      -1.078e+00  7.797e-03  -138.225  < 2e-16 ***\nORIGIN_SZBTSZ03      -2.284e-01  5.727e-03   -39.876  < 2e-16 ***\nORIGIN_SZBTSZ04      -1.053e+00  1.019e-02  -103.339  < 2e-16 ***\nORIGIN_SZBTSZ05      -1.647e+00  1.100e-02  -149.690  < 2e-16 ***\nORIGIN_SZBTSZ06      -7.804e-01  7.181e-03  -108.682  < 2e-16 ***\nORIGIN_SZBTSZ07      -2.298e+00  1.321e-02  -173.921  < 2e-16 ***\nORIGIN_SZBTSZ08      -1.283e+00  9.394e-03  -136.560  < 2e-16 ***\nORIGIN_SZCBSZ01      -1.911e+00  5.483e-02   -34.844  < 2e-16 ***\nORIGIN_SZCCSZ01      -1.758e+00  1.331e-02  -132.099  < 2e-16 ***\nORIGIN_SZCHSZ01      -1.236e+00  1.178e-02  -104.954  < 2e-16 ***\nORIGIN_SZCHSZ02      -5.424e-01  7.940e-03   -68.307  < 2e-16 ***\nORIGIN_SZCHSZ03       4.332e-01  5.841e-03    74.153  < 2e-16 ***\nORIGIN_SZCKSZ01       1.843e-01  5.117e-03    36.007  < 2e-16 ***\nORIGIN_SZCKSZ02       6.800e-01  5.087e-03   133.672  < 2e-16 ***\nORIGIN_SZCKSZ03       8.030e-01  4.522e-03   177.574  < 2e-16 ***\nORIGIN_SZCKSZ04       1.298e+00  4.562e-03   284.446  < 2e-16 ***\nORIGIN_SZCKSZ05       1.011e+00  5.305e-03   190.602  < 2e-16 ***\nORIGIN_SZCKSZ06       1.262e+00  5.042e-03   250.262  < 2e-16 ***\nORIGIN_SZCLSZ01      -6.805e-01  7.661e-03   -88.836  < 2e-16 ***\nORIGIN_SZCLSZ02      -1.837e+00  1.364e-02  -134.665  < 2e-16 ***\nORIGIN_SZCLSZ03      -1.001e+00  7.949e-03  -125.969  < 2e-16 ***\nORIGIN_SZCLSZ04       6.966e-01  4.460e-03   156.204  < 2e-16 ***\nORIGIN_SZCLSZ05      -1.974e+00  1.474e-02  -133.906  < 2e-16 ***\nORIGIN_SZCLSZ06       8.585e-01  4.204e-03   204.230  < 2e-16 ***\nORIGIN_SZCLSZ07      -2.974e-01  5.575e-03   -53.346  < 2e-16 ***\nORIGIN_SZCLSZ08       3.231e-01  5.802e-03    55.688  < 2e-16 ***\nORIGIN_SZCLSZ09      -1.697e+00  1.555e-02  -109.106  < 2e-16 ***\nORIGIN_SZDTSZ02      -4.061e+00  8.341e-02   -48.693  < 2e-16 ***\nORIGIN_SZDTSZ03      -4.031e+00  7.381e-02   -54.618  < 2e-16 ***\nORIGIN_SZDTSZ13      -3.000e+00  3.129e-02   -95.889  < 2e-16 ***\nORIGIN_SZGLSZ01      -1.405e+00  9.192e-03  -152.876  < 2e-16 ***\nORIGIN_SZGLSZ02       2.536e-01  4.889e-03    51.880  < 2e-16 ***\nORIGIN_SZGLSZ03       2.411e-01  4.855e-03    49.649  < 2e-16 ***\nORIGIN_SZGLSZ04       8.350e-01  4.200e-03   198.826  < 2e-16 ***\nORIGIN_SZGLSZ05       6.207e-01  4.375e-03   141.857  < 2e-16 ***\nORIGIN_SZHGSZ01       2.806e-01  4.746e-03    59.121  < 2e-16 ***\nORIGIN_SZHGSZ02       4.917e-01  4.712e-03   104.351  < 2e-16 ***\nORIGIN_SZHGSZ03       2.452e-01  5.113e-03    47.952  < 2e-16 ***\nORIGIN_SZHGSZ04       9.052e-01  4.303e-03   210.358  < 2e-16 ***\nORIGIN_SZHGSZ05       1.170e+00  4.253e-03   275.033  < 2e-16 ***\nORIGIN_SZHGSZ06      -1.016e-01  5.413e-03   -18.773  < 2e-16 ***\nORIGIN_SZHGSZ07       6.984e-01  4.455e-03   156.757  < 2e-16 ***\nORIGIN_SZHGSZ08       1.005e-01  5.354e-03    18.781  < 2e-16 ***\nORIGIN_SZHGSZ09      -5.390e-01  6.962e-03   -77.417  < 2e-16 ***\nORIGIN_SZHGSZ10      -3.512e+00  4.211e-02   -83.388  < 2e-16 ***\nORIGIN_SZJESZ01       4.022e-01  4.869e-03    82.601  < 2e-16 ***\nORIGIN_SZJESZ02       2.273e-01  4.924e-03    46.158  < 2e-16 ***\nORIGIN_SZJESZ03       1.829e-01  5.286e-03    34.598  < 2e-16 ***\nORIGIN_SZJESZ04      -1.177e+00  9.142e-03  -128.767  < 2e-16 ***\nORIGIN_SZJESZ05      -2.065e+00  1.382e-02  -149.494  < 2e-16 ***\nORIGIN_SZJESZ06       2.301e-01  4.853e-03    47.410  < 2e-16 ***\nORIGIN_SZJESZ07      -1.889e+00  1.183e-02  -159.599  < 2e-16 ***\nORIGIN_SZJESZ08      -1.062e+00  1.147e-02   -92.551  < 2e-16 ***\nORIGIN_SZJESZ09       5.237e-01  4.959e-03   105.612  < 2e-16 ***\nORIGIN_SZJESZ10      -1.829e+00  1.800e-02  -101.616  < 2e-16 ***\nORIGIN_SZJESZ11      -2.023e+00  1.931e-02  -104.738  < 2e-16 ***\nORIGIN_SZJWSZ01       2.125e-01  6.405e-03    33.183  < 2e-16 ***\nORIGIN_SZJWSZ02       8.858e-01  4.521e-03   195.929  < 2e-16 ***\nORIGIN_SZJWSZ03       1.269e+00  4.188e-03   302.922  < 2e-16 ***\nORIGIN_SZJWSZ04       1.284e+00  4.280e-03   300.017  < 2e-16 ***\nORIGIN_SZJWSZ05      -1.393e+00  1.252e-02  -111.339  < 2e-16 ***\nORIGIN_SZJWSZ06      -1.015e+00  1.067e-02   -95.109  < 2e-16 ***\nORIGIN_SZJWSZ07      -2.694e+00  2.751e-02   -97.911  < 2e-16 ***\nORIGIN_SZJWSZ08       1.950e+00  4.110e-03   474.430  < 2e-16 ***\nORIGIN_SZJWSZ09       1.831e+00  3.899e-03   469.595  < 2e-16 ***\nORIGIN_SZKLSZ01       1.636e-01  4.902e-03    33.374  < 2e-16 ***\nORIGIN_SZKLSZ02      -5.156e-01  6.321e-03   -81.570  < 2e-16 ***\nORIGIN_SZKLSZ03      -4.145e-01  5.949e-03   -69.666  < 2e-16 ***\nORIGIN_SZKLSZ04      -2.283e+00  1.187e-02  -192.327  < 2e-16 ***\nORIGIN_SZKLSZ05      -8.593e-01  8.272e-03  -103.882  < 2e-16 ***\nORIGIN_SZKLSZ06      -4.709e+00  1.857e-01   -25.352  < 2e-16 ***\nORIGIN_SZKLSZ07      -1.123e+00  8.408e-03  -133.615  < 2e-16 ***\nORIGIN_SZKLSZ08      -1.476e+00  9.152e-03  -161.321  < 2e-16 ***\nORIGIN_SZLKSZ01      -3.273e+00  3.875e-02   -84.465  < 2e-16 ***\nORIGIN_SZMDSZ01      -2.615e+00  2.802e-02   -93.303  < 2e-16 ***\nORIGIN_SZMDSZ02      -8.945e-01  1.035e-02   -86.389  < 2e-16 ***\nORIGIN_SZMDSZ03      -1.998e+00  1.703e-02  -117.297  < 2e-16 ***\nORIGIN_SZMPSZ01      -1.093e+00  8.367e-03  -130.656  < 2e-16 ***\nORIGIN_SZMPSZ02      -5.975e-01  6.898e-03   -86.616  < 2e-16 ***\nORIGIN_SZMPSZ03      -9.706e-03  5.319e-03    -1.825  0.06804 .  \nORIGIN_SZMUSZ02      -3.923e+00  1.038e-01   -37.806  < 2e-16 ***\nORIGIN_SZNTSZ01      -2.829e+00  3.529e-02   -80.157  < 2e-16 ***\nORIGIN_SZNTSZ02      -3.256e+00  2.323e-02  -140.180  < 2e-16 ***\nORIGIN_SZNTSZ03      -9.865e-01  7.777e-03  -126.848  < 2e-16 ***\nORIGIN_SZNTSZ05      -3.353e+00  4.964e-02   -67.546  < 2e-16 ***\nORIGIN_SZNTSZ06      -3.818e+00  5.576e-02   -68.483  < 2e-16 ***\nORIGIN_SZNVSZ01       4.449e-01  4.482e-03    99.269  < 2e-16 ***\nORIGIN_SZNVSZ02      -6.279e-01  6.470e-03   -97.044  < 2e-16 ***\nORIGIN_SZNVSZ03      -1.212e+00  7.788e-03  -155.644  < 2e-16 ***\nORIGIN_SZNVSZ04      -1.469e+00  9.091e-03  -161.543  < 2e-16 ***\nORIGIN_SZNVSZ05      -2.628e+00  1.579e-02  -166.466  < 2e-16 ***\nORIGIN_SZPGSZ01      -9.541e-01  1.223e-02   -78.035  < 2e-16 ***\nORIGIN_SZPGSZ02      -5.353e-01  7.233e-03   -74.009  < 2e-16 ***\nORIGIN_SZPGSZ03       9.574e-01  4.437e-03   215.779  < 2e-16 ***\nORIGIN_SZPGSZ04       1.110e+00  4.417e-03   251.169  < 2e-16 ***\nORIGIN_SZPGSZ05       2.658e-01  5.758e-03    46.156  < 2e-16 ***\nORIGIN_SZPLSZ01      -8.153e-01  1.044e-02   -78.119  < 2e-16 ***\nORIGIN_SZPLSZ02      -1.675e+00  1.478e-02  -113.340  < 2e-16 ***\nORIGIN_SZPLSZ03      -2.963e+00  3.672e-02   -80.686  < 2e-16 ***\nORIGIN_SZPLSZ04      -3.279e+00  3.684e-02   -89.012  < 2e-16 ***\nORIGIN_SZPLSZ05      -2.466e+00  2.245e-02  -109.864  < 2e-16 ***\nORIGIN_SZPNSZ01       1.411e+00  4.584e-03   307.690  < 2e-16 ***\nORIGIN_SZPNSZ02      -5.043e-01  1.108e-02   -45.503  < 2e-16 ***\nORIGIN_SZPNSZ03      -1.878e+00  1.940e-02   -96.796  < 2e-16 ***\nORIGIN_SZPNSZ04      -2.761e+00  3.112e-02   -88.706  < 2e-16 ***\nORIGIN_SZPNSZ05      -2.277e+00  2.628e-02   -86.662  < 2e-16 ***\nORIGIN_SZPRSZ01      -7.934e-01  1.142e-02   -69.499  < 2e-16 ***\nORIGIN_SZPRSZ02       9.414e-01  4.615e-03   203.981  < 2e-16 ***\nORIGIN_SZPRSZ03       7.674e-01  4.626e-03   165.881  < 2e-16 ***\nORIGIN_SZPRSZ04      -3.771e-01  7.516e-03   -50.168  < 2e-16 ***\nORIGIN_SZPRSZ05       1.327e+00  4.325e-03   306.737  < 2e-16 ***\nORIGIN_SZPRSZ06      -4.081e-01  8.651e-03   -47.172  < 2e-16 ***\nORIGIN_SZPRSZ07      -2.151e+00  1.610e-02  -133.558  < 2e-16 ***\nORIGIN_SZPRSZ08       5.293e-04  6.383e-03     0.083  0.93391    \nORIGIN_SZQTSZ01      -4.144e-01  6.846e-03   -60.539  < 2e-16 ***\nORIGIN_SZQTSZ02      -7.967e-01  6.327e-03  -125.933  < 2e-16 ***\nORIGIN_SZQTSZ03      -2.415e-01  5.681e-03   -42.509  < 2e-16 ***\nORIGIN_SZQTSZ04      -1.013e+00  7.129e-03  -142.123  < 2e-16 ***\nORIGIN_SZQTSZ05      -3.923e-01  5.994e-03   -65.446  < 2e-16 ***\nORIGIN_SZQTSZ06      -5.662e-01  6.481e-03   -87.359  < 2e-16 ***\nORIGIN_SZQTSZ07      -1.558e+00  9.635e-03  -161.662  < 2e-16 ***\nORIGIN_SZQTSZ08      -1.577e-01  5.699e-03   -27.665  < 2e-16 ***\nORIGIN_SZQTSZ09      -6.189e-01  6.633e-03   -93.312  < 2e-16 ***\nORIGIN_SZQTSZ10      -4.511e-01  6.512e-03   -69.271  < 2e-16 ***\nORIGIN_SZQTSZ11      -1.455e+00  9.800e-03  -148.421  < 2e-16 ***\nORIGIN_SZQTSZ12      -1.475e+00  1.044e-02  -141.309  < 2e-16 ***\nORIGIN_SZQTSZ13      -3.529e-01  6.413e-03   -55.038  < 2e-16 ***\nORIGIN_SZQTSZ14      -1.591e+00  9.847e-03  -161.565  < 2e-16 ***\nORIGIN_SZQTSZ15      -8.955e-01  1.027e-02   -87.184  < 2e-16 ***\nORIGIN_SZRCSZ01      -1.375e+00  1.265e-02  -108.704  < 2e-16 ***\nORIGIN_SZRCSZ06      -6.196e-01  8.475e-03   -73.116  < 2e-16 ***\nORIGIN_SZRVSZ01      -3.523e+00  3.237e-02  -108.818  < 2e-16 ***\nORIGIN_SZRVSZ02      -2.912e+00  2.776e-02  -104.868  < 2e-16 ***\nORIGIN_SZRVSZ03      -3.145e+00  2.379e-02  -132.232  < 2e-16 ***\nORIGIN_SZRVSZ04      -3.357e+00  5.567e-02   -60.309  < 2e-16 ***\nORIGIN_SZRVSZ05      -2.438e+00  1.644e-02  -148.272  < 2e-16 ***\nORIGIN_SZSBSZ01       5.890e-01  5.529e-03   106.520  < 2e-16 ***\nORIGIN_SZSBSZ02      -7.098e-01  8.213e-03   -86.432  < 2e-16 ***\nORIGIN_SZSBSZ03       9.634e-01  4.611e-03   208.943  < 2e-16 ***\nORIGIN_SZSBSZ04       7.729e-01  5.289e-03   146.136  < 2e-16 ***\nORIGIN_SZSBSZ05      -9.966e-02  6.543e-03   -15.231  < 2e-16 ***\nORIGIN_SZSBSZ06      -1.778e+00  1.719e-02  -103.427  < 2e-16 ***\nORIGIN_SZSBSZ07      -1.161e+00  1.256e-02   -92.436  < 2e-16 ***\nORIGIN_SZSBSZ08      -1.212e+00  1.222e-02   -99.227  < 2e-16 ***\nORIGIN_SZSBSZ09      -5.783e-01  8.579e-03   -67.412  < 2e-16 ***\nORIGIN_SZSESZ02       9.999e-01  4.409e-03   226.798  < 2e-16 ***\nORIGIN_SZSESZ03       1.214e+00  4.164e-03   291.675  < 2e-16 ***\nORIGIN_SZSESZ04       8.141e-01  4.868e-03   167.238  < 2e-16 ***\nORIGIN_SZSESZ05      -2.186e-01  5.915e-03   -36.961  < 2e-16 ***\nORIGIN_SZSESZ06       7.298e-01  4.689e-03   155.641  < 2e-16 ***\nORIGIN_SZSESZ07      -2.543e+00  1.961e-02  -129.689  < 2e-16 ***\nORIGIN_SZSGSZ01      -1.016e+00  8.550e-03  -118.869  < 2e-16 ***\nORIGIN_SZSGSZ02      -1.120e+00  9.589e-03  -116.799  < 2e-16 ***\nORIGIN_SZSGSZ03       2.169e-01  5.167e-03    41.970  < 2e-16 ***\nORIGIN_SZSGSZ04       2.672e-01  4.792e-03    55.757  < 2e-16 ***\nORIGIN_SZSGSZ05      -1.785e+00  1.060e-02  -168.456  < 2e-16 ***\nORIGIN_SZSGSZ06       4.017e-01  4.541e-03    88.470  < 2e-16 ***\nORIGIN_SZSGSZ07      -6.303e-01  6.235e-03  -101.098  < 2e-16 ***\nORIGIN_SZSKSZ01      -1.928e-01  7.765e-03   -24.826  < 2e-16 ***\nORIGIN_SZSKSZ02       3.870e-01  5.689e-03    68.026  < 2e-16 ***\nORIGIN_SZSKSZ03      -6.815e-01  7.983e-03   -85.369  < 2e-16 ***\nORIGIN_SZSKSZ04      -2.528e+00  2.702e-02   -93.548  < 2e-16 ***\nORIGIN_SZSKSZ05      -1.370e+00  1.552e-02   -88.311  < 2e-16 ***\nORIGIN_SZSLSZ01      -3.218e+00  3.058e-02  -105.238  < 2e-16 ***\nORIGIN_SZSLSZ04      -6.800e-01  7.683e-03   -88.497  < 2e-16 ***\nORIGIN_SZSRSZ01      -2.389e+00  1.583e-02  -150.989  < 2e-16 ***\nORIGIN_SZTHSZ01      -2.183e+00  4.887e-02   -44.666  < 2e-16 ***\nORIGIN_SZTHSZ03      -2.243e+00  2.243e-02  -100.025  < 2e-16 ***\nORIGIN_SZTHSZ04      -2.005e+00  2.869e-02   -69.879  < 2e-16 ***\nORIGIN_SZTHSZ06      -2.276e+00  1.784e-02  -127.557  < 2e-16 ***\nORIGIN_SZTMSZ01       4.015e-01  5.814e-03    69.048  < 2e-16 ***\nORIGIN_SZTMSZ02       2.222e+00  3.795e-03   585.568  < 2e-16 ***\nORIGIN_SZTMSZ03       1.412e+00  4.108e-03   343.608  < 2e-16 ***\nORIGIN_SZTMSZ04       9.106e-01  4.742e-03   192.036  < 2e-16 ***\nORIGIN_SZTMSZ05      -3.259e-01  7.534e-03   -43.253  < 2e-16 ***\nORIGIN_SZTNSZ01      -1.806e+00  1.038e-02  -174.076  < 2e-16 ***\nORIGIN_SZTNSZ02      -1.741e+00  9.778e-03  -178.108  < 2e-16 ***\nORIGIN_SZTNSZ03      -2.277e+00  1.338e-02  -170.199  < 2e-16 ***\nORIGIN_SZTNSZ04      -7.703e-01  7.197e-03  -107.032  < 2e-16 ***\nORIGIN_SZTPSZ01      -6.466e-01  6.287e-03  -102.841  < 2e-16 ***\nORIGIN_SZTPSZ02       4.633e-01  4.347e-03   106.578  < 2e-16 ***\nORIGIN_SZTPSZ03      -5.186e-01  6.085e-03   -85.234  < 2e-16 ***\nORIGIN_SZTPSZ04      -2.900e-01  5.779e-03   -50.190  < 2e-16 ***\nORIGIN_SZTPSZ05      -2.169e-01  6.072e-03   -35.720  < 2e-16 ***\nORIGIN_SZTPSZ06       3.357e-01  5.942e-03    56.486  < 2e-16 ***\nORIGIN_SZTPSZ07      -2.517e-01  6.317e-03   -39.846  < 2e-16 ***\nORIGIN_SZTPSZ08      -1.075e+00  9.109e-03  -118.034  < 2e-16 ***\nORIGIN_SZTPSZ09      -3.708e-01  6.189e-03   -59.903  < 2e-16 ***\nORIGIN_SZTPSZ10      -6.889e-01  7.634e-03   -90.229  < 2e-16 ***\nORIGIN_SZTPSZ11       7.661e-02  5.459e-03    14.033  < 2e-16 ***\nORIGIN_SZTPSZ12      -5.971e-01  6.522e-03   -91.552  < 2e-16 ***\nORIGIN_SZTSSZ01      -3.517e+00  4.739e-02   -74.210  < 2e-16 ***\nORIGIN_SZTSSZ02       3.022e-01  7.334e-03    41.203  < 2e-16 ***\nORIGIN_SZTSSZ03       3.730e-01  7.073e-03    52.733  < 2e-16 ***\nORIGIN_SZTSSZ04       3.610e-01  7.463e-03    48.372  < 2e-16 ***\nORIGIN_SZTSSZ05      -1.103e+00  1.404e-02   -78.566  < 2e-16 ***\nORIGIN_SZTSSZ06      -1.310e+00  1.718e-02   -76.286  < 2e-16 ***\nORIGIN_SZWCSZ01      -1.233e-01  7.861e-03   -15.690  < 2e-16 ***\nORIGIN_SZWCSZ02      -2.872e+00  3.159e-02   -90.911  < 2e-16 ***\nORIGIN_SZWCSZ03      -4.138e+00  1.241e-01   -33.349  < 2e-16 ***\nORIGIN_SZWDSZ01       1.370e+00  4.146e-03   330.448  < 2e-16 ***\nORIGIN_SZWDSZ02       1.041e+00  4.747e-03   219.219  < 2e-16 ***\nORIGIN_SZWDSZ03       2.189e+00  4.035e-03   542.344  < 2e-16 ***\nORIGIN_SZWDSZ04       1.142e+00  4.963e-03   230.074  < 2e-16 ***\nORIGIN_SZWDSZ05       5.160e-01  4.998e-03   103.230  < 2e-16 ***\nORIGIN_SZWDSZ06       1.208e+00  4.611e-03   262.019  < 2e-16 ***\nORIGIN_SZWDSZ07      -3.805e-01  8.034e-03   -47.365  < 2e-16 ***\nORIGIN_SZWDSZ08      -4.839e-01  7.878e-03   -61.426  < 2e-16 ***\nORIGIN_SZWDSZ09       1.475e+00  4.401e-03   335.097  < 2e-16 ***\nORIGIN_SZYSSZ01      -1.552e-01  5.643e-03   -27.496  < 2e-16 ***\nORIGIN_SZYSSZ02       8.958e-01  4.973e-03   180.144  < 2e-16 ***\nORIGIN_SZYSSZ03       1.757e+00  4.275e-03   411.050  < 2e-16 ***\nORIGIN_SZYSSZ04       8.439e-01  4.538e-03   185.955  < 2e-16 ***\nORIGIN_SZYSSZ05      -9.995e-02  5.920e-03   -16.884  < 2e-16 ***\nORIGIN_SZYSSZ06      -1.175e+00  1.079e-02  -108.835  < 2e-16 ***\nORIGIN_SZYSSZ07      -1.202e+00  1.127e-02  -106.642  < 2e-16 ***\nORIGIN_SZYSSZ08       1.244e-02  6.104e-03     2.039  0.04148 *  \nORIGIN_SZYSSZ09       1.385e+00  4.239e-03   326.757  < 2e-16 ***\nlog(DESTIN_AGE25_64)  2.298e-02  8.832e-05   260.146  < 2e-16 ***\nlog(dist)            -6.947e-01  1.295e-04 -5363.438  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 60796037  on 14733  degrees of freedom\nResidual deviance: 26726668  on 14453  degrees of freedom\nAIC: 26818857\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\n\nShow the code\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n\n[1] 0.4165837"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#destination-constrained",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#destination-constrained",
    "title": "Hands-on Exercise 13",
    "section": "Destination constrained",
    "text": "Destination constrained\nIn this section, we will fit a destination constrained SIM by using the code chunk below.\nThe general formula of Destination Constrained Spatial Interaction Model\n\n\nShow the code\ndecSIM <- glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(>|z|)    \n(Intercept)          10.8110189  0.0033476  3229.499  < 2e-16 ***\nDESTIN_SZAMSZ02       0.1775885  0.0041530    42.761  < 2e-16 ***\nDESTIN_SZAMSZ03       0.2064091  0.0040888    50.482  < 2e-16 ***\nDESTIN_SZAMSZ04      -0.9406455  0.0060637  -155.127  < 2e-16 ***\nDESTIN_SZAMSZ05      -1.1578100  0.0061804  -187.337  < 2e-16 ***\nDESTIN_SZAMSZ06      -0.8861493  0.0059241  -149.584  < 2e-16 ***\nDESTIN_SZAMSZ07      -1.7712447  0.0096070  -184.370  < 2e-16 ***\nDESTIN_SZAMSZ08      -1.0707197  0.0067763  -158.009  < 2e-16 ***\nDESTIN_SZAMSZ09      -0.9682250  0.0060435  -160.210  < 2e-16 ***\nDESTIN_SZAMSZ10       0.2612773  0.0043738    59.737  < 2e-16 ***\nDESTIN_SZAMSZ11      -0.3714704  0.0086200   -43.094  < 2e-16 ***\nDESTIN_SZAMSZ12       0.0250455  0.0049850     5.024 5.06e-07 ***\nDESTIN_SZBDSZ01       0.5154763  0.0037827   136.271  < 2e-16 ***\nDESTIN_SZBDSZ02      -0.2843120  0.0049517   -57.417  < 2e-16 ***\nDESTIN_SZBDSZ03      -0.0134646  0.0042692    -3.154  0.00161 ** \nDESTIN_SZBDSZ04       1.0014441  0.0034463   290.582  < 2e-16 ***\nDESTIN_SZBDSZ05       0.3721573  0.0038992    95.445  < 2e-16 ***\nDESTIN_SZBDSZ06       0.2013935  0.0042182    47.744  < 2e-16 ***\nDESTIN_SZBDSZ07      -1.0642612  0.0092942  -114.508  < 2e-16 ***\nDESTIN_SZBDSZ08      -1.7769370  0.0105721  -168.077  < 2e-16 ***\nDESTIN_SZBKSZ01      -1.1944766  0.0065580  -182.141  < 2e-16 ***\nDESTIN_SZBKSZ02      -0.2604946  0.0052044   -50.053  < 2e-16 ***\nDESTIN_SZBKSZ03      -0.5905775  0.0055618  -106.184  < 2e-16 ***\nDESTIN_SZBKSZ04      -0.0521573  0.0048274   -10.804  < 2e-16 ***\nDESTIN_SZBKSZ05      -0.8258599  0.0057094  -144.650  < 2e-16 ***\nDESTIN_SZBKSZ06      -0.8696763  0.0060934  -142.725  < 2e-16 ***\nDESTIN_SZBKSZ07       0.2216292  0.0040334    54.949  < 2e-16 ***\nDESTIN_SZBKSZ08      -1.1179375  0.0068749  -162.612  < 2e-16 ***\nDESTIN_SZBKSZ09      -0.2888733  0.0049056   -58.886  < 2e-16 ***\nDESTIN_SZBLSZ01      -0.4487061  0.0070226   -63.894  < 2e-16 ***\nDESTIN_SZBLSZ02       0.6343096  0.0065174    97.326  < 2e-16 ***\nDESTIN_SZBLSZ03       1.3492337  0.0074135   181.997  < 2e-16 ***\nDESTIN_SZBLSZ04      -0.0339193  0.0131568    -2.578  0.00993 ** \nDESTIN_SZBMSZ01      -0.3497912  0.0046910   -74.567  < 2e-16 ***\nDESTIN_SZBMSZ02      -0.5995634  0.0048828  -122.792  < 2e-16 ***\nDESTIN_SZBMSZ03      -0.8726401  0.0056851  -153.495  < 2e-16 ***\nDESTIN_SZBMSZ04      -0.5350402  0.0048888  -109.442  < 2e-16 ***\nDESTIN_SZBMSZ05      -0.4981814  0.0065971   -75.515  < 2e-16 ***\nDESTIN_SZBMSZ06      -2.0640198  0.0123050  -167.739  < 2e-16 ***\nDESTIN_SZBMSZ07      -0.3100988  0.0045283   -68.480  < 2e-16 ***\nDESTIN_SZBMSZ08      -1.2748152  0.0062622  -203.573  < 2e-16 ***\nDESTIN_SZBMSZ09      -2.8056325  0.0143532  -195.471  < 2e-16 ***\nDESTIN_SZBMSZ10      -1.9166407  0.0089273  -214.693  < 2e-16 ***\nDESTIN_SZBMSZ11      -1.7261160  0.0079281  -217.722  < 2e-16 ***\nDESTIN_SZBMSZ12      -1.1495908  0.0077721  -147.912  < 2e-16 ***\nDESTIN_SZBMSZ13      -0.5428008  0.0050824  -106.799  < 2e-16 ***\nDESTIN_SZBMSZ14      -1.1422302  0.0076325  -149.653  < 2e-16 ***\nDESTIN_SZBMSZ15      -1.2217517  0.0068685  -177.878  < 2e-16 ***\nDESTIN_SZBMSZ16      -2.4074288  0.0107900  -223.116  < 2e-16 ***\nDESTIN_SZBMSZ17      -2.6985491  0.0164771  -163.776  < 2e-16 ***\nDESTIN_SZBPSZ01      -0.6183085  0.0054605  -113.233  < 2e-16 ***\nDESTIN_SZBPSZ02      -1.4579175  0.0083271  -175.080  < 2e-16 ***\nDESTIN_SZBPSZ03      -1.0775392  0.0075109  -143.463  < 2e-16 ***\nDESTIN_SZBPSZ04      -0.6645303  0.0058070  -114.436  < 2e-16 ***\nDESTIN_SZBPSZ05       0.3449386  0.0039504    87.318  < 2e-16 ***\nDESTIN_SZBPSZ06      -0.9360064  0.0077394  -120.941  < 2e-16 ***\nDESTIN_SZBPSZ07      -0.6850065  0.0077761   -88.091  < 2e-16 ***\nDESTIN_SZBSSZ01      -0.3144210  0.0045803   -68.647  < 2e-16 ***\nDESTIN_SZBSSZ02      -0.7531935  0.0051075  -147.469  < 2e-16 ***\nDESTIN_SZBSSZ03       0.1964072  0.0038255    51.342  < 2e-16 ***\nDESTIN_SZBTSZ01       0.0749897  0.0041584    18.033  < 2e-16 ***\nDESTIN_SZBTSZ02      -0.8214254  0.0065659  -125.105  < 2e-16 ***\nDESTIN_SZBTSZ03      -0.1672596  0.0047942   -34.888  < 2e-16 ***\nDESTIN_SZBTSZ04      -1.7727273  0.0103706  -170.938  < 2e-16 ***\nDESTIN_SZBTSZ05      -0.8162630  0.0067401  -121.105  < 2e-16 ***\nDESTIN_SZBTSZ06      -0.8159130  0.0059754  -136.546  < 2e-16 ***\nDESTIN_SZBTSZ07      -2.1139258  0.0105602  -200.178  < 2e-16 ***\nDESTIN_SZBTSZ08      -1.3565179  0.0086828  -156.231  < 2e-16 ***\nDESTIN_SZCBSZ01      -4.6643129  0.3162417   -14.749  < 2e-16 ***\nDESTIN_SZCCSZ01      -1.0088833  0.0080155  -125.866  < 2e-16 ***\nDESTIN_SZCHSZ01      -1.1909317  0.0095262  -125.017  < 2e-16 ***\nDESTIN_SZCHSZ02       0.0890035  0.0052277    17.025  < 2e-16 ***\nDESTIN_SZCHSZ03       1.4883985  0.0039094   380.724  < 2e-16 ***\nDESTIN_SZCKSZ01      -0.1684738  0.0047561   -35.422  < 2e-16 ***\nDESTIN_SZCKSZ02      -0.4314614  0.0051537   -83.720  < 2e-16 ***\nDESTIN_SZCKSZ03       0.6413457  0.0038639   165.983  < 2e-16 ***\nDESTIN_SZCKSZ04      -0.6370791  0.0059869  -106.412  < 2e-16 ***\nDESTIN_SZCKSZ05      -0.4185112  0.0065348   -64.044  < 2e-16 ***\nDESTIN_SZCKSZ06       0.7003888  0.0045139   155.163  < 2e-16 ***\nDESTIN_SZCLSZ01       0.3751343  0.0047400    79.143  < 2e-16 ***\nDESTIN_SZCLSZ02      -2.2913668  0.0133371  -171.804  < 2e-16 ***\nDESTIN_SZCLSZ03      -1.0498490  0.0076548  -137.149  < 2e-16 ***\nDESTIN_SZCLSZ04      -0.1118915  0.0044886   -24.928  < 2e-16 ***\nDESTIN_SZCLSZ05      -1.3113032  0.0084067  -155.983  < 2e-16 ***\nDESTIN_SZCLSZ06       0.1661786  0.0040203    41.334  < 2e-16 ***\nDESTIN_SZCLSZ07      -0.6429895  0.0052617  -122.202  < 2e-16 ***\nDESTIN_SZCLSZ08      -0.4271702  0.0057208   -74.670  < 2e-16 ***\nDESTIN_SZCLSZ09       0.3882136  0.0063758    60.888  < 2e-16 ***\nDESTIN_SZDTSZ02      -3.0106480  0.0348374   -86.420  < 2e-16 ***\nDESTIN_SZDTSZ03      -1.4195712  0.0144110   -98.506  < 2e-16 ***\nDESTIN_SZDTSZ13      -2.2368573  0.0161427  -138.567  < 2e-16 ***\nDESTIN_SZGLSZ01       0.0013721  0.0051224     0.268  0.78881    \nDESTIN_SZGLSZ02      -0.3376674  0.0046195   -73.097  < 2e-16 ***\nDESTIN_SZGLSZ03       0.3659900  0.0038384    95.350  < 2e-16 ***\nDESTIN_SZGLSZ04       0.2969928  0.0038026    78.103  < 2e-16 ***\nDESTIN_SZGLSZ05       0.1786445  0.0038853    45.980  < 2e-16 ***\nDESTIN_SZHGSZ01       0.2979206  0.0038825    76.735  < 2e-16 ***\nDESTIN_SZHGSZ02      -0.5701034  0.0051182  -111.388  < 2e-16 ***\nDESTIN_SZHGSZ03      -1.0387610  0.0061020  -170.233  < 2e-16 ***\nDESTIN_SZHGSZ04      -0.2264881  0.0043617   -51.926  < 2e-16 ***\nDESTIN_SZHGSZ05      -0.2287090  0.0044851   -50.993  < 2e-16 ***\nDESTIN_SZHGSZ06      -0.7896437  0.0054081  -146.010  < 2e-16 ***\nDESTIN_SZHGSZ07       0.2268880  0.0040336    56.249  < 2e-16 ***\nDESTIN_SZHGSZ08      -0.4260784  0.0048967   -87.013  < 2e-16 ***\nDESTIN_SZHGSZ09       0.1027784  0.0051341    20.019  < 2e-16 ***\nDESTIN_SZHGSZ10      -2.8571803  0.0262064  -109.026  < 2e-16 ***\nDESTIN_SZJESZ01      -0.0843635  0.0048222   -17.495  < 2e-16 ***\nDESTIN_SZJESZ02      -0.5197682  0.0051511  -100.904  < 2e-16 ***\nDESTIN_SZJESZ03      -0.6250311  0.0056619  -110.392  < 2e-16 ***\nDESTIN_SZJESZ04      -0.3937360  0.0065536   -60.080  < 2e-16 ***\nDESTIN_SZJESZ05      -0.9748291  0.0097665   -99.814  < 2e-16 ***\nDESTIN_SZJESZ06       0.3642736  0.0040600    89.722  < 2e-16 ***\nDESTIN_SZJESZ07      -1.1571882  0.0081557  -141.887  < 2e-16 ***\nDESTIN_SZJESZ08      -0.5955747  0.0078071   -76.286  < 2e-16 ***\nDESTIN_SZJESZ09      -0.3629500  0.0053966   -67.256  < 2e-16 ***\nDESTIN_SZJESZ10       0.7691552  0.0069348   110.912  < 2e-16 ***\nDESTIN_SZJESZ11       0.9365743  0.0065801   142.335  < 2e-16 ***\nDESTIN_SZJWSZ01      -0.4568805  0.0064536   -70.795  < 2e-16 ***\nDESTIN_SZJWSZ02      -0.2880426  0.0051632   -55.788  < 2e-16 ***\nDESTIN_SZJWSZ03       0.6680404  0.0039264   170.142  < 2e-16 ***\nDESTIN_SZJWSZ04       0.9492158  0.0037186   255.262  < 2e-16 ***\nDESTIN_SZJWSZ05      -0.1938053  0.0060810   -31.871  < 2e-16 ***\nDESTIN_SZJWSZ06       0.3813164  0.0054551    69.900  < 2e-16 ***\nDESTIN_SZJWSZ07      -1.2676010  0.0280038   -45.265  < 2e-16 ***\nDESTIN_SZJWSZ08       0.5013149  0.0044573   112.471  < 2e-16 ***\nDESTIN_SZJWSZ09       1.4161404  0.0033937   417.291  < 2e-16 ***\nDESTIN_SZKLSZ01      -0.6909444  0.0051540  -134.059  < 2e-16 ***\nDESTIN_SZKLSZ02      -0.8146023  0.0057129  -142.589  < 2e-16 ***\nDESTIN_SZKLSZ03      -1.3956114  0.0065167  -214.161  < 2e-16 ***\nDESTIN_SZKLSZ04      -1.9070281  0.0087370  -218.270  < 2e-16 ***\nDESTIN_SZKLSZ05      -0.9293576  0.0071070  -130.766  < 2e-16 ***\nDESTIN_SZKLSZ06      -2.5402234  0.0362062   -70.160  < 2e-16 ***\nDESTIN_SZKLSZ07      -1.2017213  0.0065751  -182.769  < 2e-16 ***\nDESTIN_SZKLSZ08      -0.6083433  0.0050916  -119.480  < 2e-16 ***\nDESTIN_SZLKSZ01      -1.5186810  0.0204155   -74.389  < 2e-16 ***\nDESTIN_SZMDSZ01      -1.4601772  0.0198347   -73.617  < 2e-16 ***\nDESTIN_SZMDSZ02      -1.1554609  0.0111345  -103.773  < 2e-16 ***\nDESTIN_SZMDSZ03      -2.9919337  0.0250838  -119.277  < 2e-16 ***\nDESTIN_SZMPSZ01      -1.1705809  0.0077128  -151.771  < 2e-16 ***\nDESTIN_SZMPSZ02      -0.9380957  0.0060321  -155.517  < 2e-16 ***\nDESTIN_SZMPSZ03      -0.1761013  0.0046389   -37.962  < 2e-16 ***\nDESTIN_SZMUSZ02      -2.4525115  0.0199630  -122.853  < 2e-16 ***\nDESTIN_SZNTSZ01      -3.6605524  0.0447752   -81.754  < 2e-16 ***\nDESTIN_SZNTSZ02      -2.0082021  0.0108736  -184.686  < 2e-16 ***\nDESTIN_SZNTSZ03      -1.2387489  0.0076141  -162.691  < 2e-16 ***\nDESTIN_SZNTSZ05      -1.8054361  0.0249540   -72.351  < 2e-16 ***\nDESTIN_SZNTSZ06      -2.9500517  0.0428601   -68.830  < 2e-16 ***\nDESTIN_SZNVSZ01      -0.4089022  0.0044288   -92.327  < 2e-16 ***\nDESTIN_SZNVSZ02      -0.6865452  0.0052770  -130.102  < 2e-16 ***\nDESTIN_SZNVSZ03      -0.7333670  0.0054243  -135.199  < 2e-16 ***\nDESTIN_SZNVSZ04      -2.2095097  0.0106997  -206.503  < 2e-16 ***\nDESTIN_SZNVSZ05      -1.8721104  0.0089058  -210.212  < 2e-16 ***\nDESTIN_SZPGSZ01      -1.8756618  0.0153008  -122.586  < 2e-16 ***\nDESTIN_SZPGSZ02      -0.9435337  0.0067224  -140.356  < 2e-16 ***\nDESTIN_SZPGSZ03       0.3458476  0.0040152    86.134  < 2e-16 ***\nDESTIN_SZPGSZ04      -0.0271485  0.0044805    -6.059 1.37e-09 ***\nDESTIN_SZPGSZ05      -0.8920273  0.0070730  -126.117  < 2e-16 ***\nDESTIN_SZPLSZ01      -0.2153087  0.0068270   -31.538  < 2e-16 ***\nDESTIN_SZPLSZ02      -1.3646116  0.0131155  -104.046  < 2e-16 ***\nDESTIN_SZPLSZ03      -0.0869245  0.0095838    -9.070  < 2e-16 ***\nDESTIN_SZPLSZ04      -0.2574560  0.0093336   -27.584  < 2e-16 ***\nDESTIN_SZPLSZ05      -0.7186364  0.0116835   -61.509  < 2e-16 ***\nDESTIN_SZPNSZ01       1.1326963  0.0049977   226.643  < 2e-16 ***\nDESTIN_SZPNSZ02       1.6516855  0.0064492   256.106  < 2e-16 ***\nDESTIN_SZPNSZ03       0.8504093  0.0077034   110.394  < 2e-16 ***\nDESTIN_SZPNSZ04       1.6891381  0.0075802   222.836  < 2e-16 ***\nDESTIN_SZPNSZ05       0.7402750  0.0115948    63.845  < 2e-16 ***\nDESTIN_SZPRSZ01      -1.0257636  0.0084652  -121.175  < 2e-16 ***\nDESTIN_SZPRSZ02      -0.2028503  0.0049839   -40.701  < 2e-16 ***\nDESTIN_SZPRSZ03       0.5560483  0.0038496   144.442  < 2e-16 ***\nDESTIN_SZPRSZ04      -0.6824142  0.0079047   -86.330  < 2e-16 ***\nDESTIN_SZPRSZ05       0.0316117  0.0044946     7.033 2.02e-12 ***\nDESTIN_SZPRSZ06       0.3706283  0.0052006    71.267  < 2e-16 ***\nDESTIN_SZPRSZ07      -1.4740460  0.0117304  -125.661  < 2e-16 ***\nDESTIN_SZPRSZ08      -0.7869180  0.0064862  -121.321  < 2e-16 ***\nDESTIN_SZQTSZ01      -1.2790095  0.0085392  -149.781  < 2e-16 ***\nDESTIN_SZQTSZ02      -1.4989188  0.0073423  -204.149  < 2e-16 ***\nDESTIN_SZQTSZ03      -0.9334132  0.0064035  -145.765  < 2e-16 ***\nDESTIN_SZQTSZ04      -1.0506142  0.0065335  -160.805  < 2e-16 ***\nDESTIN_SZQTSZ05      -0.9765013  0.0058471  -167.006  < 2e-16 ***\nDESTIN_SZQTSZ06      -1.2206088  0.0063560  -192.042  < 2e-16 ***\nDESTIN_SZQTSZ07      -1.6794007  0.0108727  -154.460  < 2e-16 ***\nDESTIN_SZQTSZ08      -0.1214413  0.0047980   -25.311  < 2e-16 ***\nDESTIN_SZQTSZ09      -0.5252607  0.0057371   -91.555  < 2e-16 ***\nDESTIN_SZQTSZ10      -0.5981644  0.0054192  -110.378  < 2e-16 ***\nDESTIN_SZQTSZ11      -0.0766021  0.0053446   -14.333  < 2e-16 ***\nDESTIN_SZQTSZ12      -0.6153017  0.0070680   -87.054  < 2e-16 ***\nDESTIN_SZQTSZ13      -0.1690535  0.0051315   -32.944  < 2e-16 ***\nDESTIN_SZQTSZ14      -0.5398362  0.0062233   -86.744  < 2e-16 ***\nDESTIN_SZQTSZ15      -0.1873015  0.0073132   -25.611  < 2e-16 ***\nDESTIN_SZRCSZ01      -0.5875494  0.0071798   -81.833  < 2e-16 ***\nDESTIN_SZRCSZ06      -2.0856090  0.0188789  -110.473  < 2e-16 ***\nDESTIN_SZRVSZ01      -2.6183708  0.0162319  -161.310  < 2e-16 ***\nDESTIN_SZRVSZ02      -3.1882190  0.0326141   -97.756  < 2e-16 ***\nDESTIN_SZRVSZ03      -2.5981974  0.0135074  -192.353  < 2e-16 ***\nDESTIN_SZRVSZ04      -1.9741504  0.0154961  -127.396  < 2e-16 ***\nDESTIN_SZRVSZ05      -3.1547734  0.0256310  -123.084  < 2e-16 ***\nDESTIN_SZSBSZ01      -0.3097949  0.0060601   -51.121  < 2e-16 ***\nDESTIN_SZSBSZ02      -1.1229132  0.0076338  -147.097  < 2e-16 ***\nDESTIN_SZSBSZ03       0.6289715  0.0041400   151.926  < 2e-16 ***\nDESTIN_SZSBSZ04       0.1419430  0.0051357    27.638  < 2e-16 ***\nDESTIN_SZSBSZ05      -0.9256413  0.0071963  -128.628  < 2e-16 ***\nDESTIN_SZSBSZ06      -2.3487368  0.0221611  -105.984  < 2e-16 ***\nDESTIN_SZSBSZ07      -0.7864630  0.0181706   -43.282  < 2e-16 ***\nDESTIN_SZSBSZ08       1.3240051  0.0051598   256.599  < 2e-16 ***\nDESTIN_SZSBSZ09       0.8431156  0.0048330   174.449  < 2e-16 ***\nDESTIN_SZSESZ02      -0.2385874  0.0046618   -51.180  < 2e-16 ***\nDESTIN_SZSESZ03       0.5439188  0.0036932   147.276  < 2e-16 ***\nDESTIN_SZSESZ04      -0.6715716  0.0054222  -123.856  < 2e-16 ***\nDESTIN_SZSESZ05      -0.3601932  0.0047508   -75.818  < 2e-16 ***\nDESTIN_SZSESZ06      -0.6088413  0.0057017  -106.782  < 2e-16 ***\nDESTIN_SZSESZ07      -2.9477507  0.0226797  -129.973  < 2e-16 ***\nDESTIN_SZSGSZ01      -0.5100640  0.0058280   -87.519  < 2e-16 ***\nDESTIN_SZSGSZ02      -0.0439941  0.0051633    -8.520  < 2e-16 ***\nDESTIN_SZSGSZ03      -0.3700648  0.0047152   -78.483  < 2e-16 ***\nDESTIN_SZSGSZ04      -0.3021335  0.0046865   -64.468  < 2e-16 ***\nDESTIN_SZSGSZ05      -2.2253287  0.0097908  -227.288  < 2e-16 ***\nDESTIN_SZSGSZ06       0.2963602  0.0037948    78.097  < 2e-16 ***\nDESTIN_SZSGSZ07      -0.5940373  0.0051371  -115.637  < 2e-16 ***\nDESTIN_SZSISZ01      -1.4528976  0.0257790   -56.360  < 2e-16 ***\nDESTIN_SZSKSZ01      -0.0374952  0.0066885    -5.606 2.07e-08 ***\nDESTIN_SZSKSZ02       0.7271418  0.0050281   144.617  < 2e-16 ***\nDESTIN_SZSKSZ03      -0.0640794  0.0059146   -10.834  < 2e-16 ***\nDESTIN_SZSKSZ04      -0.5610767  0.0139676   -40.170  < 2e-16 ***\nDESTIN_SZSKSZ05       0.1510974  0.0104871    14.408  < 2e-16 ***\nDESTIN_SZSLSZ01      -0.5823031  0.0083356   -69.858  < 2e-16 ***\nDESTIN_SZSLSZ04      -0.8166665  0.0070329  -116.122  < 2e-16 ***\nDESTIN_SZSRSZ01      -2.3241796  0.0127215  -182.696  < 2e-16 ***\nDESTIN_SZTHSZ01      -2.8157635  0.0366840   -76.757  < 2e-16 ***\nDESTIN_SZTHSZ03      -2.1005978  0.0250842   -83.742  < 2e-16 ***\nDESTIN_SZTHSZ04      -2.1246250  0.0213690   -99.425  < 2e-16 ***\nDESTIN_SZTHSZ06      -1.4571092  0.0150031   -97.121  < 2e-16 ***\nDESTIN_SZTMSZ01      -0.1234559  0.0055152   -22.385  < 2e-16 ***\nDESTIN_SZTMSZ02       1.5961628  0.0032599   489.635  < 2e-16 ***\nDESTIN_SZTMSZ03       0.6977233  0.0037138   187.875  < 2e-16 ***\nDESTIN_SZTMSZ04       0.8606606  0.0037592   228.947  < 2e-16 ***\nDESTIN_SZTMSZ05       0.3750655  0.0051281    73.140  < 2e-16 ***\nDESTIN_SZTNSZ01      -1.2624562  0.0066979  -188.485  < 2e-16 ***\nDESTIN_SZTNSZ02      -2.0761581  0.0096538  -215.062  < 2e-16 ***\nDESTIN_SZTNSZ03      -2.1128125  0.0115717  -182.584  < 2e-16 ***\nDESTIN_SZTNSZ04      -1.2417494  0.0068502  -181.271  < 2e-16 ***\nDESTIN_SZTPSZ01      -0.7094356  0.0055768  -127.211  < 2e-16 ***\nDESTIN_SZTPSZ02       0.1491604  0.0037260    40.032  < 2e-16 ***\nDESTIN_SZTPSZ03      -0.4973355  0.0054878   -90.626  < 2e-16 ***\nDESTIN_SZTPSZ04      -1.5160395  0.0071592  -211.761  < 2e-16 ***\nDESTIN_SZTPSZ05      -0.9196565  0.0056750  -162.054  < 2e-16 ***\nDESTIN_SZTPSZ06      -0.2710649  0.0062637   -43.276  < 2e-16 ***\nDESTIN_SZTPSZ07      -2.0198681  0.0116556  -173.296  < 2e-16 ***\nDESTIN_SZTPSZ08      -1.4881412  0.0085532  -173.987  < 2e-16 ***\nDESTIN_SZTPSZ09      -0.5901273  0.0059394   -99.358  < 2e-16 ***\nDESTIN_SZTPSZ10      -1.1215711  0.0084488  -132.749  < 2e-16 ***\nDESTIN_SZTPSZ11      -0.4837089  0.0050905   -95.022  < 2e-16 ***\nDESTIN_SZTPSZ12      -0.8653927  0.0061326  -141.113  < 2e-16 ***\nDESTIN_SZTSSZ01      -0.5515103  0.0208541   -26.446  < 2e-16 ***\nDESTIN_SZTSSZ02       0.8373778  0.0093757    89.314  < 2e-16 ***\nDESTIN_SZTSSZ03       1.7021888  0.0064394   264.340  < 2e-16 ***\nDESTIN_SZTSSZ04       1.5355016  0.0067855   226.292  < 2e-16 ***\nDESTIN_SZTSSZ05       1.6932319  0.0073725   229.668  < 2e-16 ***\nDESTIN_SZTSSZ06       0.4567808  0.0137927    33.118  < 2e-16 ***\nDESTIN_SZWCSZ01       1.3967640  0.0045392   307.711  < 2e-16 ***\nDESTIN_SZWCSZ02      -0.4560229  0.0122949   -37.090  < 2e-16 ***\nDESTIN_SZWCSZ03      -2.0710051  0.0325121   -63.699  < 2e-16 ***\nDESTIN_SZWDSZ01       1.5137342  0.0034774   435.310  < 2e-16 ***\nDESTIN_SZWDSZ02      -0.3005475  0.0055149   -54.497  < 2e-16 ***\nDESTIN_SZWDSZ03       1.2514543  0.0036112   346.550  < 2e-16 ***\nDESTIN_SZWDSZ04      -0.1702528  0.0058295   -29.205  < 2e-16 ***\nDESTIN_SZWDSZ05      -0.0005419  0.0053911    -0.101  0.91994    \nDESTIN_SZWDSZ06       0.5203361  0.0040318   129.058  < 2e-16 ***\nDESTIN_SZWDSZ07       0.6006472  0.0061745    97.279  < 2e-16 ***\nDESTIN_SZWDSZ08       0.6650867  0.0060867   109.268  < 2e-16 ***\nDESTIN_SZWDSZ09       0.6237312  0.0044830   139.132  < 2e-16 ***\nDESTIN_SZYSSZ01       1.0471638  0.0038255   273.732  < 2e-16 ***\nDESTIN_SZYSSZ02       0.2341114  0.0048213    48.558  < 2e-16 ***\nDESTIN_SZYSSZ03      -0.0916446  0.0051335   -17.852  < 2e-16 ***\nDESTIN_SZYSSZ04      -0.0085536  0.0048684    -1.757  0.07892 .  \nDESTIN_SZYSSZ05      -1.5775071  0.0100297  -157.283  < 2e-16 ***\nDESTIN_SZYSSZ06      -1.8130307  0.0098617  -183.846  < 2e-16 ***\nDESTIN_SZYSSZ07      -1.1703963  0.0111525  -104.945  < 2e-16 ***\nDESTIN_SZYSSZ08       0.5253514  0.0039556   132.813  < 2e-16 ***\nDESTIN_SZYSSZ09       0.4353435  0.0038890   111.943  < 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.2249135  0.0001404  1602.353  < 2e-16 ***\nlog(dist)            -0.6989356  0.0001287 -5431.279  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 60796037  on 14733  degrees of freedom\nResidual deviance: 26208384  on 14452  degrees of freedom\nAIC: 26300575\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\n\nShow the code\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n\n[1] 0.4972985"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#doubly-constrained",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#doubly-constrained",
    "title": "Hands-on Exercise 13",
    "section": "Doubly constrained",
    "text": "Doubly constrained\nIn this section, we will fit a doubly constrained SIM by using the code chunk below.\nThe general formula of Doubly Constrained Spatial Interaction Model\n\n\nShow the code\ndbcSIM <- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(>|z|)    \n(Intercept)     12.4165310  0.0043949  2825.242  < 2e-16 ***\nORIGIN_SZAMSZ02  0.9496891  0.0045740   207.630  < 2e-16 ***\nORIGIN_SZAMSZ03  0.5519174  0.0046672   118.253  < 2e-16 ***\nORIGIN_SZAMSZ04  0.1028140  0.0052468    19.596  < 2e-16 ***\nORIGIN_SZAMSZ05  0.0822549  0.0058663    14.022  < 2e-16 ***\nORIGIN_SZAMSZ06  0.6617809  0.0052580   125.861  < 2e-16 ***\nORIGIN_SZAMSZ07 -0.9508298  0.0097681   -97.340  < 2e-16 ***\nORIGIN_SZAMSZ08 -0.7271779  0.0090946   -79.958  < 2e-16 ***\nORIGIN_SZAMSZ09  0.4896781  0.0055203    88.704  < 2e-16 ***\nORIGIN_SZAMSZ10  0.4819428  0.0048175   100.040  < 2e-16 ***\nORIGIN_SZAMSZ11 -1.7719841  0.0130695  -135.582  < 2e-16 ***\nORIGIN_SZAMSZ12 -1.7679107  0.0108777  -162.526  < 2e-16 ***\nORIGIN_SZBDSZ01  0.8314812  0.0045187   184.010  < 2e-16 ***\nORIGIN_SZBDSZ02  0.4305836  0.0052535    81.961  < 2e-16 ***\nORIGIN_SZBDSZ03  0.8009370  0.0046384   172.676  < 2e-16 ***\nORIGIN_SZBDSZ04  1.4562985  0.0040456   359.971  < 2e-16 ***\nORIGIN_SZBDSZ05  0.4501939  0.0046960    95.867  < 2e-16 ***\nORIGIN_SZBDSZ06  0.7745026  0.0047424   163.314  < 2e-16 ***\nORIGIN_SZBDSZ07 -1.1784123  0.0098105  -120.117  < 2e-16 ***\nORIGIN_SZBDSZ08 -0.9830996  0.0091135  -107.873  < 2e-16 ***\nORIGIN_SZBKSZ01 -0.3042966  0.0067086   -45.359  < 2e-16 ***\nORIGIN_SZBKSZ02  0.4801541  0.0054160    88.655  < 2e-16 ***\nORIGIN_SZBKSZ03  0.7823931  0.0052007   150.440  < 2e-16 ***\nORIGIN_SZBKSZ04 -0.1292545  0.0061735   -20.937  < 2e-16 ***\nORIGIN_SZBKSZ05 -0.0258584  0.0060192    -4.296 1.74e-05 ***\nORIGIN_SZBKSZ06  0.1994719  0.0061206    32.590  < 2e-16 ***\nORIGIN_SZBKSZ07  0.7434860  0.0046598   159.553  < 2e-16 ***\nORIGIN_SZBKSZ08  0.1625007  0.0055219    29.428  < 2e-16 ***\nORIGIN_SZBKSZ09 -0.0864293  0.0059533   -14.518  < 2e-16 ***\nORIGIN_SZBLSZ01 -2.1022485  0.0150316  -139.855  < 2e-16 ***\nORIGIN_SZBLSZ02 -2.9460181  0.0195760  -150.491  < 2e-16 ***\nORIGIN_SZBLSZ03 -4.9412872  0.0398540  -123.985  < 2e-16 ***\nORIGIN_SZBLSZ04 -2.8143593  0.0239209  -117.653  < 2e-16 ***\nORIGIN_SZBMSZ01 -0.0264561  0.0053639    -4.932 8.13e-07 ***\nORIGIN_SZBMSZ02 -0.8656513  0.0068511  -126.353  < 2e-16 ***\nORIGIN_SZBMSZ03 -0.1723467  0.0059613   -28.911  < 2e-16 ***\nORIGIN_SZBMSZ04  0.2169844  0.0053578    40.499  < 2e-16 ***\nORIGIN_SZBMSZ05 -2.0252956  0.0126107  -160.602  < 2e-16 ***\nORIGIN_SZBMSZ06 -1.7642018  0.0163931  -107.619  < 2e-16 ***\nORIGIN_SZBMSZ07 -0.3271629  0.0058137   -56.274  < 2e-16 ***\nORIGIN_SZBMSZ08 -0.2533255  0.0059335   -42.694  < 2e-16 ***\nORIGIN_SZBMSZ09 -0.7712635  0.0087939   -87.704  < 2e-16 ***\nORIGIN_SZBMSZ10 -1.0098048  0.0092519  -109.145  < 2e-16 ***\nORIGIN_SZBMSZ11 -0.3816187  0.0067302   -56.702  < 2e-16 ***\nORIGIN_SZBMSZ12 -0.6666616  0.0095680   -69.676  < 2e-16 ***\nORIGIN_SZBMSZ13 -0.0076108  0.0059040    -1.289  0.19737    \nORIGIN_SZBMSZ14 -0.1682476  0.0069391   -24.246  < 2e-16 ***\nORIGIN_SZBMSZ15  0.0904585  0.0062822    14.399  < 2e-16 ***\nORIGIN_SZBMSZ16 -1.1808741  0.0092258  -127.997  < 2e-16 ***\nORIGIN_SZBMSZ17 -1.7189127  0.0158408  -108.512  < 2e-16 ***\nORIGIN_SZBPSZ01  0.4294645  0.0058051    73.980  < 2e-16 ***\nORIGIN_SZBPSZ02  0.5028906  0.0068169    73.771  < 2e-16 ***\nORIGIN_SZBPSZ03  0.6656178  0.0066126   100.658  < 2e-16 ***\nORIGIN_SZBPSZ04  0.5203612  0.0053224    97.769  < 2e-16 ***\nORIGIN_SZBPSZ05  0.5377769  0.0047907   112.256  < 2e-16 ***\nORIGIN_SZBPSZ06 -1.2327809  0.0094950  -129.835  < 2e-16 ***\nORIGIN_SZBPSZ07 -0.9035255  0.0088739  -101.818  < 2e-16 ***\nORIGIN_SZBSSZ01  0.1210027  0.0053990    22.412  < 2e-16 ***\nORIGIN_SZBSSZ02  0.4618449  0.0048641    94.951  < 2e-16 ***\nORIGIN_SZBSSZ03  0.2160739  0.0047835    45.170  < 2e-16 ***\nORIGIN_SZBTSZ01 -0.1108042  0.0055599   -19.929  < 2e-16 ***\nORIGIN_SZBTSZ02 -0.8911221  0.0079213  -112.498  < 2e-16 ***\nORIGIN_SZBTSZ03 -0.2203980  0.0059325   -37.151  < 2e-16 ***\nORIGIN_SZBTSZ04 -0.6427946  0.0105438   -60.964  < 2e-16 ***\nORIGIN_SZBTSZ05 -1.4662312  0.0111784  -131.166  < 2e-16 ***\nORIGIN_SZBTSZ06 -0.6105884  0.0073456   -83.123  < 2e-16 ***\nORIGIN_SZBTSZ07 -1.9041317  0.0132781  -143.404  < 2e-16 ***\nORIGIN_SZBTSZ08 -1.0627939  0.0095982  -110.728  < 2e-16 ***\nORIGIN_SZCBSZ01 -2.9365941  0.0548632   -53.526  < 2e-16 ***\nORIGIN_SZCCSZ01 -1.5313555  0.0134599  -113.772  < 2e-16 ***\nORIGIN_SZCHSZ01 -1.2034494  0.0119468  -100.734  < 2e-16 ***\nORIGIN_SZCHSZ02 -0.8299415  0.0081984  -101.232  < 2e-16 ***\nORIGIN_SZCHSZ03 -0.5143946  0.0061944   -83.042  < 2e-16 ***\nORIGIN_SZCKSZ01  0.2372583  0.0053612    44.255  < 2e-16 ***\nORIGIN_SZCKSZ02  0.9124836  0.0054472   167.515  < 2e-16 ***\nORIGIN_SZCKSZ03  0.7237808  0.0048401   149.539  < 2e-16 ***\nORIGIN_SZCKSZ04  1.6884022  0.0050169   336.540  < 2e-16 ***\nORIGIN_SZCKSZ05  1.3932005  0.0062346   223.464  < 2e-16 ***\nORIGIN_SZCKSZ06  1.0670053  0.0066112   161.394  < 2e-16 ***\nORIGIN_SZCLSZ01 -0.8602837  0.0079240  -108.567  < 2e-16 ***\nORIGIN_SZCLSZ02 -1.3853421  0.0137444  -100.793  < 2e-16 ***\nORIGIN_SZCLSZ03 -0.8582608  0.0081177  -105.727  < 2e-16 ***\nORIGIN_SZCLSZ04  0.7836027  0.0046427   168.782  < 2e-16 ***\nORIGIN_SZCLSZ05 -1.8121756  0.0148960  -121.655  < 2e-16 ***\nORIGIN_SZCLSZ06  0.8296870  0.0043909   188.955  < 2e-16 ***\nORIGIN_SZCLSZ07 -0.2325219  0.0057432   -40.487  < 2e-16 ***\nORIGIN_SZCLSZ08  0.2714336  0.0062625    43.342  < 2e-16 ***\nORIGIN_SZCLSZ09 -2.2223744  0.0160946  -138.082  < 2e-16 ***\nORIGIN_SZDTSZ02 -4.0704970  0.0834192   -48.796  < 2e-16 ***\nORIGIN_SZDTSZ03 -3.4529031  0.0738295   -46.769  < 2e-16 ***\nORIGIN_SZDTSZ13 -2.8301983  0.0313085   -90.397  < 2e-16 ***\nORIGIN_SZGLSZ01 -1.4674986  0.0093137  -157.563  < 2e-16 ***\nORIGIN_SZGLSZ02  0.2749369  0.0050051    54.931  < 2e-16 ***\nORIGIN_SZGLSZ03  0.0781954  0.0049748    15.718  < 2e-16 ***\nORIGIN_SZGLSZ04  0.8167797  0.0043260   188.808  < 2e-16 ***\nORIGIN_SZGLSZ05  0.5277509  0.0044879   117.595  < 2e-16 ***\nORIGIN_SZHGSZ01  0.2323885  0.0048555    47.861  < 2e-16 ***\nORIGIN_SZHGSZ02  0.5707182  0.0048256   118.268  < 2e-16 ***\nORIGIN_SZHGSZ03  0.4231170  0.0052149    81.136  < 2e-16 ***\nORIGIN_SZHGSZ04  0.9341168  0.0044128   211.681  < 2e-16 ***\nORIGIN_SZHGSZ05  1.2192790  0.0043790   278.437  < 2e-16 ***\nORIGIN_SZHGSZ06  0.0490041  0.0054961     8.916  < 2e-16 ***\nORIGIN_SZHGSZ07  0.6337041  0.0045735   138.559  < 2e-16 ***\nORIGIN_SZHGSZ08  0.0312612  0.0054684     5.717 1.09e-08 ***\nORIGIN_SZHGSZ09 -0.6985397  0.0071800   -97.289  < 2e-16 ***\nORIGIN_SZHGSZ10 -2.9958967  0.0422303   -70.942  < 2e-16 ***\nORIGIN_SZJESZ01  0.4363431  0.0051329    85.010  < 2e-16 ***\nORIGIN_SZJESZ02  0.3460900  0.0051372    67.370  < 2e-16 ***\nORIGIN_SZJESZ03  0.2928005  0.0055108    53.132  < 2e-16 ***\nORIGIN_SZJESZ04 -1.1924298  0.0093540  -127.478  < 2e-16 ***\nORIGIN_SZJESZ05 -2.0178136  0.0139479  -144.668  < 2e-16 ***\nORIGIN_SZJESZ06  0.1637633  0.0050685    32.310  < 2e-16 ***\nORIGIN_SZJESZ07 -1.8227460  0.0119383  -152.680  < 2e-16 ***\nORIGIN_SZJESZ08 -1.1556281  0.0117870   -98.043  < 2e-16 ***\nORIGIN_SZJESZ09  0.4766229  0.0052813    90.248  < 2e-16 ***\nORIGIN_SZJESZ10 -2.6868992  0.0186864  -143.789  < 2e-16 ***\nORIGIN_SZJESZ11 -3.0618150  0.0199755  -153.278  < 2e-16 ***\nORIGIN_SZJWSZ01  0.4417418  0.0068611    64.383  < 2e-16 ***\nORIGIN_SZJWSZ02  0.9738087  0.0047905   203.281  < 2e-16 ***\nORIGIN_SZJWSZ03  1.1548028  0.0045180   255.599  < 2e-16 ***\nORIGIN_SZJWSZ04  0.9078417  0.0046668   194.532  < 2e-16 ***\nORIGIN_SZJWSZ05 -1.7092500  0.0127422  -134.141  < 2e-16 ***\nORIGIN_SZJWSZ06 -1.3284287  0.0109785  -121.002  < 2e-16 ***\nORIGIN_SZJWSZ07 -2.3231549  0.0281427   -82.549  < 2e-16 ***\nORIGIN_SZJWSZ08  1.9386127  0.0046041   421.059  < 2e-16 ***\nORIGIN_SZJWSZ09  1.3987549  0.0042610   328.266  < 2e-16 ***\nORIGIN_SZKLSZ01  0.2617735  0.0050089    52.261  < 2e-16 ***\nORIGIN_SZKLSZ02 -0.4325093  0.0064279   -67.286  < 2e-16 ***\nORIGIN_SZKLSZ03 -0.2787173  0.0060380   -46.161  < 2e-16 ***\nORIGIN_SZKLSZ04 -1.9432693  0.0119163  -163.076  < 2e-16 ***\nORIGIN_SZKLSZ05 -0.5420067  0.0085529   -63.371  < 2e-16 ***\nORIGIN_SZKLSZ06 -4.2949009  0.1857686   -23.120  < 2e-16 ***\nORIGIN_SZKLSZ07 -0.8576946  0.0085178  -100.694  < 2e-16 ***\nORIGIN_SZKLSZ08 -1.3840925  0.0092323  -149.918  < 2e-16 ***\nORIGIN_SZLKSZ01 -2.8108510  0.0392356   -71.640  < 2e-16 ***\nORIGIN_SZMDSZ01 -1.6745388  0.0296543   -56.469  < 2e-16 ***\nORIGIN_SZMDSZ02 -0.8193738  0.0106631   -76.842  < 2e-16 ***\nORIGIN_SZMDSZ03 -1.5088267  0.0172032   -87.706  < 2e-16 ***\nORIGIN_SZMPSZ01 -0.9860154  0.0085053  -115.929  < 2e-16 ***\nORIGIN_SZMPSZ02 -0.5958875  0.0070097   -85.008  < 2e-16 ***\nORIGIN_SZMPSZ03 -0.0490122  0.0054582    -8.980  < 2e-16 ***\nORIGIN_SZMUSZ02 -3.5233367  0.1037749   -33.952  < 2e-16 ***\nORIGIN_SZNTSZ01 -2.6451541  0.0353125   -74.907  < 2e-16 ***\nORIGIN_SZNTSZ02 -2.7710546  0.0232841  -119.011  < 2e-16 ***\nORIGIN_SZNTSZ03 -0.6123404  0.0079083   -77.430  < 2e-16 ***\nORIGIN_SZNTSZ05 -2.9257445  0.0496704   -58.903  < 2e-16 ***\nORIGIN_SZNTSZ06 -3.3260031  0.0557966   -59.609  < 2e-16 ***\nORIGIN_SZNVSZ01  0.6421306  0.0046037   139.482  < 2e-16 ***\nORIGIN_SZNVSZ02 -0.4251550  0.0065890   -64.525  < 2e-16 ***\nORIGIN_SZNVSZ03 -1.0765622  0.0078766  -136.679  < 2e-16 ***\nORIGIN_SZNVSZ04 -1.2289504  0.0091468  -134.358  < 2e-16 ***\nORIGIN_SZNVSZ05 -2.3551389  0.0158219  -148.853  < 2e-16 ***\nORIGIN_SZPGSZ01  0.1518212  0.0154825     9.806  < 2e-16 ***\nORIGIN_SZPGSZ02 -0.4062609  0.0073780   -55.064  < 2e-16 ***\nORIGIN_SZPGSZ03  0.8976913  0.0046122   194.636  < 2e-16 ***\nORIGIN_SZPGSZ04  1.1161685  0.0045850   243.437  < 2e-16 ***\nORIGIN_SZPGSZ05  0.4794249  0.0060213    79.621  < 2e-16 ***\nORIGIN_SZPLSZ01 -0.8322377  0.0107898   -77.132  < 2e-16 ***\nORIGIN_SZPLSZ02 -1.2968937  0.0149841   -86.551  < 2e-16 ***\nORIGIN_SZPLSZ03 -3.2744991  0.0374541   -87.427  < 2e-16 ***\nORIGIN_SZPLSZ04 -3.5423615  0.0372570   -95.079  < 2e-16 ***\nORIGIN_SZPLSZ05 -2.4343705  0.0227807  -106.861  < 2e-16 ***\nORIGIN_SZPNSZ01  0.8052461  0.0056124   143.476  < 2e-16 ***\nORIGIN_SZPNSZ02 -1.8042362  0.0128222  -140.712  < 2e-16 ***\nORIGIN_SZPNSZ03 -2.6363996  0.0200058  -131.782  < 2e-16 ***\nORIGIN_SZPNSZ04 -4.8427070  0.0320126  -151.275  < 2e-16 ***\nORIGIN_SZPNSZ05 -3.6613775  0.0285686  -128.161  < 2e-16 ***\nORIGIN_SZPRSZ01 -0.5645384  0.0117126   -48.199  < 2e-16 ***\nORIGIN_SZPRSZ02  0.9145886  0.0048137   189.998  < 2e-16 ***\nORIGIN_SZPRSZ03  0.4478971  0.0048102    93.113  < 2e-16 ***\nORIGIN_SZPRSZ04 -0.5312444  0.0079019   -67.230  < 2e-16 ***\nORIGIN_SZPRSZ05  1.1462662  0.0045250   253.318  < 2e-16 ***\nORIGIN_SZPRSZ06 -0.7392744  0.0090347   -81.826  < 2e-16 ***\nORIGIN_SZPRSZ07 -2.1667862  0.0162528  -133.318  < 2e-16 ***\nORIGIN_SZPRSZ08 -0.1327079  0.0065712   -20.195  < 2e-16 ***\nORIGIN_SZQTSZ01  0.1062151  0.0071538    14.847  < 2e-16 ***\nORIGIN_SZQTSZ02 -0.4993990  0.0064382   -77.568  < 2e-16 ***\nORIGIN_SZQTSZ03  0.1161844  0.0058822    19.752  < 2e-16 ***\nORIGIN_SZQTSZ04 -0.8102612  0.0072742  -111.389  < 2e-16 ***\nORIGIN_SZQTSZ05 -0.0417272  0.0061917    -6.739 1.59e-11 ***\nORIGIN_SZQTSZ06 -0.2521417  0.0066449   -37.945  < 2e-16 ***\nORIGIN_SZQTSZ07 -1.2395975  0.0097496  -127.143  < 2e-16 ***\nORIGIN_SZQTSZ08 -0.1105467  0.0059364   -18.622  < 2e-16 ***\nORIGIN_SZQTSZ09 -0.5078461  0.0067895   -74.798  < 2e-16 ***\nORIGIN_SZQTSZ10 -0.3866593  0.0066995   -57.714  < 2e-16 ***\nORIGIN_SZQTSZ11 -1.5264609  0.0099770  -152.998  < 2e-16 ***\nORIGIN_SZQTSZ12 -1.3866518  0.0106887  -129.730  < 2e-16 ***\nORIGIN_SZQTSZ13 -0.3764286  0.0066707   -56.430  < 2e-16 ***\nORIGIN_SZQTSZ14 -1.4907399  0.0100120  -148.896  < 2e-16 ***\nORIGIN_SZQTSZ15 -1.0552239  0.0108792   -96.994  < 2e-16 ***\nORIGIN_SZRCSZ01 -1.3136074  0.0126986  -103.445  < 2e-16 ***\nORIGIN_SZRCSZ06 -0.2418276  0.0085509   -28.281  < 2e-16 ***\nORIGIN_SZRVSZ01 -2.9263747  0.0324968   -90.051  < 2e-16 ***\nORIGIN_SZRVSZ02 -2.2980940  0.0278202   -82.605  < 2e-16 ***\nORIGIN_SZRVSZ03 -2.4663765  0.0238674  -103.336  < 2e-16 ***\nORIGIN_SZRVSZ04 -3.1853677  0.0556939   -57.194  < 2e-16 ***\nORIGIN_SZRVSZ05 -1.5695490  0.0166684   -94.163  < 2e-16 ***\nORIGIN_SZSBSZ01  0.7674590  0.0061811   124.163  < 2e-16 ***\nORIGIN_SZSBSZ02 -0.7307279  0.0084105   -86.883  < 2e-16 ***\nORIGIN_SZSBSZ03  0.5920074  0.0050167   118.008  < 2e-16 ***\nORIGIN_SZSBSZ04  0.3684857  0.0058575    62.908  < 2e-16 ***\nORIGIN_SZSBSZ05 -0.0036863  0.0068459    -0.538  0.59026    \nORIGIN_SZSBSZ06 -1.1939284  0.0181541   -65.766  < 2e-16 ***\nORIGIN_SZSBSZ07 -0.4896579  0.0135618   -36.106  < 2e-16 ***\nORIGIN_SZSBSZ08 -2.1221691  0.0127258  -166.762  < 2e-16 ***\nORIGIN_SZSBSZ09 -1.2032410  0.0089611  -134.273  < 2e-16 ***\nORIGIN_SZSESZ02  1.0721820  0.0045336   236.498  < 2e-16 ***\nORIGIN_SZSESZ03  1.0808012  0.0042923   251.801  < 2e-16 ***\nORIGIN_SZSESZ04  1.0137448  0.0050668   200.076  < 2e-16 ***\nORIGIN_SZSESZ05 -0.1678679  0.0060206   -27.882  < 2e-16 ***\nORIGIN_SZSESZ06  0.9165834  0.0048323   189.677  < 2e-16 ***\nORIGIN_SZSESZ07 -2.2499789  0.0196327  -114.603  < 2e-16 ***\nORIGIN_SZSGSZ01 -0.9369800  0.0087282  -107.351  < 2e-16 ***\nORIGIN_SZSGSZ02 -1.1690716  0.0097131  -120.360  < 2e-16 ***\nORIGIN_SZSGSZ03  0.2604352  0.0052709    49.410  < 2e-16 ***\nORIGIN_SZSGSZ04  0.3468823  0.0048897    70.942  < 2e-16 ***\nORIGIN_SZSGSZ05 -1.5927797  0.0106308  -149.827  < 2e-16 ***\nORIGIN_SZSGSZ06  0.3605651  0.0046361    77.774  < 2e-16 ***\nORIGIN_SZSGSZ07 -0.5333873  0.0063119   -84.504  < 2e-16 ***\nORIGIN_SZSKSZ01 -0.2706750  0.0082836   -32.676  < 2e-16 ***\nORIGIN_SZSKSZ02  0.0970953  0.0063378    15.320  < 2e-16 ***\nORIGIN_SZSKSZ03 -0.6954342  0.0082538   -84.256  < 2e-16 ***\nORIGIN_SZSKSZ04 -2.3863580  0.0284607   -83.847  < 2e-16 ***\nORIGIN_SZSKSZ05 -1.5443140  0.0179059   -86.246  < 2e-16 ***\nORIGIN_SZSLSZ01 -2.9450656  0.0307283   -95.842  < 2e-16 ***\nORIGIN_SZSLSZ04 -0.5739349  0.0077851   -73.722  < 2e-16 ***\nORIGIN_SZSRSZ01 -1.6136735  0.0160199  -100.729  < 2e-16 ***\nORIGIN_SZTHSZ01 -2.6034976  0.0489378   -53.200  < 2e-16 ***\nORIGIN_SZTHSZ03 -1.2770601  0.0229815   -55.569  < 2e-16 ***\nORIGIN_SZTHSZ04 -2.0110399  0.0287527   -69.943  < 2e-16 ***\nORIGIN_SZTHSZ06 -1.7720116  0.0180394   -98.230  < 2e-16 ***\nORIGIN_SZTMSZ01  0.1254729  0.0060924    20.595  < 2e-16 ***\nORIGIN_SZTMSZ02  1.6667504  0.0039836   418.403  < 2e-16 ***\nORIGIN_SZTMSZ03  1.0941176  0.0042911   254.976  < 2e-16 ***\nORIGIN_SZTMSZ04  0.3209520  0.0050349    63.746  < 2e-16 ***\nORIGIN_SZTMSZ05 -0.8155124  0.0079342  -102.785  < 2e-16 ***\nORIGIN_SZTNSZ01 -1.4237298  0.0104636  -136.064  < 2e-16 ***\nORIGIN_SZTNSZ02 -1.2718890  0.0098660  -128.916  < 2e-16 ***\nORIGIN_SZTNSZ03 -1.7960517  0.0134675  -133.362  < 2e-16 ***\nORIGIN_SZTNSZ04 -0.3508142  0.0073556   -47.694  < 2e-16 ***\nORIGIN_SZTPSZ01 -0.3841699  0.0064137   -59.898  < 2e-16 ***\nORIGIN_SZTPSZ02  0.5315265  0.0044497   119.451  < 2e-16 ***\nORIGIN_SZTPSZ03 -0.4669723  0.0062160   -75.124  < 2e-16 ***\nORIGIN_SZTPSZ04 -0.0617169  0.0058830   -10.491  < 2e-16 ***\nORIGIN_SZTPSZ05  0.0713309  0.0062133    11.480  < 2e-16 ***\nORIGIN_SZTPSZ06  0.6800356  0.0069456    97.909  < 2e-16 ***\nORIGIN_SZTPSZ07 -0.0432782  0.0064382    -6.722 1.79e-11 ***\nORIGIN_SZTPSZ08 -0.6976429  0.0092416   -75.490  < 2e-16 ***\nORIGIN_SZTPSZ09 -0.3708833  0.0063548   -58.363  < 2e-16 ***\nORIGIN_SZTPSZ10 -0.4063575  0.0077803   -52.229  < 2e-16 ***\nORIGIN_SZTPSZ11  0.1040282  0.0056115    18.538  < 2e-16 ***\nORIGIN_SZTPSZ12 -0.5104672  0.0066261   -77.039  < 2e-16 ***\nORIGIN_SZTSSZ01 -3.5036830  0.0487290   -71.901  < 2e-16 ***\nORIGIN_SZTSSZ02 -0.0386819  0.0094886    -4.077 4.57e-05 ***\nORIGIN_SZTSSZ03 -0.3862387  0.0095139   -40.597  < 2e-16 ***\nORIGIN_SZTSSZ04 -0.6380676  0.0099905   -63.867  < 2e-16 ***\nORIGIN_SZTSSZ05 -2.7354613  0.0162414  -168.425  < 2e-16 ***\nORIGIN_SZTSSZ06 -2.6310865  0.0255772  -102.868  < 2e-16 ***\nORIGIN_SZWCSZ01 -1.1561047  0.0087394  -132.286  < 2e-16 ***\nORIGIN_SZWCSZ02 -2.6956217  0.0319117   -84.471  < 2e-16 ***\nORIGIN_SZWCSZ03 -4.3526889  0.1241082   -35.072  < 2e-16 ***\nORIGIN_SZWDSZ01  0.8712417  0.0043720   199.277  < 2e-16 ***\nORIGIN_SZWDSZ02  0.9119539  0.0050326   181.210  < 2e-16 ***\nORIGIN_SZWDSZ03  1.6205678  0.0045250   358.136  < 2e-16 ***\nORIGIN_SZWDSZ04  1.2081941  0.0054272   222.618  < 2e-16 ***\nORIGIN_SZWDSZ05  0.4284783  0.0052752    81.224  < 2e-16 ***\nORIGIN_SZWDSZ06  0.9018716  0.0049820   181.028  < 2e-16 ***\nORIGIN_SZWDSZ07 -0.6444820  0.0084731   -76.062  < 2e-16 ***\nORIGIN_SZWDSZ08 -0.8764983  0.0082622  -106.085  < 2e-16 ***\nORIGIN_SZWDSZ09  1.3292589  0.0048663   273.158  < 2e-16 ***\nORIGIN_SZYSSZ01 -0.4780462  0.0058489   -81.733  < 2e-16 ***\nORIGIN_SZYSSZ02  0.9323419  0.0054402   171.380  < 2e-16 ***\nORIGIN_SZYSSZ03  2.0577240  0.0046737   440.274  < 2e-16 ***\nORIGIN_SZYSSZ04  0.8697472  0.0047269   184.000  < 2e-16 ***\nORIGIN_SZYSSZ05  0.1662764  0.0060376    27.540  < 2e-16 ***\nORIGIN_SZYSSZ06 -0.8115617  0.0109084   -74.398  < 2e-16 ***\nORIGIN_SZYSSZ07 -0.8971248  0.0119220   -75.250  < 2e-16 ***\nORIGIN_SZYSSZ08 -0.2738680  0.0063553   -43.093  < 2e-16 ***\nORIGIN_SZYSSZ09  1.2274518  0.0044951   273.066  < 2e-16 ***\nDESTIN_SZAMSZ02 -0.0516322  0.0042829   -12.055  < 2e-16 ***\nDESTIN_SZAMSZ03  0.0801823  0.0041904    19.135  < 2e-16 ***\nDESTIN_SZAMSZ04 -0.9282211  0.0061322  -151.368  < 2e-16 ***\nDESTIN_SZAMSZ05 -1.0794168  0.0062543  -172.588  < 2e-16 ***\nDESTIN_SZAMSZ06 -0.8839603  0.0060851  -145.267  < 2e-16 ***\nDESTIN_SZAMSZ07 -1.5835093  0.0096846  -163.508  < 2e-16 ***\nDESTIN_SZAMSZ08 -0.9756903  0.0068829  -141.756  < 2e-16 ***\nDESTIN_SZAMSZ09 -1.0362692  0.0061651  -168.087  < 2e-16 ***\nDESTIN_SZAMSZ10 -0.1227646  0.0044788   -27.410  < 2e-16 ***\nDESTIN_SZAMSZ11 -0.4802374  0.0088108   -54.506  < 2e-16 ***\nDESTIN_SZAMSZ12  0.2142621  0.0050653    42.300  < 2e-16 ***\nDESTIN_SZBDSZ01  0.3582789  0.0039578    90.524  < 2e-16 ***\nDESTIN_SZBDSZ02 -0.4368229  0.0051384   -85.012  < 2e-16 ***\nDESTIN_SZBDSZ03 -0.1568727  0.0044329   -35.388  < 2e-16 ***\nDESTIN_SZBDSZ04  0.6731669  0.0036215   185.882  < 2e-16 ***\nDESTIN_SZBDSZ05  0.3647198  0.0040496    90.062  < 2e-16 ***\nDESTIN_SZBDSZ06  0.0589240  0.0044352    13.286  < 2e-16 ***\nDESTIN_SZBDSZ07 -0.6648168  0.0095742   -69.438  < 2e-16 ***\nDESTIN_SZBDSZ08 -1.7214136  0.0106600  -161.483  < 2e-16 ***\nDESTIN_SZBKSZ01 -1.2688264  0.0067263  -188.637  < 2e-16 ***\nDESTIN_SZBKSZ02 -0.3912129  0.0055446   -70.558  < 2e-16 ***\nDESTIN_SZBKSZ03 -0.8663392  0.0058693  -147.605  < 2e-16 ***\nDESTIN_SZBKSZ04 -0.1247273  0.0051254   -24.335  < 2e-16 ***\nDESTIN_SZBKSZ05 -0.7407774  0.0059120  -125.300  < 2e-16 ***\nDESTIN_SZBKSZ06 -0.9934643  0.0063345  -156.834  < 2e-16 ***\nDESTIN_SZBKSZ07  0.0882230  0.0042928    20.551  < 2e-16 ***\nDESTIN_SZBKSZ08 -1.1134447  0.0070752  -157.372  < 2e-16 ***\nDESTIN_SZBKSZ09 -0.1788171  0.0051327   -34.839  < 2e-16 ***\nDESTIN_SZBLSZ01 -0.7696433  0.0071898  -107.047  < 2e-16 ***\nDESTIN_SZBLSZ02  0.4076650  0.0068001    59.950  < 2e-16 ***\nDESTIN_SZBLSZ03  1.5398488  0.0078230   196.836  < 2e-16 ***\nDESTIN_SZBLSZ04 -0.3499486  0.0136985   -25.546  < 2e-16 ***\nDESTIN_SZBMSZ01 -0.2114705  0.0048311   -43.773  < 2e-16 ***\nDESTIN_SZBMSZ02 -0.3316806  0.0049958   -66.391  < 2e-16 ***\nDESTIN_SZBMSZ03 -0.5134774  0.0058534   -87.723  < 2e-16 ***\nDESTIN_SZBMSZ04 -0.2205274  0.0051028   -43.217  < 2e-16 ***\nDESTIN_SZBMSZ05 -0.2101165  0.0067710   -31.032  < 2e-16 ***\nDESTIN_SZBMSZ06 -1.3832385  0.0124821  -110.818  < 2e-16 ***\nDESTIN_SZBMSZ07 -0.0133462  0.0046787    -2.853  0.00434 ** \nDESTIN_SZBMSZ08 -0.9056756  0.0063868  -141.805  < 2e-16 ***\nDESTIN_SZBMSZ09 -2.3175407  0.0144523  -160.358  < 2e-16 ***\nDESTIN_SZBMSZ10 -1.3973725  0.0090463  -154.470  < 2e-16 ***\nDESTIN_SZBMSZ11 -1.3950206  0.0080459  -173.383  < 2e-16 ***\nDESTIN_SZBMSZ12 -0.6882789  0.0081539   -84.411  < 2e-16 ***\nDESTIN_SZBMSZ13 -0.2729120  0.0052969   -51.523  < 2e-16 ***\nDESTIN_SZBMSZ14 -0.7581980  0.0080215   -94.521  < 2e-16 ***\nDESTIN_SZBMSZ15 -0.9323237  0.0071093  -131.142  < 2e-16 ***\nDESTIN_SZBMSZ16 -2.0655530  0.0108490  -190.391  < 2e-16 ***\nDESTIN_SZBMSZ17 -2.5124893  0.0165366  -151.935  < 2e-16 ***\nDESTIN_SZBPSZ01 -0.8203274  0.0057682  -142.216  < 2e-16 ***\nDESTIN_SZBPSZ02 -1.5284265  0.0087447  -174.783  < 2e-16 ***\nDESTIN_SZBPSZ03 -1.2434382  0.0080852  -153.792  < 2e-16 ***\nDESTIN_SZBPSZ04 -0.7778558  0.0060900  -127.727  < 2e-16 ***\nDESTIN_SZBPSZ05  0.1782204  0.0042331    42.101  < 2e-16 ***\nDESTIN_SZBPSZ06 -0.6758807  0.0079728   -84.773  < 2e-16 ***\nDESTIN_SZBPSZ07 -0.5029450  0.0081151   -61.976  < 2e-16 ***\nDESTIN_SZBSSZ01 -0.1269916  0.0046949   -27.049  < 2e-16 ***\nDESTIN_SZBSSZ02 -0.7536917  0.0051895  -145.233  < 2e-16 ***\nDESTIN_SZBSSZ03  0.2747969  0.0039115    70.254  < 2e-16 ***\nDESTIN_SZBTSZ01  0.1708577  0.0043381    39.385  < 2e-16 ***\nDESTIN_SZBTSZ02 -0.6820190  0.0067243  -101.427  < 2e-16 ***\nDESTIN_SZBTSZ03  0.0610599  0.0049825    12.255  < 2e-16 ***\nDESTIN_SZBTSZ04 -1.3199639  0.0107063  -123.288  < 2e-16 ***\nDESTIN_SZBTSZ05 -0.4174991  0.0069221   -60.314  < 2e-16 ***\nDESTIN_SZBTSZ06 -0.5260242  0.0061145   -86.029  < 2e-16 ***\nDESTIN_SZBTSZ07 -1.6678047  0.0106335  -156.844  < 2e-16 ***\nDESTIN_SZBTSZ08 -0.7999935  0.0089175   -89.711  < 2e-16 ***\nDESTIN_SZCBSZ01 -5.6321332  0.3162476   -17.809  < 2e-16 ***\nDESTIN_SZCCSZ01 -0.9342781  0.0081409  -114.763  < 2e-16 ***\nDESTIN_SZCHSZ01 -1.2808546  0.0096774  -132.355  < 2e-16 ***\nDESTIN_SZCHSZ02  0.0067332  0.0054322     1.239  0.21516    \nDESTIN_SZCHSZ03  1.0988838  0.0041378   265.570  < 2e-16 ***\nDESTIN_SZCKSZ01 -0.3192235  0.0050632   -63.048  < 2e-16 ***\nDESTIN_SZCKSZ02 -0.7776453  0.0055279  -140.676  < 2e-16 ***\nDESTIN_SZCKSZ03  0.2772358  0.0042541    65.170  < 2e-16 ***\nDESTIN_SZCKSZ04 -1.3842048  0.0065159  -212.436  < 2e-16 ***\nDESTIN_SZCKSZ05 -1.2051808  0.0076814  -156.897  < 2e-16 ***\nDESTIN_SZCKSZ06  0.1321955  0.0061568    21.472  < 2e-16 ***\nDESTIN_SZCLSZ01  0.1942449  0.0049977    38.867  < 2e-16 ***\nDESTIN_SZCLSZ02 -2.0828648  0.0134597  -154.749  < 2e-16 ***\nDESTIN_SZCLSZ03 -0.8823728  0.0078307  -112.681  < 2e-16 ***\nDESTIN_SZCLSZ04 -0.2311432  0.0047194   -48.977  < 2e-16 ***\nDESTIN_SZCLSZ05 -1.0113430  0.0085536  -118.237  < 2e-16 ***\nDESTIN_SZCLSZ06  0.0694682  0.0042166    16.475  < 2e-16 ***\nDESTIN_SZCLSZ07 -0.4953961  0.0054184   -91.429  < 2e-16 ***\nDESTIN_SZCLSZ08 -0.3849563  0.0061404   -62.693  < 2e-16 ***\nDESTIN_SZCLSZ09  0.4201808  0.0067112    62.609  < 2e-16 ***\nDESTIN_SZDTSZ02 -2.6513032  0.0348725   -76.029  < 2e-16 ***\nDESTIN_SZDTSZ03 -1.5192228  0.0144477  -105.153  < 2e-16 ***\nDESTIN_SZDTSZ13 -2.2041951  0.0161726  -136.292  < 2e-16 ***\nDESTIN_SZGLSZ01 -0.0139744  0.0052464    -2.664  0.00773 ** \nDESTIN_SZGLSZ02 -0.2850816  0.0047467   -60.059  < 2e-16 ***\nDESTIN_SZGLSZ03  0.3511872  0.0039473    88.969  < 2e-16 ***\nDESTIN_SZGLSZ04  0.2909117  0.0039436    73.769  < 2e-16 ***\nDESTIN_SZGLSZ05  0.1845361  0.0040011    46.121  < 2e-16 ***\nDESTIN_SZHGSZ01  0.1418382  0.0039875    35.571  < 2e-16 ***\nDESTIN_SZHGSZ02 -0.7233151  0.0052374  -138.105  < 2e-16 ***\nDESTIN_SZHGSZ03 -1.1918463  0.0062129  -191.834  < 2e-16 ***\nDESTIN_SZHGSZ04 -0.4380360  0.0044839   -97.691  < 2e-16 ***\nDESTIN_SZHGSZ05 -0.5671024  0.0046427  -122.149  < 2e-16 ***\nDESTIN_SZHGSZ06 -0.8271411  0.0054935  -150.566  < 2e-16 ***\nDESTIN_SZHGSZ07  0.0721800  0.0041589    17.356  < 2e-16 ***\nDESTIN_SZHGSZ08 -0.4297429  0.0050021   -85.913  < 2e-16 ***\nDESTIN_SZHGSZ09 -0.2085461  0.0052544   -39.690  < 2e-16 ***\nDESTIN_SZHGSZ10 -2.9169699  0.0262698  -111.039  < 2e-16 ***\nDESTIN_SZJESZ01 -0.2822473  0.0051166   -55.163  < 2e-16 ***\nDESTIN_SZJESZ02 -0.6761389  0.0053635  -126.063  < 2e-16 ***\nDESTIN_SZJESZ03 -0.7371756  0.0058983  -124.980  < 2e-16 ***\nDESTIN_SZJESZ04 -0.4593491  0.0067970   -67.581  < 2e-16 ***\nDESTIN_SZJESZ05 -1.1418012  0.0099049  -115.277  < 2e-16 ***\nDESTIN_SZJESZ06  0.1759680  0.0042791    41.123  < 2e-16 ***\nDESTIN_SZJESZ07 -1.2260587  0.0082714  -148.229  < 2e-16 ***\nDESTIN_SZJESZ08 -0.8547001  0.0080417  -106.283  < 2e-16 ***\nDESTIN_SZJESZ09 -0.4306353  0.0057006   -75.542  < 2e-16 ***\nDESTIN_SZJESZ10  0.6584971  0.0073664    89.392  < 2e-16 ***\nDESTIN_SZJESZ11  0.9661208  0.0070491   137.056  < 2e-16 ***\nDESTIN_SZJWSZ01 -0.9128436  0.0069529  -131.290  < 2e-16 ***\nDESTIN_SZJWSZ02 -0.7285851  0.0054839  -132.859  < 2e-16 ***\nDESTIN_SZJWSZ03  0.2601455  0.0043215    60.198  < 2e-16 ***\nDESTIN_SZJWSZ04  0.6860274  0.0041135   166.775  < 2e-16 ***\nDESTIN_SZJWSZ05 -0.4684576  0.0062875   -74.506  < 2e-16 ***\nDESTIN_SZJWSZ06 -0.2459774  0.0057575   -42.723  < 2e-16 ***\nDESTIN_SZJWSZ07 -1.8854234  0.0287721   -65.529  < 2e-16 ***\nDESTIN_SZJWSZ08 -0.5523308  0.0051054  -108.186  < 2e-16 ***\nDESTIN_SZJWSZ09  0.8818747  0.0037800   233.301  < 2e-16 ***\nDESTIN_SZKLSZ01 -0.5814386  0.0052711  -110.308  < 2e-16 ***\nDESTIN_SZKLSZ02 -0.7090577  0.0058161  -121.914  < 2e-16 ***\nDESTIN_SZKLSZ03 -1.2191910  0.0065984  -184.772  < 2e-16 ***\nDESTIN_SZKLSZ04 -1.6961428  0.0087866  -193.038  < 2e-16 ***\nDESTIN_SZKLSZ05 -0.6927144  0.0073574   -94.153  < 2e-16 ***\nDESTIN_SZKLSZ06 -2.2967464  0.0362605   -63.340  < 2e-16 ***\nDESTIN_SZKLSZ07 -0.9536980  0.0066777  -142.819  < 2e-16 ***\nDESTIN_SZKLSZ08 -0.4565596  0.0051736   -88.249  < 2e-16 ***\nDESTIN_SZLKSZ01 -1.7277135  0.0207336   -83.329  < 2e-16 ***\nDESTIN_SZMDSZ01 -1.7155417  0.0210080   -81.661  < 2e-16 ***\nDESTIN_SZMDSZ02 -1.3694928  0.0114174  -119.948  < 2e-16 ***\nDESTIN_SZMDSZ03 -2.7183729  0.0252678  -107.582  < 2e-16 ***\nDESTIN_SZMPSZ01 -0.8051991  0.0078564  -102.490  < 2e-16 ***\nDESTIN_SZMPSZ02 -0.7627000  0.0061386  -124.246  < 2e-16 ***\nDESTIN_SZMPSZ03 -0.0649484  0.0047787   -13.591  < 2e-16 ***\nDESTIN_SZMUSZ02 -1.9549128  0.0200160   -97.667  < 2e-16 ***\nDESTIN_SZNTSZ01 -3.3048398  0.0448053   -73.760  < 2e-16 ***\nDESTIN_SZNTSZ02 -1.6454847  0.0109337  -150.497  < 2e-16 ***\nDESTIN_SZNTSZ03 -1.1389723  0.0077396  -147.161  < 2e-16 ***\nDESTIN_SZNTSZ05 -2.0264109  0.0250226   -80.983  < 2e-16 ***\nDESTIN_SZNTSZ06 -3.3496282  0.0428989   -78.082  < 2e-16 ***\nDESTIN_SZNVSZ01 -0.3407614  0.0045493   -74.905  < 2e-16 ***\nDESTIN_SZNVSZ02 -0.4987695  0.0053942   -92.465  < 2e-16 ***\nDESTIN_SZNVSZ03 -0.4936107  0.0055158   -89.491  < 2e-16 ***\nDESTIN_SZNVSZ04 -1.9141281  0.0107557  -177.964  < 2e-16 ***\nDESTIN_SZNVSZ05 -1.5378263  0.0089577  -171.677  < 2e-16 ***\nDESTIN_SZPGSZ01 -1.7744485  0.0194346   -91.304  < 2e-16 ***\nDESTIN_SZPGSZ02 -0.9282918  0.0069006  -134.523  < 2e-16 ***\nDESTIN_SZPGSZ03  0.0885025  0.0042145    21.000  < 2e-16 ***\nDESTIN_SZPGSZ04 -0.3879375  0.0046862   -82.784  < 2e-16 ***\nDESTIN_SZPGSZ05 -0.9649873  0.0074625  -129.311  < 2e-16 ***\nDESTIN_SZPLSZ01 -0.6159175  0.0070845   -86.939  < 2e-16 ***\nDESTIN_SZPLSZ02 -1.7551386  0.0133081  -131.885  < 2e-16 ***\nDESTIN_SZPLSZ03 -0.1378379  0.0098704   -13.965  < 2e-16 ***\nDESTIN_SZPLSZ04 -0.1411200  0.0096446   -14.632  < 2e-16 ***\nDESTIN_SZPLSZ05 -0.8483196  0.0119048   -71.259  < 2e-16 ***\nDESTIN_SZPNSZ01 -0.1579087  0.0057330   -27.544  < 2e-16 ***\nDESTIN_SZPNSZ02  1.0243480  0.0076680   133.587  < 2e-16 ***\nDESTIN_SZPNSZ03  0.0451598  0.0081444     5.545 2.94e-08 ***\nDESTIN_SZPNSZ04  1.8941928  0.0087479   216.530  < 2e-16 ***\nDESTIN_SZPNSZ05  1.0341581  0.0130830    79.046  < 2e-16 ***\nDESTIN_SZPRSZ01 -1.4038513  0.0086911  -161.527  < 2e-16 ***\nDESTIN_SZPRSZ02 -0.4942539  0.0052403   -94.319  < 2e-16 ***\nDESTIN_SZPRSZ03  0.4219510  0.0040281   104.751  < 2e-16 ***\nDESTIN_SZPRSZ04 -0.4841099  0.0083498   -57.979  < 2e-16 ***\nDESTIN_SZPRSZ05 -0.2988481  0.0047512   -62.899  < 2e-16 ***\nDESTIN_SZPRSZ06  0.0012333  0.0054530     0.226  0.82108    \nDESTIN_SZPRSZ07 -1.1417482  0.0118845   -96.070  < 2e-16 ***\nDESTIN_SZPRSZ08 -0.8259249  0.0066757  -123.720  < 2e-16 ***\nDESTIN_SZQTSZ01 -1.2134330  0.0089222  -136.002  < 2e-16 ***\nDESTIN_SZQTSZ02 -1.2397956  0.0074512  -166.388  < 2e-16 ***\nDESTIN_SZQTSZ03 -0.7448659  0.0066511  -111.992  < 2e-16 ***\nDESTIN_SZQTSZ04 -0.6243112  0.0066812   -93.443  < 2e-16 ***\nDESTIN_SZQTSZ05 -0.6102589  0.0060458  -100.940  < 2e-16 ***\nDESTIN_SZQTSZ06 -0.9164592  0.0065095  -140.788  < 2e-16 ***\nDESTIN_SZQTSZ07 -1.4600643  0.0109976  -132.762  < 2e-16 ***\nDESTIN_SZQTSZ08  0.0004582  0.0050178     0.091  0.92724    \nDESTIN_SZQTSZ09 -0.5226213  0.0058901   -88.728  < 2e-16 ***\nDESTIN_SZQTSZ10 -0.3867082  0.0055876   -69.208  < 2e-16 ***\nDESTIN_SZQTSZ11  0.0260589  0.0055065     4.732 2.22e-06 ***\nDESTIN_SZQTSZ12 -0.3387634  0.0072779   -46.547  < 2e-16 ***\nDESTIN_SZQTSZ13 -0.0512118  0.0053664    -9.543  < 2e-16 ***\nDESTIN_SZQTSZ14 -0.2555346  0.0063792   -40.057  < 2e-16 ***\nDESTIN_SZQTSZ15 -0.1820651  0.0077537   -23.481  < 2e-16 ***\nDESTIN_SZRCSZ01 -0.4641196  0.0072515   -64.003  < 2e-16 ***\nDESTIN_SZRCSZ06 -2.0929548  0.0189106  -110.676  < 2e-16 ***\nDESTIN_SZRVSZ01 -1.7885682  0.0163492  -109.398  < 2e-16 ***\nDESTIN_SZRVSZ02 -3.1669721  0.0326320   -97.051  < 2e-16 ***\nDESTIN_SZRVSZ03 -2.0306835  0.0135749  -149.591  < 2e-16 ***\nDESTIN_SZRVSZ04 -1.5113470  0.0155637   -97.107  < 2e-16 ***\nDESTIN_SZRVSZ05 -2.3683855  0.0259334   -91.326  < 2e-16 ***\nDESTIN_SZSBSZ01 -0.5841063  0.0068588   -85.162  < 2e-16 ***\nDESTIN_SZSBSZ02 -1.0777704  0.0078288  -137.667  < 2e-16 ***\nDESTIN_SZSBSZ03  0.4734371  0.0045880   103.190  < 2e-16 ***\nDESTIN_SZSBSZ04  0.0546094  0.0057517     9.494  < 2e-16 ***\nDESTIN_SZSBSZ05 -0.9588198  0.0075242  -127.431  < 2e-16 ***\nDESTIN_SZSBSZ06 -1.8528944  0.0234040   -79.170  < 2e-16 ***\nDESTIN_SZSBSZ07 -1.8403768  0.0195878   -93.955  < 2e-16 ***\nDESTIN_SZSBSZ08  0.9205969  0.0055698   165.285  < 2e-16 ***\nDESTIN_SZSBSZ09  0.5166486  0.0051939    99.472  < 2e-16 ***\nDESTIN_SZSESZ02 -0.5728211  0.0048270  -118.669  < 2e-16 ***\nDESTIN_SZSESZ03  0.2554787  0.0038335    66.645  < 2e-16 ***\nDESTIN_SZSESZ04 -0.8982794  0.0056698  -158.432  < 2e-16 ***\nDESTIN_SZSESZ05 -0.4661655  0.0048578   -95.962  < 2e-16 ***\nDESTIN_SZSESZ06 -0.8392849  0.0059198  -141.777  < 2e-16 ***\nDESTIN_SZSESZ07 -3.2182325  0.0227089  -141.717  < 2e-16 ***\nDESTIN_SZSGSZ01 -0.2751206  0.0059581   -46.176  < 2e-16 ***\nDESTIN_SZSGSZ02 -0.2951806  0.0052515   -56.209  < 2e-16 ***\nDESTIN_SZSGSZ03 -0.4469508  0.0048181   -92.766  < 2e-16 ***\nDESTIN_SZSGSZ04 -0.2842809  0.0047961   -59.274  < 2e-16 ***\nDESTIN_SZSGSZ05 -2.0643753  0.0098252  -210.109  < 2e-16 ***\nDESTIN_SZSGSZ06  0.2501247  0.0038873    64.343  < 2e-16 ***\nDESTIN_SZSGSZ07 -0.5743750  0.0052184  -110.067  < 2e-16 ***\nDESTIN_SZSISZ01 -1.1030669  0.0259113   -42.571  < 2e-16 ***\nDESTIN_SZSKSZ01 -0.5462538  0.0071443   -76.460  < 2e-16 ***\nDESTIN_SZSKSZ02  0.2965180  0.0056707    52.290  < 2e-16 ***\nDESTIN_SZSKSZ03 -0.4521490  0.0062177   -72.719  < 2e-16 ***\nDESTIN_SZSKSZ04 -0.6665145  0.0148252   -44.958  < 2e-16 ***\nDESTIN_SZSKSZ05 -0.1474142  0.0121958   -12.087  < 2e-16 ***\nDESTIN_SZSLSZ01 -0.8855715  0.0084587  -104.693  < 2e-16 ***\nDESTIN_SZSLSZ04 -1.1787840  0.0071355  -165.200  < 2e-16 ***\nDESTIN_SZSRSZ01 -1.6435064  0.0128822  -127.580  < 2e-16 ***\nDESTIN_SZTHSZ01 -3.4388625  0.0367651   -93.536  < 2e-16 ***\nDESTIN_SZTHSZ03 -2.5809435  0.0256853  -100.483  < 2e-16 ***\nDESTIN_SZTHSZ04 -2.4887189  0.0214441  -116.056  < 2e-16 ***\nDESTIN_SZTHSZ06 -1.7965101  0.0152160  -118.067  < 2e-16 ***\nDESTIN_SZTMSZ01 -0.3251891  0.0058067   -56.002  < 2e-16 ***\nDESTIN_SZTMSZ02  1.1558743  0.0034703   333.080  < 2e-16 ***\nDESTIN_SZTMSZ03  0.4525619  0.0039244   115.319  < 2e-16 ***\nDESTIN_SZTMSZ04  0.8223271  0.0040060   205.274  < 2e-16 ***\nDESTIN_SZTMSZ05  0.3880619  0.0054308    71.456  < 2e-16 ***\nDESTIN_SZTNSZ01 -0.9533112  0.0067853  -140.496  < 2e-16 ***\nDESTIN_SZTNSZ02 -1.5909451  0.0097396  -163.348  < 2e-16 ***\nDESTIN_SZTNSZ03 -1.6470771  0.0116598  -141.261  < 2e-16 ***\nDESTIN_SZTNSZ04 -1.0686173  0.0069848  -152.993  < 2e-16 ***\nDESTIN_SZTPSZ01 -0.5180183  0.0056886   -91.063  < 2e-16 ***\nDESTIN_SZTPSZ02  0.2160781  0.0038283    56.443  < 2e-16 ***\nDESTIN_SZTPSZ03 -0.2479956  0.0056651   -43.776  < 2e-16 ***\nDESTIN_SZTPSZ04 -1.5015463  0.0072444  -207.271  < 2e-16 ***\nDESTIN_SZTPSZ05 -0.9551144  0.0057981  -164.729  < 2e-16 ***\nDESTIN_SZTPSZ06 -0.4846634  0.0074621   -64.950  < 2e-16 ***\nDESTIN_SZTPSZ07 -1.9753440  0.0118295  -166.984  < 2e-16 ***\nDESTIN_SZTPSZ08 -1.3455063  0.0086909  -154.817  < 2e-16 ***\nDESTIN_SZTPSZ09 -0.3556620  0.0061296   -58.024  < 2e-16 ***\nDESTIN_SZTPSZ10 -1.3213501  0.0085951  -153.733  < 2e-16 ***\nDESTIN_SZTPSZ11 -0.3877006  0.0052409   -73.977  < 2e-16 ***\nDESTIN_SZTPSZ12 -0.7064020  0.0062472  -113.075  < 2e-16 ***\nDESTIN_SZTSSZ01 -0.8827157  0.0218327   -40.431  < 2e-16 ***\nDESTIN_SZTSSZ02 -0.6067055  0.0115514   -52.522  < 2e-16 ***\nDESTIN_SZTSSZ03  0.4380259  0.0086774    50.479  < 2e-16 ***\nDESTIN_SZTSSZ04  0.4902124  0.0089922    54.515  < 2e-16 ***\nDESTIN_SZTSSZ05  1.4336278  0.0093410   153.477  < 2e-16 ***\nDESTIN_SZTSSZ06  0.9223573  0.0209024    44.127  < 2e-16 ***\nDESTIN_SZWCSZ01  1.1559309  0.0051787   223.208  < 2e-16 ***\nDESTIN_SZWCSZ02 -1.2664455  0.0126131  -100.407  < 2e-16 ***\nDESTIN_SZWCSZ03 -2.7360882  0.0325753   -83.993  < 2e-16 ***\nDESTIN_SZWDSZ01  0.8193492  0.0037301   219.657  < 2e-16 ***\nDESTIN_SZWDSZ02 -0.7852474  0.0058655  -133.875  < 2e-16 ***\nDESTIN_SZWDSZ03  0.5742422  0.0041884   137.104  < 2e-16 ***\nDESTIN_SZWDSZ04 -0.8391525  0.0065075  -128.951  < 2e-16 ***\nDESTIN_SZWDSZ05 -0.3510692  0.0057253   -61.319  < 2e-16 ***\nDESTIN_SZWDSZ06  0.1358804  0.0043968    30.905  < 2e-16 ***\nDESTIN_SZWDSZ07 -0.2207379  0.0066369   -33.259  < 2e-16 ***\nDESTIN_SZWDSZ08 -0.0264655  0.0065065    -4.068 4.75e-05 ***\nDESTIN_SZWDSZ09 -0.2065828  0.0050524   -40.888  < 2e-16 ***\nDESTIN_SZYSSZ01  0.7467996  0.0040979   182.238  < 2e-16 ***\nDESTIN_SZYSSZ02 -0.3002718  0.0053434   -56.195  < 2e-16 ***\nDESTIN_SZYSSZ03 -1.1087686  0.0057219  -193.778  < 2e-16 ***\nDESTIN_SZYSSZ04 -0.3748076  0.0051481   -72.805  < 2e-16 ***\nDESTIN_SZYSSZ05 -1.7909654  0.0102064  -175.475  < 2e-16 ***\nDESTIN_SZYSSZ06 -1.8519179  0.0099601  -185.933  < 2e-16 ***\nDESTIN_SZYSSZ07 -0.9246626  0.0118101   -78.294  < 2e-16 ***\nDESTIN_SZYSSZ08  0.4403129  0.0041268   106.697  < 2e-16 ***\nDESTIN_SZYSSZ09  0.0267012  0.0041393     6.451 1.11e-10 ***\nlog(dist)       -0.6721961  0.0001353 -4969.566  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 60796037  on 14733  degrees of freedom\nResidual deviance: 20988409  on 14175  degrees of freedom\nAIC: 21081154\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\n\nShow the code\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n\n[1] 0.5739638\n\n\nNotice that there is a relatively greater improvement in the R^2 value."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#model-comparison",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#model-comparison",
    "title": "Hands-on Exercise 13",
    "section": "Model comparison",
    "text": "Model comparison\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use compare_performance() of performance package\nFirst of all, let us create a list called model_list by using the code chun below.\n\n\nShow the code\nmodel_list <- list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\n\nNext, we will compute the RMSE of all the models in model_list file by using the code chunk below.\n\n\nShow the code\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 4288.012\noriginConstrained      |   glm | 3659.954\ndestinationConstrained |   glm | 3389.556\ndoublyConstrained      |   glm | 3252.297\n\n\nThe print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1487.111."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#visualising-fitted-values",
    "href": "Hands-on_Ex/Hands-on_Ex13/Hands-on_Ex13.html#visualising-fitted-values",
    "title": "Hands-on Exercise 13",
    "section": "Visualising fitted values",
    "text": "Visualising fitted values\nIn this section, you will learn how to visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from each model by using the code chunk below.\n\n\nShow the code\ndf <- as.data.frame(uncSIM$fitted.values) %>%\n  round(digits = 0)\n\n\nNext, we will join the values to SIM_data data frame.\n\n\nShow the code\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\n\nRepeat the same step by for Origin Constrained SIM (i.e. orcSIM)\n\n\nShow the code\ndf <- as.data.frame(orcSIM$fitted.values) %>%\n  round(digits = 0)\n\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\n\nRepeat the same step by for Destination Constrained SIM (i.e. decSIM)\n\n\nShow the code\ndf <- as.data.frame(decSIM$fitted.values) %>%\n  round(digits = 0)\n\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\n\nRepeat the same step by for Doubly Constrained SIM (i.e. dbcSIM)\n\n\nShow the code\ndf <- as.data.frame(dbcSIM$fitted.values) %>%\n  round(digits = 0)\n\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\nunc_p <- ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p <- ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p <- ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p <- ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\nNow, we will put all the graphs into a single visual for better comparison by using the code chunk below.\n\n\nShow the code\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex13/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex13/data/geospatial/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  }
]